import {
  arrow,
  autoUpdate,
  computePosition,
  flip,
  floating_ui_dom_exports,
  offset,
  shift
} from "./chunk-XSOX4N54.js";
import {
  blur,
  fade,
  fly,
  slide
} from "./chunk-5LZY7MF3.js";
import {
  twJoin,
  twMerge
} from "./chunk-7IGY6HU5.js";
import "./chunk-4AGKJI2U.js";
import "./chunk-ELKJSBLM.js";
import {
  tweened
} from "./chunk-UMMG4WIW.js";
import "./chunk-7QVRCM45.js";
import "./chunk-VBZKTUHK.js";
import "./chunk-7RQDXF5S.js";
import "./chunk-GD2STIFW.js";
import {
  cubicOut,
  sineIn
} from "./chunk-YERFD2CZ.js";
import {
  action,
  add_locations,
  attribute_effect,
  bind_checked,
  bind_files,
  bind_group,
  bind_select_value,
  bind_this,
  bind_value,
  bubble_event,
  check_target,
  clsx,
  component,
  createEventDispatcher,
  create_ownership_validator,
  each,
  element,
  hmr,
  html,
  if_block,
  index,
  init,
  key,
  legacy_api,
  legacy_rest_props,
  log_if_contains_state,
  onMount,
  prop,
  remove_input_defaults,
  sanitize_slots,
  set_attribute,
  set_class,
  set_selected,
  set_style,
  setup_stores,
  slot,
  spread_props,
  store_get,
  store_mutate,
  store_set,
  transition,
  validate_dynamic_element_tag,
  validate_each_keys,
  validate_store,
  validate_void_dynamic_element,
  wrap_snippet,
  writable
} from "./chunk-HZUMA3JB.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  from_svg,
  head,
  preventDefault,
  set_text,
  stopPropagation,
  text,
  with_script
} from "./chunk-3KODWDKR.js";
import {
  $document,
  FILENAME,
  HMR,
  add_svelte_meta,
  apply,
  child,
  deep_read_state,
  derived_safe_equal,
  effect,
  event,
  first_child,
  get,
  getContext,
  invalid_default_snippet,
  invalidate_inner_signals,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mutable_source,
  mutate,
  next,
  pop,
  push,
  remove_textarea_child,
  replay_events,
  reset,
  set,
  setContext,
  sibling,
  strict_equals,
  tag,
  template_effect,
  track_reactivity_loss,
  untrack,
  user_derived
} from "./chunk-RVR3TTMP.js";
import "./chunk-257HUYHO.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-K63UQA3V.js";
import "./chunk-5AQFBOJN.js";

// node_modules/flowbite-svelte/dist/utils/Frame.svelte
Frame[FILENAME] = "node_modules/flowbite-svelte/dist/utils/Frame.svelte";
var bgColors = {
  gray: "bg-gray-50 dark:bg-gray-800",
  red: "bg-red-50 dark:bg-gray-800",
  yellow: "bg-yellow-50 dark:bg-gray-800 ",
  green: "bg-green-50 dark:bg-gray-800 ",
  indigo: "bg-indigo-50 dark:bg-gray-800 ",
  purple: "bg-purple-50 dark:bg-gray-800 ",
  pink: "bg-pink-50 dark:bg-gray-800 ",
  blue: "bg-blue-50 dark:bg-gray-800 ",
  light: "bg-gray-50 dark:bg-gray-700",
  dark: "bg-gray-50 dark:bg-gray-800",
  default: "bg-white dark:bg-gray-800",
  dropdown: "bg-white dark:bg-gray-700",
  navbar: "bg-white dark:bg-gray-900",
  navbarUl: "bg-gray-50 dark:bg-gray-800",
  form: "bg-gray-50 dark:bg-gray-700",
  primary: "bg-primary-50 dark:bg-gray-800 ",
  orange: "bg-orange-50 dark:bg-orange-800",
  none: ""
};
function Frame($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "tag",
    "color",
    "rounded",
    "border",
    "shadow",
    "node",
    "use",
    "options",
    "role",
    "transition",
    "params",
    "open"
  ]);
  push($$props, false, Frame);
  const noop = () => {
  };
  setContext("background", true);
  let tag2 = prop($$props, "tag", 24, () => $$restProps.href ? "a" : "div");
  let color = prop($$props, "color", 12, "default");
  let rounded = prop($$props, "rounded", 8, false);
  let border = prop($$props, "border", 8, false);
  let shadow = prop($$props, "shadow", 8, false);
  let node = prop($$props, "node", 28, () => void 0);
  let use = prop($$props, "use", 8, noop);
  let options = prop($$props, "options", 24, () => ({}));
  let role = prop($$props, "role", 24, () => void 0);
  let transition2 = prop($$props, "transition", 24, () => void 0);
  let params = prop($$props, "params", 24, () => ({}));
  let open = prop($$props, "open", 8, true);
  const dispatch = createEventDispatcher();
  const textColors = {
    gray: "text-gray-800 dark:text-gray-300",
    red: "text-red-800 dark:text-red-400",
    yellow: "text-yellow-800 dark:text-yellow-300",
    green: "text-green-800 dark:text-green-400",
    indigo: "text-indigo-800 dark:text-indigo-400",
    purple: "text-purple-800 dark:text-purple-400",
    pink: "text-pink-800 dark:text-pink-400",
    blue: "text-blue-800 dark:text-blue-400",
    light: "text-gray-700 dark:text-gray-300",
    dark: "text-gray-700 dark:text-gray-300",
    default: "text-gray-500 dark:text-gray-400",
    dropdown: "text-gray-700 dark:text-gray-200",
    navbar: "text-gray-700 dark:text-gray-200",
    navbarUl: "text-gray-700 dark:text-gray-400",
    form: "text-gray-900 dark:text-white",
    primary: "text-primary-800 dark:text-primary-400",
    orange: "text-orange-800 dark:text-orange-400",
    none: ""
  };
  const borderColors = {
    gray: "border-gray-300 dark:border-gray-800 divide-gray-300 dark:divide-gray-800",
    red: "border-red-300 dark:border-red-800 divide-red-300 dark:divide-red-800",
    yellow: "border-yellow-300 dark:border-yellow-800 divide-yellow-300 dark:divide-yellow-800",
    green: "border-green-300 dark:border-green-800 divide-green-300 dark:divide-green-800",
    indigo: "border-indigo-300 dark:border-indigo-800 divide-indigo-300 dark:divide-indigo-800",
    purple: "border-purple-300 dark:border-purple-800 divide-purple-300 dark:divide-purple-800",
    pink: "border-pink-300 dark:border-pink-800 divide-pink-300 dark:divide-pink-800",
    blue: "border-blue-300 dark:border-blue-800 divide-blue-300 dark:divide-blue-800",
    light: "border-gray-500 divide-gray-500",
    dark: "border-gray-500 divide-gray-500",
    default: "border-gray-200 dark:border-gray-700 divide-gray-200 dark:divide-gray-700",
    dropdown: "border-gray-100 dark:border-gray-600 divide-gray-100 dark:divide-gray-600",
    navbar: "border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700",
    navbarUl: "border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700",
    form: "border-gray-300 dark:border-gray-700 divide-gray-300 dark:divide-gray-700",
    primary: "border-primary-500 dark:border-primary-200  divide-primary-500 dark:divide-primary-200 ",
    orange: "border-orange-300 dark:border-orange-800 divide-orange-300 dark:divide-orange-800",
    none: ""
  };
  let divClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch(open() ? "open" : "close");
  });
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch("show", open());
  });
  legacy_pre_effect(() => deep_read_state(color()), () => {
    color(color() ?? "default");
  });
  legacy_pre_effect(() => (setContext, deep_read_state(color())), () => {
    setContext("color", color());
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(color()), deep_read_state(rounded()), deep_read_state(border()), deep_read_state(shadow()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(bgColors[color()], textColors[color()], rounded() && "rounded-lg", border() && "border", borderColors[color()], shadow() && "shadow-md", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        validate_void_dynamic_element(tag2);
        validate_dynamic_element_tag(tag2);
        element(
          node_2,
          tag2,
          false,
          ($$element, $$anchor3) => {
            action($$element, ($$node, $$action_arg) => {
              var _a;
              return (_a = use()) == null ? void 0 : _a($$node, $$action_arg);
            }, options);
            bind_this($$element, ($$value) => node($$value), () => node());
            attribute_effect($$element, () => ({ role: role(), ...$$restProps, class: get(divClass) }));
            transition(3, $$element, transition2, params);
            event("click", $$element, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseenter", $$element, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseleave", $$element, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("focusin", $$element, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("focusout", $$element, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            slot(node_3, $$props, "default", {}, null);
            append($$anchor3, fragment_2);
          },
          void 0,
          [91, 2]
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_3 = comment();
      var node_4 = first_child(fragment_3);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_5 = first_child(fragment_4);
          {
            validate_void_dynamic_element(tag2);
            validate_dynamic_element_tag(tag2);
            element(
              node_5,
              tag2,
              false,
              ($$element_1, $$anchor4) => {
                action($$element_1, ($$node, $$action_arg) => {
                  var _a;
                  return (_a = use()) == null ? void 0 : _a($$node, $$action_arg);
                }, options);
                bind_this($$element_1, ($$value) => node($$value), () => node());
                attribute_effect($$element_1, () => ({ role: role(), ...$$restProps, class: get(divClass) }));
                event("click", $$element_1, function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                });
                event("mouseenter", $$element_1, function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                });
                event("mouseleave", $$element_1, function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                });
                event("focusin", $$element_1, function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                });
                event("focusout", $$element_1, function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                });
                var fragment_5 = comment();
                var node_6 = first_child(fragment_5);
                slot(node_6, $$props, "default", {}, null);
                append($$anchor4, fragment_5);
              },
              void 0,
              [95, 2]
            );
          }
          append($$anchor3, fragment_4);
        };
        add_svelte_meta(
          () => if_block(
            node_4,
            ($$render) => {
              if (open()) $$render(consequent_1);
            },
            true
          ),
          "if",
          Frame,
          94,
          0
        );
      }
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (transition2() && open()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Frame,
      90,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Frame = hmr(Frame, () => Frame[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Frame[HMR].source;
    set(Frame[HMR].source, module.default[HMR].original);
  });
}
var Frame_default = Frame;

// node_modules/flowbite-svelte/dist/accordion/Accordion.svelte
Accordion[FILENAME] = "node_modules/flowbite-svelte/dist/accordion/Accordion.svelte";
function Accordion($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "multiple",
    "flush",
    "activeClass",
    "inactiveClass",
    "defaultClass"
  ]);
  push($$props, false, Accordion);
  let multiple = prop($$props, "multiple", 8, false);
  let flush = prop($$props, "flush", 8, false);
  let activeClass = prop($$props, "activeClass", 8, "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800");
  let inactiveClass = prop($$props, "inactiveClass", 8, "text-gray-500 dark:text-gray-400 hover:bg-gray-100 hover:dark:bg-gray-800");
  let defaultClass = prop($$props, "defaultClass", 8, "text-gray-500 dark:text-gray-400");
  const ctx = {
    flush: flush(),
    activeClass: twMerge(activeClass(), $$sanitized_props.classActive),
    inactiveClass: twMerge(inactiveClass(), $$sanitized_props.classInactive),
    selected: multiple() ? void 0 : writable()
  };
  setContext("ctx", ctx);
  let frameClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(frameClass, twMerge(defaultClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Frame_default(node, spread_props(() => $$restProps, {
      get class() {
        return get(frameClass);
      },
      color: "none",
      children: wrap_snippet(Accordion, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Accordion,
    23,
    0,
    { componentTag: "Frame" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Accordion = hmr(Accordion, () => Accordion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accordion[HMR].source;
    set(Accordion[HMR].source, module.default[HMR].original);
  });
}
var Accordion_default = Accordion;

// node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte
AccordionItem[FILENAME] = "node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte";
var root_3 = add_locations(from_svg(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), AccordionItem[FILENAME], [[56, 8, [[57, 10]]]]);
var root_5 = add_locations(from_svg(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), AccordionItem[FILENAME], [[62, 8, [[63, 10]]]]);
var root_1 = add_locations(from_html(`<button type="button"><!> <!></button>`), AccordionItem[FILENAME], [[52, 2]]);
var root_6 = add_locations(from_html(`<div><div><!></div></div>`), AccordionItem[FILENAME], [[70, 2, [[71, 4]]]]);
var root = add_locations(from_html(`<!> <!>`, 1), AccordionItem[FILENAME], []);
function AccordionItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, AccordionItem);
  const $selected = () => (validate_store(selected, "selected"), store_get(selected, "$selected", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const contentClass = mutable_source();
  let tag2 = prop($$props, "tag", 8, "h2");
  let open = prop($$props, "open", 12, false);
  let activeClass = prop($$props, "activeClass", 24, () => void 0);
  let inactiveClass = prop($$props, "inactiveClass", 24, () => void 0);
  let defaultClass = prop($$props, "defaultClass", 8, "flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700");
  let transitionType = prop($$props, "transitionType", 8, "slide");
  let transitionParams = prop($$props, "transitionParams", 24, () => ({}));
  let paddingFlush = prop($$props, "paddingFlush", 8, "py-5");
  let paddingDefault = prop($$props, "paddingDefault", 8, "p-5");
  let textFlushOpen = prop($$props, "textFlushOpen", 8, "text-gray-900 dark:text-white");
  let textFlushDefault = prop($$props, "textFlushDefault", 8, "text-gray-500 dark:text-gray-400");
  let borderClass = prop($$props, "borderClass", 8, "border-s border-e group-first:border-t");
  let borderOpenClass = prop($$props, "borderOpenClass", 8, "border-s border-e");
  let borderBottomClass = prop($$props, "borderBottomClass", 8, "border-b");
  let borderSharedClass = prop($$props, "borderSharedClass", 8, "border-gray-200 dark:border-gray-700");
  let classActive = prop($$props, "classActive", 24, () => void 0);
  let classInactive = prop($$props, "classInactive", 24, () => void 0);
  let activeCls = twMerge(activeClass(), classActive());
  let inactiveCls = twMerge(inactiveClass(), classInactive());
  const multiple = (node, params) => {
    switch (transitionType()) {
      case "blur":
        return blur(node, params);
      case "fly":
        return fly(node, params);
      case "fade":
        return fade(node, params);
      default:
        return slide(node, params);
    }
  };
  const ctx = getContext("ctx") ?? {};
  const self = {};
  const selected = ctx.selected ?? writable();
  let _open = open();
  open(false);
  onMount(() => {
    if (_open) store_set(selected, self);
    return selected.subscribe((x) => open(strict_equals(x, self)));
  });
  const handleToggle = (_) => selected.set(open() ? {} : self);
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(borderClass()), deep_read_state(borderBottomClass()), deep_read_state(borderSharedClass()), deep_read_state(paddingFlush()), deep_read_state(paddingDefault()), deep_read_state(open()), deep_read_state(textFlushOpen()), deep_read_state(textFlushDefault()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge([
        defaultClass(),
        ctx.flush || borderClass(),
        borderBottomClass(),
        borderSharedClass(),
        ctx.flush ? paddingFlush() : paddingDefault(),
        open() && (ctx.flush ? textFlushOpen() : activeCls || ctx.activeClass),
        !open() && (ctx.flush ? textFlushDefault() : inactiveCls || ctx.inactiveClass),
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(paddingFlush()), deep_read_state(paddingDefault()), deep_read_state(borderOpenClass()), deep_read_state(borderBottomClass()), deep_read_state(borderSharedClass())),
    () => {
      set(contentClass, twMerge([
        ctx.flush ? paddingFlush() : paddingDefault(),
        ctx.flush ? "" : borderOpenClass(),
        borderBottomClass(),
        borderSharedClass()
      ]));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root();
  var node_1 = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node_1,
      tag2,
      false,
      ($$element, $$anchor2) => {
        set_class($$element, 0, "group");
        var button = root_1();
        var node_2 = child(button);
        slot(node_2, $$props, "header", {}, null);
        var node_3 = sibling(node_2, 2);
        {
          var consequent = ($$anchor3) => {
            var fragment_1 = comment();
            var node_4 = first_child(fragment_1);
            slot(node_4, $$props, "arrowup", {}, ($$anchor4) => {
              var svg = root_3();
              append($$anchor4, svg);
            });
            append($$anchor3, fragment_1);
          };
          var alternate = ($$anchor3) => {
            var fragment_2 = comment();
            var node_5 = first_child(fragment_2);
            slot(node_5, $$props, "arrowdown", {}, ($$anchor4) => {
              var svg_1 = root_5();
              append($$anchor4, svg_1);
            });
            append($$anchor3, fragment_2);
          };
          add_svelte_meta(
            () => if_block(node_3, ($$render) => {
              if (open()) $$render(consequent);
              else $$render(alternate, false);
            }),
            "if",
            AccordionItem,
            54,
            4
          );
        }
        reset(button);
        template_effect(() => {
          set_class(button, 1, clsx(get(buttonClass)));
          set_attribute(button, "aria-expanded", open());
        });
        event("click", button, handleToggle);
        append($$anchor2, button);
      },
      void 0,
      [51, 0]
    );
  }
  var node_6 = sibling(node_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_6();
      var div_1 = child(div);
      var node_7 = child(div_1);
      slot(node_7, $$props, "default", {}, null);
      reset(div_1);
      reset(div);
      template_effect(() => set_class(div_1, 1, clsx(get(contentClass))));
      transition(3, div, () => multiple, transitionParams);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node_6, ($$render) => {
        if (open()) $$render(consequent_1);
      }),
      "if",
      AccordionItem,
      69,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  AccordionItem = hmr(AccordionItem, () => AccordionItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionItem[HMR].source;
    set(AccordionItem[HMR].source, module.default[HMR].original);
  });
}
var AccordionItem_default = AccordionItem;

// node_modules/flowbite-svelte/dist/utils/TransitionFrame.svelte
TransitionFrame[FILENAME] = "node_modules/flowbite-svelte/dist/utils/TransitionFrame.svelte";
function TransitionFrame($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["transition", "params", "open"]);
  push($$props, false, TransitionFrame);
  var $$ownership_validator = create_ownership_validator($$props);
  let transition2 = prop($$props, "transition", 8, fade);
  let params = prop($$props, "params", 24, () => ({}));
  let open = prop($$props, "open", 12, true);
  function close(ev) {
    if (ev == null ? void 0 : ev.stopPropagation) ev.stopPropagation();
    open(false);
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    $$ownership_validator.binding("open", Frame_default, open);
    add_svelte_meta(
      () => Frame_default(node, spread_props(
        {
          get transition() {
            return transition2();
          },
          get params() {
            return params();
          }
        },
        () => $$restProps,
        {
          get open() {
            return open();
          },
          set open($$value) {
            open($$value);
          },
          $$events: {
            show($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(TransitionFrame, ($$anchor2, $$slotProps) => {
            var fragment_1 = comment();
            var node_1 = first_child(fragment_1);
            slot(node_1, $$props, "default", { close }, null);
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true },
          $$legacy: true
        }
      )),
      "component",
      TransitionFrame,
      13,
      0,
      { componentTag: "Frame" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  TransitionFrame = hmr(TransitionFrame, () => TransitionFrame[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TransitionFrame[HMR].source;
    set(TransitionFrame[HMR].source, module.default[HMR].original);
  });
}
var TransitionFrame_default = TransitionFrame;

// node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte
ToolbarButton[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte";
var root_2 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[40, 14]]);
var root_12 = add_locations(from_html(`<a><!> <!></a>`), ToolbarButton[FILENAME], [[39, 2]]);
var root_4 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[45, 14]]);
var root_32 = add_locations(from_html(`<button><!> <!></button>`), ToolbarButton[FILENAME], [[44, 2]]);
function ToolbarButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "name", "ariaLabel", "size", "href"]);
  push($$props, false, ToolbarButton);
  let color = prop($$props, "color", 8, "default");
  let name = prop($$props, "name", 24, () => void 0);
  let ariaLabel = prop($$props, "ariaLabel", 24, () => void 0);
  let size = prop($$props, "size", 8, "md");
  let href = prop($$props, "href", 24, () => void 0);
  const background = getContext("background");
  const colors = {
    dark: "text-gray-500 hover:text-gray-900 hover:bg-gray-200 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600",
    gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
    red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
    yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
    green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
    indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
    purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
    pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
    blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
    primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
    default: "focus:ring-gray-400 hover:bg-gray-100"
  };
  const sizing = {
    xs: "m-0.5 rounded-sm focus:ring-1 p-0.5",
    sm: "m-0.5 rounded focus:ring-1 p-0.5",
    md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
    lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
  };
  let buttonClass = mutable_source();
  const svgSizes = {
    xs: "w-3 h-3",
    sm: "w-3.5 h-3.5",
    md: "w-5 h-5",
    lg: "w-5 h-5"
  };
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge("focus:outline-none whitespace-normal", sizing[size()], colors[color()], strict_equals(color(), "default") && (background ? "dark:hover:bg-gray-600" : "dark:hover:bg-gray-700"), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_12();
      attribute_effect(a, () => ({
        href: href(),
        ...$$restProps,
        class: get(buttonClass),
        "aria-label": ariaLabel() ?? name()
      }));
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var span = root_2();
          var text2 = child(span, true);
          reset(span);
          template_effect(() => set_text(text2, name()));
          append($$anchor3, span);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (name()) $$render(consequent);
          }),
          "if",
          ToolbarButton,
          40,
          4
        );
      }
      var node_2 = sibling(node_1, 2);
      slot(
        node_2,
        $$props,
        "default",
        {
          get svgSize() {
            return deep_read_state(size()), untrack(() => svgSizes[size()]);
          }
        },
        null
      );
      reset(a);
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var button = root_32();
      attribute_effect(button, () => ({
        type: "button",
        ...$$restProps,
        class: get(buttonClass),
        "aria-label": ariaLabel() ?? name()
      }));
      var node_3 = child(button);
      {
        var consequent_2 = ($$anchor3) => {
          var span_1 = root_4();
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, name()));
          append($$anchor3, span_1);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (name()) $$render(consequent_2);
          }),
          "if",
          ToolbarButton,
          45,
          4
        );
      }
      var node_4 = sibling(node_3, 2);
      slot(
        node_4,
        $$props,
        "default",
        {
          get svgSize() {
            return deep_read_state(size()), untrack(() => svgSizes[size()]);
          }
        },
        null
      );
      reset(button);
      event("click", button, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, button);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      ToolbarButton,
      38,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ToolbarButton = hmr(ToolbarButton, () => ToolbarButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarButton[HMR].source;
    set(ToolbarButton[HMR].source, module.default[HMR].original);
  });
}
var ToolbarButton_default = ToolbarButton;

// node_modules/flowbite-svelte/dist/utils/CloseButton.svelte
CloseButton[FILENAME] = "node_modules/flowbite-svelte/dist/utils/CloseButton.svelte";
var root_13 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`), CloseButton[FILENAME], [[7, 2, [[8, 4]]]]);
function CloseButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["name"]);
  push($$props, false, CloseButton);
  let name = prop($$props, "name", 8, "Close");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("ms-auto", $$sanitized_props.class))));
    add_svelte_meta(
      () => ToolbarButton_default(node, spread_props(
        {
          get name() {
            return name();
          }
        },
        () => $$restProps,
        {
          get class() {
            return get($0);
          },
          $$events: {
            click($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: invalid_default_snippet,
          $$slots: {
            default: ($$anchor2, $$slotProps) => {
              const svgSize = derived_safe_equal(() => $$slotProps.svgSize);
              var svg = root_13();
              template_effect(() => set_class(svg, 0, clsx(get(svgSize))));
              append($$anchor2, svg);
            }
          }
        }
      )),
      "component",
      CloseButton,
      6,
      0,
      { componentTag: "ToolbarButton" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  CloseButton = hmr(CloseButton, () => CloseButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloseButton[HMR].source;
    set(CloseButton[HMR].source, module.default[HMR].original);
  });
}
var CloseButton_default = CloseButton;

// node_modules/flowbite-svelte/dist/alert/Alert.svelte
Alert[FILENAME] = "node_modules/flowbite-svelte/dist/alert/Alert.svelte";
var root_33 = add_locations(from_html(`<div><!></div>`), Alert[FILENAME], [[16, 4]]);
var root_14 = add_locations(from_html(`<!> <!> <!>`, 1), Alert[FILENAME], []);
function Alert($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["dismissable", "defaultClass"]);
  push($$props, false, Alert);
  let dismissable = prop($$props, "dismissable", 8, false);
  let defaultClass = prop($$props, "defaultClass", 8, "p-4 gap-3 text-sm");
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(dismissable()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(defaultClass(), ($$slots.icon || dismissable()) && "flex items-center", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => TransitionFrame_default(node, spread_props(
      {
        get dismissable() {
          return dismissable();
        },
        color: "primary",
        role: "alert",
        rounded: true
      },
      () => $$restProps,
      {
        get class() {
          return get(divClass);
        },
        $$events: {
          close($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: invalid_default_snippet,
        $$slots: {
          default: ($$anchor2, $$slotProps) => {
            const close = derived_safe_equal(() => $$slotProps.close);
            var fragment_1 = root_14();
            var node_1 = first_child(fragment_1);
            {
              var consequent = ($$anchor3) => {
                var fragment_2 = comment();
                var node_2 = first_child(fragment_2);
                slot(node_2, $$props, "icon", {}, null);
                append($$anchor3, fragment_2);
              };
              add_svelte_meta(
                () => if_block(node_1, ($$render) => {
                  if (untrack(() => $$slots.icon)) $$render(consequent);
                }),
                "if",
                Alert,
                11,
                2
              );
            }
            var node_3 = sibling(node_1, 2);
            {
              var consequent_1 = ($$anchor3) => {
                var div = root_33();
                var node_4 = child(div);
                slot(node_4, $$props, "default", {}, null);
                reset(div);
                append($$anchor3, div);
              };
              var alternate = ($$anchor3) => {
                var fragment_3 = comment();
                var node_5 = first_child(fragment_3);
                slot(node_5, $$props, "default", {}, null);
                append($$anchor3, fragment_3);
              };
              add_svelte_meta(
                () => if_block(node_3, ($$render) => {
                  if (deep_read_state(dismissable()), untrack(() => $$slots.icon || dismissable())) $$render(consequent_1);
                  else $$render(alternate, false);
                }),
                "if",
                Alert,
                15,
                2
              );
            }
            var node_6 = sibling(node_3, 2);
            {
              var consequent_2 = ($$anchor3) => {
                var fragment_4 = comment();
                var node_7 = first_child(fragment_4);
                slot(
                  node_7,
                  $$props,
                  "close-button",
                  {
                    get close() {
                      return get(close);
                    }
                  },
                  ($$anchor4) => {
                    var fragment_5 = comment();
                    var node_8 = first_child(fragment_5);
                    add_svelte_meta(
                      () => CloseButton_default(node_8, {
                        class: "ms-auto -me-1.5 -my-1.5 dark:hover:bg-gray-700",
                        get color() {
                          return deep_read_state($$restProps), untrack(() => $$restProps.color);
                        },
                        $$events: {
                          click: [
                            function(...$$args) {
                              apply(() => get(close), this, $$args, Alert, [23, 110]);
                            },
                            function($$arg) {
                              bubble_event.call(this, $$props, $$arg);
                            }
                          ],
                          change($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          keydown($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          keyup($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          focus($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          blur($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          mouseenter($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          },
                          mouseleave($$arg) {
                            bubble_event.call(this, $$props, $$arg);
                          }
                        }
                      }),
                      "component",
                      Alert,
                      23,
                      6,
                      { componentTag: "CloseButton" }
                    );
                    append($$anchor4, fragment_5);
                  }
                );
                append($$anchor3, fragment_4);
              };
              add_svelte_meta(
                () => if_block(node_6, ($$render) => {
                  if (dismissable()) $$render(consequent_2);
                }),
                "if",
                Alert,
                21,
                2
              );
            }
            append($$anchor2, fragment_1);
          }
        }
      }
    )),
    "component",
    Alert,
    10,
    0,
    { componentTag: "TransitionFrame" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Alert = hmr(Alert, () => Alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alert[HMR].source;
    set(Alert[HMR].source, module.default[HMR].original);
  });
}
var Alert_default = Alert;

// node_modules/flowbite-svelte/dist/indicators/Indicator.svelte
Indicator[FILENAME] = "node_modules/flowbite-svelte/dist/indicators/Indicator.svelte";
var root2 = add_locations(from_html(`<div><!></div>`), Indicator[FILENAME], [[60, 0]]);
function Indicator($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "rounded", "size", "border", "placement", "offset"]);
  push($$props, false, Indicator);
  let color = prop($$props, "color", 8, "gray");
  let rounded = prop($$props, "rounded", 8, false);
  let size = prop($$props, "size", 8, "md");
  let border = prop($$props, "border", 8, false);
  let placement = prop($$props, "placement", 24, () => void 0);
  let offset2 = prop($$props, "offset", 8, true);
  const colors = {
    gray: "bg-gray-200",
    dark: "bg-gray-900 dark:bg-gray-700",
    blue: "bg-blue-600",
    orange: "bg-orange-600",
    green: "bg-green-500",
    red: "bg-red-500",
    purple: "bg-purple-500",
    indigo: "bg-indigo-500",
    yellow: "bg-yellow-300",
    teal: "bg-teal-500",
    none: ""
  };
  const sizes = {
    xs: "w-2 h-2",
    sm: "w-2.5 h-2.5",
    md: "w-3 h-3",
    lg: "w-3.5 h-3.5",
    xl: "w-6 h-6"
  };
  const placements = {
    // top
    "top-left": "top-0 start-0",
    "top-center": "top-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "top-right": "top-0 end-0",
    // center
    "center-left": "top-1/2 -translate-y-1/2 start-0",
    center: "top-1/2 -translate-y-1/2 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "center-right": "top-1/2 -translate-y-1/2 end-0",
    // bottom
    "bottom-left": "bottom-0 start-0",
    "bottom-center": "bottom-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2 rtl:translate-x-1/2",
    "bottom-right": "bottom-0 end-0"
  };
  const offsets = {
    // top
    "top-left": "-translate-x-1/3 rtl:translate-x-1/3 -translate-y-1/3",
    "top-center": "-translate-y-1/3",
    "top-right": "translate-x-1/3 rtl:-translate-x-1/3 -translate-y-1/3",
    // center
    "center-left": "-translate-x-1/3 rtl:translate-x-1/3",
    center: "",
    "center-right": "translate-x-1/3 rtl:-translate-x-1/3",
    // bottom
    "bottom-left": "-translate-x-1/3 rtl:translate-x-1/3 translate-y-1/3",
    "bottom-center": "translate-y-1/3",
    "bottom-right": "translate-x-1/3 rtl:-translate-x-1/3 translate-y-1/3"
  };
  let dotClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(rounded()), deep_read_state(border()), deep_read_state(size()), deep_read_state(color()), deep_read_state(placement()), deep_read_state(offset2()), deep_read_state($$sanitized_props)),
    () => {
      set(dotClass, twMerge("flex-shrink-0", rounded() ? "rounded" : "rounded-full", border() && "border-2 border-white dark:border-gray-800", sizes[size()], colors[color()], $$slots.default && "inline-flex items-center justify-center", placement() && "absolute " + placements[placement()], placement() && offset2() && offsets[placement()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root2();
  attribute_effect(div, () => ({ ...$$restProps, class: get(dotClass) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Indicator = hmr(Indicator, () => Indicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indicator[HMR].source;
    set(Indicator[HMR].source, module.default[HMR].original);
  });
}
var Indicator_default = Indicator;

// node_modules/flowbite-svelte/dist/avatar/Avatar.svelte
Avatar[FILENAME] = "node_modules/flowbite-svelte/dist/avatar/Avatar.svelte";
var root_34 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[27, 6]]);
var root_52 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path></svg>`), Avatar[FILENAME], [[31, 8, [[32, 10]]]]);
var root_22 = add_locations(from_html(`<!> <!>`, 1), Avatar[FILENAME], []);
var root_7 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[41, 2]]);
function Avatar($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "src",
    "href",
    "rounded",
    "border",
    "stacked",
    "dot",
    "alt",
    "size"
  ]);
  push($$props, false, Avatar);
  let src = prop($$props, "src", 8, "");
  let href = prop($$props, "href", 24, () => void 0);
  let rounded = prop($$props, "rounded", 8, false);
  let border = prop($$props, "border", 8, false);
  let stacked = prop($$props, "stacked", 8, false);
  let dot = prop($$props, "dot", 28, () => void 0);
  let alt = prop($$props, "alt", 8, "");
  let size = prop($$props, "size", 8, "md");
  const sizes = {
    xs: "w-6 h-6",
    sm: "w-8 h-8",
    md: "w-10 h-10",
    lg: "w-20 h-20",
    xl: "w-36 h-36",
    none: ""
  };
  let avatarClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(dot()), () => {
    dot(dot() && { placement: "top-right", color: "gray", size: "lg", ...dot() });
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(rounded()), deep_read_state(border()), deep_read_state(size()), deep_read_state(stacked()), deep_read_state($$sanitized_props)),
    () => {
      set(avatarClass, twMerge(rounded() ? "rounded" : "rounded-full", border() && "p-1 ring-2 ring-gray-300 dark:ring-gray-500", sizes[size()], stacked() && "border-2 -ms-4 border-white dark:border-gray-800", "bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300 object-cover", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        validate_void_dynamic_element(() => href() ? "a" : "div");
        validate_dynamic_element_tag(() => href() ? "a" : "div");
        element(
          node_1,
          () => href() ? "a" : "div",
          false,
          ($$element, $$anchor3) => {
            attribute_effect($$element, () => ({
              href: href(),
              ...$$restProps,
              class: `relative flex justify-center items-center ${get(avatarClass) ?? ""}`
            }));
            var fragment_2 = root_22();
            var node_2 = first_child(fragment_2);
            {
              var consequent = ($$anchor4) => {
                var img = root_34();
                template_effect(() => {
                  set_attribute(img, "alt", alt());
                  set_attribute(img, "src", src());
                  set_class(img, 1, clsx(rounded() ? "rounded" : "rounded-full"));
                });
                append($$anchor4, img);
              };
              var alternate = ($$anchor4) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                slot(node_3, $$props, "default", {}, ($$anchor5) => {
                  var svg = root_52();
                  template_effect(() => set_class(svg, 0, `w-full h-full ${rounded() ? "rounded" : "rounded-full"}`));
                  append($$anchor5, svg);
                });
                append($$anchor4, fragment_3);
              };
              add_svelte_meta(
                () => if_block(node_2, ($$render) => {
                  if (src()) $$render(consequent);
                  else $$render(alternate, false);
                }),
                "if",
                Avatar,
                26,
                4
              );
            }
            var node_4 = sibling(node_2, 2);
            {
              var consequent_1 = ($$anchor4) => {
                var fragment_4 = comment();
                var node_5 = first_child(fragment_4);
                add_svelte_meta(
                  () => Indicator_default(node_5, spread_props(
                    {
                      border: true,
                      get offset() {
                        return rounded();
                      }
                    },
                    dot
                  )),
                  "component",
                  Avatar,
                  37,
                  6,
                  { componentTag: "Indicator" }
                );
                append($$anchor4, fragment_4);
              };
              add_svelte_meta(
                () => if_block(node_4, ($$render) => {
                  if (dot()) $$render(consequent_1);
                }),
                "if",
                Avatar,
                36,
                4
              );
            }
            append($$anchor3, fragment_2);
          },
          void 0,
          [25, 2]
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_1 = ($$anchor2) => {
      var img_1 = root_7();
      attribute_effect(img_1, () => ({
        alt: alt(),
        src: src(),
        ...$$restProps,
        class: get(avatarClass)
      }));
      replay_events(img_1);
      append($$anchor2, img_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state(src()), deep_read_state(href()), deep_read_state(dot()), untrack(() => !src() || !!href() || $$slots.default || dot())) $$render(consequent_2);
        else $$render(alternate_1, false);
      }),
      "if",
      Avatar,
      24,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Avatar = hmr(Avatar, () => Avatar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Avatar[HMR].source;
    set(Avatar[HMR].source, module.default[HMR].original);
  });
}
var Avatar_default = Avatar;

// node_modules/flowbite-svelte/dist/badge/Badge.svelte
Badge[FILENAME] = "node_modules/flowbite-svelte/dist/badge/Badge.svelte";
var root_23 = add_locations(from_html(`<a><!></a>`), Badge[FILENAME], [[62, 6]]);
var root_15 = add_locations(from_html(`<div><!> <!></div>`), Badge[FILENAME], [[60, 2]]);
function Badge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "large",
    "dismissable",
    "border",
    "href",
    "rounded",
    "transition",
    "params"
  ]);
  push($$props, false, Badge);
  const dispatcher = createEventDispatcher();
  let color = prop($$props, "color", 8, "primary");
  let large = prop($$props, "large", 8, false);
  let dismissable = prop($$props, "dismissable", 8, false);
  let border = prop($$props, "border", 8, false);
  let href = prop($$props, "href", 8, "");
  let rounded = prop($$props, "rounded", 8, false);
  let transition2 = prop($$props, "transition", 8, fade);
  let params = prop($$props, "params", 24, () => ({}));
  let badgeStatus = mutable_source(true);
  const colors = {
    primary: "bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300",
    dark: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
    blue: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
    red: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
    green: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
    yellow: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
    indigo: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300",
    purple: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
    pink: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300",
    none: ""
  };
  const borderedColors = {
    primary: "bg-primary-100 text-primary-800 dark:bg-gray-700 dark:text-primary-400 border-primary-400 dark:border-primary-400",
    dark: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-400 border-gray-400 dark:border-gray-400",
    blue: "bg-blue-100 text-blue-800 dark:bg-gray-700 dark:text-blue-400 border-blue-400 dark:border-blue-400",
    red: "bg-red-100 text-red-800 dark:bg-gray-700 dark:text-red-400 border-red-400 dark:border-red-400",
    green: "bg-green-100 text-green-800 dark:bg-gray-700 dark:text-green-400 border-green-400 dark:border-green-400",
    yellow: "bg-yellow-100 text-yellow-800 dark:bg-gray-700 dark:text-yellow-300 border-yellow-300 dark:border-yellow-300",
    indigo: "bg-indigo-100 text-indigo-800 dark:bg-gray-700 dark:text-indigo-400 border-indigo-400 dark:border-indigo-400",
    purple: "bg-purple-100 text-purple-800 dark:bg-gray-700 dark:text-purple-400 border-purple-400 dark:border-purple-400",
    pink: "bg-pink-100 text-pink-800 dark:bg-gray-700 dark:text-pink-400 border-pink-400 dark:border-pink-400",
    none: ""
  };
  const hoverColors = {
    primary: "hover:bg-primary-200",
    dark: "hover:bg-gray-200",
    blue: "hover:bg-blue-200",
    red: "hover:bg-red-200",
    green: "hover:bg-green-200",
    yellow: "hover:bg-yellow-200",
    indigo: "hover:bg-indigo-200",
    purple: "hover:bg-purple-200",
    pink: "hover:bg-pink-200",
    none: ""
  };
  const close = () => {
    set(badgeStatus, false);
  };
  const baseClass = "font-medium inline-flex items-center justify-center px-2.5 py-0.5";
  let badgeClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(large()), deep_read_state(border()), deep_read_state(color()), deep_read_state(href()), deep_read_state(rounded()), deep_read_state($$restProps)),
    () => {
      set(badgeClass, twMerge(baseClass, large() ? "text-sm" : "text-xs", border() ? `border ${borderedColors[color()]}` : colors[color()], href() && hoverColors[color()], rounded() ? "rounded-full" : "rounded", $$restProps.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_15();
      attribute_effect(div, () => ({ ...$$restProps, class: get(badgeClass) }));
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var a = root_23();
          var node_2 = child(a);
          slot(node_2, $$props, "default", {}, null);
          reset(a);
          template_effect(() => set_attribute(a, "href", href()));
          append($$anchor3, a);
        };
        var alternate = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          slot(node_3, $$props, "default", {}, null);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (href()) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Badge,
          61,
          4
        );
      }
      var node_4 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          slot(node_5, $$props, "close-button", { close }, ($$anchor4) => {
            var fragment_3 = comment();
            var node_6 = first_child(fragment_3);
            {
              let $0 = derived_safe_equal(() => large() ? "sm" : "xs");
              add_svelte_meta(
                () => CloseButton_default(node_6, {
                  divclass: "ms-1.5 -me-1.5",
                  get color() {
                    return color();
                  },
                  get size() {
                    return get($0);
                  },
                  ariaLabel: "Remove badge",
                  $$events: {
                    click: () => {
                      set(badgeStatus, false);
                      dispatcher("close");
                    }
                  }
                }),
                "component",
                Badge,
                70,
                8,
                { componentTag: "CloseButton" }
              );
            }
            append($$anchor4, fragment_3);
          });
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (dismissable()) $$render(consequent_1);
          }),
          "if",
          Badge,
          68,
          4
        );
      }
      reset(div);
      transition(3, div, transition2, params);
      event("close", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(badgeStatus)) $$render(consequent_2);
      }),
      "if",
      Badge,
      59,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Badge = hmr(Badge, () => Badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge[HMR].source;
    set(Badge[HMR].source, module.default[HMR].original);
  });
}
var Badge_default = Badge;

// node_modules/flowbite-svelte/dist/banner/Banner.svelte
Banner[FILENAME] = "node_modules/flowbite-svelte/dist/banner/Banner.svelte";
var root_24 = add_locations(from_html(`<div class="flex items-center"><!></div>`), Banner[FILENAME], [[42, 6]]);
var root_16 = add_locations(from_html(`<div><!> <div><!></div> <!></div>`), Banner[FILENAME], [[35, 2, [[38, 4]]]]);
function Banner($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "position",
    "dismissable",
    "bannerType",
    "divClass",
    "innerClass",
    "bannerStatus",
    "transition",
    "params"
  ]);
  push($$props, false, Banner);
  const div2Class = mutable_source();
  let position = prop($$props, "position", 8, "sticky");
  let dismissable = prop($$props, "dismissable", 8, true);
  let bannerType = prop($$props, "bannerType", 8, "default");
  let divClass = prop($$props, "divClass", 12, "z-10 flex justify-between p-4 dark:bg-gray-700 dark:border-gray-600");
  let innerClass = prop($$props, "innerClass", 8, "flex");
  let bannerStatus = prop($$props, "bannerStatus", 12, true);
  let transition2 = prop($$props, "transition", 8, fade);
  let params = prop($$props, "params", 24, () => ({}));
  const divClasses = {
    default: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50",
    bottom: "bottom-0 start-0 w-full border-t border-gray-200 bg-gray-50",
    cta: "flex-col md:flex-row  w-[calc(100%-2rem)] -translate-x-1/2 rtl:translate-x-1/2 bg-white border border-gray-100 rounded-lg shadow-sm lg:max-w-7xl start-1/2 top-6",
    signup: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50",
    info: "top-0 start-0 flex-col w-full border-b border-gray-200 md:flex-row bg-gray-50"
  };
  const insideDivClasses = {
    default: "items-center mx-auto",
    bottom: "items-center mx-auto",
    cta: "flex-col items-start mb-3 me-4 md:items-center md:flex-row md:mb-0",
    signup: "items-center flex-shrink-0 w-full mx-auto sm:w-auto",
    info: "items-center flex-shrink-0"
  };
  function close(e) {
    e.preventDefault();
    bannerStatus(false);
  }
  legacy_pre_effect(
    () => (deep_read_state(divClass()), twMerge, deep_read_state(position()), deep_read_state(bannerType()), deep_read_state($$sanitized_props)),
    () => {
      divClass(twMerge(position(), divClass(), divClasses[bannerType()], $$sanitized_props.classDiv));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(innerClass()), deep_read_state(bannerType()), deep_read_state($$sanitized_props)),
    () => {
      set(div2Class, twMerge(innerClass(), insideDivClasses[bannerType()], $$sanitized_props.classInner));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_16();
      attribute_effect(div, () => ({ tabindex: "-1", class: divClass(), ...$$restProps }));
      var node_1 = child(div);
      slot(node_1, $$props, "header", {}, null);
      var div_1 = sibling(node_1, 2);
      var node_2 = child(div_1);
      slot(node_2, $$props, "default", {}, null);
      reset(div_1);
      var node_3 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_2 = root_24();
          var node_4 = child(div_2);
          add_svelte_meta(
            () => CloseButton_default(node_4, {
              class: "-mx-1.5 -my-1.5",
              get color() {
                return deep_read_state($$restProps), untrack(() => $$restProps.color);
              },
              $$events: {
                click: [
                  close,
                  function($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  }
                ],
                change($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                keydown($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                keyup($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                focus($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                blur($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                mouseenter($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                },
                mouseleave($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                }
              }
            }),
            "component",
            Banner,
            43,
            8,
            { componentTag: "CloseButton" }
          );
          reset(div_2);
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (dismissable()) $$render(consequent);
          }),
          "if",
          Banner,
          41,
          4
        );
      }
      reset(div);
      template_effect(() => set_class(div_1, 1, clsx(get(div2Class))));
      transition(3, div, transition2, params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (bannerStatus()) $$render(consequent_1);
      }),
      "if",
      Banner,
      34,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Banner = hmr(Banner, () => Banner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banner[HMR].source;
    set(Banner[HMR].source, module.default[HMR].original);
  });
}
var Banner_default = Banner;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte
BottomNav[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte";
var root3 = add_locations(from_html(`<div><!> <div><!></div></div>`), BottomNav[FILENAME], [[45, 0, [[47, 2]]]]);
function BottomNav($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "position",
    "navType",
    "outerClass",
    "innerClass",
    "activeClass"
  ]);
  push($$props, false, BottomNav);
  const outerCls = mutable_source();
  const innerCls = mutable_source();
  let activeUrl = prop($$props, "activeUrl", 8, "");
  let position = prop($$props, "position", 8, "fixed");
  let navType = prop($$props, "navType", 8, "default");
  let outerClass = prop($$props, "outerClass", 8, "w-full z-50 border-gray-200 dark:bg-gray-700 dark:border-gray-600");
  let innerClass = prop($$props, "innerClass", 8, "grid h-full max-w-lg mx-auto");
  let activeClass = prop($$props, "activeClass", 8, "text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900");
  let activeCls = "";
  const activeUrlStore = writable("");
  activeCls = twMerge(activeClass(), $$sanitized_props.classActive);
  setContext("navType", navType());
  setContext("bottomNavType", { activeClass: activeCls });
  setContext("activeUrl", activeUrlStore);
  const outerDivClasses = {
    default: "bottom-0 start-0 h-16 bg-white border-t",
    border: "bottom-0 start-0 h-16 bg-white border-t",
    application: "h-16 max-w-lg -translate-x-1/2 rtl:translate-x-1/2 bg-white border rounded-full bottom-4 start-1/2",
    pagination: "bottom-0 h-16 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2",
    group: "bottom-0 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2",
    card: "bottom-0 start-0 h-16 bg-white border-t",
    meeting: "bottom-0 start-0 grid h-16 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
    video: "bottom-0 start-0 grid h-24 grid-cols-1 px-8 bg-white border-t md:grid-cols-3"
  };
  const innerDivClasses = {
    default: "",
    border: "",
    application: "",
    pagination: "",
    group: "",
    card: "",
    meeting: "flex items-center justify-center mx-auto",
    video: "flex items-center w-full"
  };
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(position()), deep_read_state(outerClass()), deep_read_state(navType()), deep_read_state($$sanitized_props)),
    () => {
      set(outerCls, twMerge(position(), outerClass(), outerDivClasses[navType()], $$sanitized_props.classOuter));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(innerClass()), deep_read_state(navType()), deep_read_state($$sanitized_props)),
    () => {
      set(innerCls, twMerge(innerClass(), innerDivClasses[navType()], $$sanitized_props.classInner));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root3();
  attribute_effect(div, () => ({ ...$$restProps, class: get(outerCls) }));
  var node = child(div);
  slot(node, $$props, "header", {}, null);
  var div_1 = sibling(node, 2);
  var node_1 = child(div_1);
  slot(node_1, $$props, "default", {}, null);
  reset(div_1);
  reset(div);
  template_effect(() => set_class(div_1, 1, clsx(get(innerCls))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNav = hmr(BottomNav, () => BottomNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNav[HMR].source;
    set(BottomNav[HMR].source, module.default[HMR].original);
  });
}
var BottomNav_default = BottomNav;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte
BottomNavItem[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte";
var root_17 = add_locations(from_html(`<!> <span> </span>`, 1), BottomNavItem[FILENAME], [[50, 2]]);
function BottomNavItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnName",
    "appBtnPosition",
    "activeClass",
    "href",
    "exact",
    "spanClass"
  ]);
  push($$props, false, BottomNavItem);
  const active = mutable_source();
  let btnName = prop($$props, "btnName", 8, "");
  let appBtnPosition = prop($$props, "appBtnPosition", 8, "middle");
  let activeClass = prop($$props, "activeClass", 24, () => void 0);
  let href = prop($$props, "href", 8, "");
  let exact = prop($$props, "exact", 8, true);
  let spanClass = prop($$props, "spanClass", 8, "");
  const navType = getContext("navType");
  const context = getContext("bottomNavType") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let navUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value);
  });
  const btnClasses = {
    default: "inline-flex flex-col items-center justify-center px-5 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    border: "inline-flex flex-col items-center justify-center px-5 border-gray-200 border-x text-gray-500 dark:text-gray-400  hover:bg-gray-50 dark:hover:bg-gray-800 group dark:border-gray-600",
    application: "",
    pagination: "inline-flex flex-col items-center justify-center px-5 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    group: "inline-flex flex-col items-center justify-center p-4 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    card: "inline-flex flex-col items-center justify-center px-5 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    meeting: "",
    video: ""
  };
  const spanClasses = {
    default: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    border: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    application: "sr-only",
    pagination: "sr-only",
    group: "sr-only",
    card: "text-sm text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500",
    meeting: "",
    video: ""
  };
  const appBtnClasses = {
    left: "inline-flex flex-col items-center justify-center px-5 rounded-s-full hover:bg-gray-50 dark:hover:bg-gray-800 group",
    middle: "inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
    right: "inline-flex flex-col items-center justify-center px-5 rounded-e-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
  };
  let btnClass = mutable_source();
  let spanCls = mutable_source();
  legacy_pre_effect(
    () => (get(navUrl), deep_read_state(exact()), deep_read_state(href())),
    () => {
      set(active, get(navUrl) && exact() ? strict_equals(href(), get(navUrl)) : get(navUrl) ? get(navUrl).startsWith(href()) : false);
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(appBtnPosition()), get(active), deep_read_state(activeClass()), deep_read_state($$sanitized_props)),
    () => {
      set(btnClass, twMerge(btnClasses[navType], appBtnClasses[appBtnPosition()], get(active) && (activeClass() ?? context.activeClass), $$sanitized_props.btnClass));
    }
  );
  legacy_pre_effect(
    () => (twMerge, get(active), deep_read_state(activeClass()), deep_read_state(spanClass())),
    () => {
      set(spanCls, twMerge(spanClasses[navType], get(active) && (activeClass() ?? context.activeClass), spanClass()));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(() => href() ? "a" : "button");
    validate_dynamic_element_tag(() => href() ? "a" : "button");
    element(
      node,
      () => href() ? "a" : "button",
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({
          "aria-label": btnName(),
          href: href(),
          role: href() ? "link" : "button",
          ...$$restProps,
          class: get(btnClass)
        }));
        event("click", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("change", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keydown", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keyup", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focus", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("blur", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseenter", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseleave", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        var fragment_1 = root_17();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        var span = sibling(node_1, 2);
        var text2 = child(span, true);
        reset(span);
        template_effect(() => {
          set_class(span, 1, clsx(get(spanCls)));
          set_text(text2, btnName());
        });
        append($$anchor2, fragment_1);
      },
      void 0,
      [48, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavItem = hmr(BottomNavItem, () => BottomNavItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavItem[HMR].source;
    set(BottomNavItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavItem_default = BottomNavItem;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte
BottomNavHeader[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte";
var root4 = add_locations(from_html(`<div><div role="group"><!></div></div>`), BottomNavHeader[FILENAME], [[6, 0, [[7, 2]]]]);
function BottomNavHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["outerClass", "innerClass"]);
  push($$props, false, BottomNavHeader);
  let outerClass = prop($$props, "outerClass", 8, "w-full");
  let innerClass = prop($$props, "innerClass", 8, "grid max-w-xs grid-cols-3 gap-1 p-1 mx-auto my-2 bg-gray-100 rounded-lg dark:bg-gray-600");
  var $$exports = { ...legacy_api() };
  init();
  var div = root4();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(outerClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(outerClass(), $$sanitized_props.classOuter)))
  ]);
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props, "default", {}, null);
  reset(div_1);
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(innerClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(innerClass(), $$sanitized_props.classInner))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavHeader = hmr(BottomNavHeader, () => BottomNavHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeader[HMR].source;
    set(BottomNavHeader[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeader_default = BottomNavHeader;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte
BottomNavHeaderItem[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte";
var root5 = add_locations(from_html(`<button> </button>`), BottomNavHeaderItem[FILENAME], [[9, 0]]);
function BottomNavHeaderItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["itemName", "active", "defaultClass", "activeClass"]);
  push($$props, false, BottomNavHeaderItem);
  const btnClass = mutable_source();
  let itemName = prop($$props, "itemName", 8, "");
  let active = prop($$props, "active", 8, false);
  let defaultClass = prop($$props, "defaultClass", 8, "px-5 py-1.5 text-xs font-medium text-gray-900 hover:bg-gray-200 dark:text-white dark:hover:bg-gray-700 rounded-lg");
  let activeClass = prop($$props, "activeClass", 8, "px-5 py-1.5 text-xs font-medium text-white bg-gray-900 dark:bg-gray-300 dark:text-gray-900 rounded-lg");
  legacy_pre_effect(
    () => (deep_read_state(active()), deep_read_state(activeClass()), deep_read_state(defaultClass())),
    () => {
      set(btnClass, active() ? activeClass() : defaultClass());
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var button = root5();
  attribute_effect(button, ($0) => ({ class: $0, ...$$restProps }), [
    () => (deep_read_state(twMerge), get(btnClass), deep_read_state($$sanitized_props), untrack(() => twMerge(get(btnClass), $$sanitized_props.class)))
  ]);
  var text2 = child(button, true);
  reset(button);
  template_effect(() => set_text(text2, itemName()));
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, button);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavHeaderItem = hmr(BottomNavHeaderItem, () => BottomNavHeaderItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeaderItem[HMR].source;
    set(BottomNavHeaderItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeaderItem_default = BottomNavHeaderItem;

// node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte
Breadcrumb[FILENAME] = "node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte";
var root6 = add_locations(from_html(`<nav><ol><!></ol></nav>`), Breadcrumb[FILENAME], [[10, 0, [[11, 2]]]]);
function Breadcrumb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["solid", "navClass", "solidClass", "olClass", "ariaLabel"]);
  push($$props, false, Breadcrumb);
  let solid = prop($$props, "solid", 8, false);
  let navClass = prop($$props, "navClass", 8, "flex");
  let solidClass = prop($$props, "solidClass", 8, "flex px-5 py-3 text-gray-700 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700");
  let olClass = prop($$props, "olClass", 8, "inline-flex items-center space-x-1 rtl:space-x-reverse md:space-x-3 rtl:space-x-reverse");
  let ariaLabel = prop($$props, "ariaLabel", 8, "Breadcrumb");
  let classNav = solid() ? solidClass() : navClass();
  var $$exports = { ...legacy_api() };
  init();
  var nav = root6();
  attribute_effect(nav, ($0) => ({ "aria-label": ariaLabel(), ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge(classNav, $$sanitized_props.class)))
  ]);
  var ol = child(nav);
  var node = child(ol);
  slot(node, $$props, "default", {}, null);
  reset(ol);
  reset(nav);
  template_effect(($0) => set_class(ol, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(olClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(olClass(), $$sanitized_props.classOl))))
  ]);
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Breadcrumb = hmr(Breadcrumb, () => Breadcrumb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Breadcrumb[HMR].source;
    set(Breadcrumb[HMR].source, module.default[HMR].original);
  });
}
var Breadcrumb_default = Breadcrumb;

// node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte
BreadcrumbItem[FILENAME] = "node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte";
var root_35 = add_locations(from_svg(`<svg class="w-4 h-4 me-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>`), BreadcrumbItem[FILENAME], [[15, 8, [[16, 10]]]]);
var root_18 = add_locations(from_html(`<a><!> <!></a>`), BreadcrumbItem[FILENAME], [[11, 4]]);
var root_62 = add_locations(from_svg(`<svg class="w-6 h-6 text-gray-400 rtl:-scale-x-100" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>`), BreadcrumbItem[FILENAME], [[25, 6, [[26, 8]]]]);
var root_72 = add_locations(from_html(`<a><!></a>`), BreadcrumbItem[FILENAME], [[30, 6]]);
var root_8 = add_locations(from_html(`<span><!></span>`), BreadcrumbItem[FILENAME], [[34, 6]]);
var root_42 = add_locations(from_html(`<!> <!>`, 1), BreadcrumbItem[FILENAME], []);
var root7 = add_locations(from_html(`<li><!></li>`), BreadcrumbItem[FILENAME], [[9, 0]]);
function BreadcrumbItem($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["home", "href", "linkClass", "spanClass", "homeClass"]);
  push($$props, false, BreadcrumbItem);
  let home = prop($$props, "home", 8, false);
  let href = prop($$props, "href", 24, () => void 0);
  let linkClass = prop($$props, "linkClass", 8, "ms-1 text-sm font-medium text-gray-700 hover:text-gray-900 md:ms-2 dark:text-gray-400 dark:hover:text-white");
  let spanClass = prop($$props, "spanClass", 8, "ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400");
  let homeClass = prop($$props, "homeClass", 8, "inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white");
  var $$exports = { ...legacy_api() };
  init();
  var li = root7();
  attribute_effect(li, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("inline-flex items-center", $$sanitized_props.class)))
  ]);
  var node = child(li);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_18();
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          slot(node_2, $$props, "icon", {}, null);
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var svg = root_35();
          append($$anchor3, svg);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (untrack(() => $$slots.icon)) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          BreadcrumbItem,
          12,
          6
        );
      }
      var node_3 = sibling(node_1, 2);
      slot(node_3, $$props, "default", {}, null);
      reset(a);
      template_effect(
        ($0) => {
          set_class(a, 1, $0);
          set_attribute(a, "href", href());
        },
        [
          () => clsx((deep_read_state(twMerge), deep_read_state(homeClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(homeClass(), $$sanitized_props.classHome))))
        ]
      );
      append($$anchor2, a);
    };
    var alternate_3 = ($$anchor2) => {
      var fragment_1 = root_42();
      var node_4 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          slot(node_5, $$props, "icon", {}, null);
          append($$anchor3, fragment_2);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_1 = root_62();
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (untrack(() => $$slots.icon)) $$render(consequent_2);
            else $$render(alternate_1, false);
          }),
          "if",
          BreadcrumbItem,
          22,
          4
        );
      }
      var node_6 = sibling(node_4, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a_1 = root_72();
          var node_7 = child(a_1);
          slot(node_7, $$props, "default", {}, null);
          reset(a_1);
          template_effect(
            ($0) => {
              set_class(a_1, 1, $0);
              set_attribute(a_1, "href", href());
            },
            [
              () => clsx((deep_read_state(twMerge), deep_read_state(linkClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(linkClass(), $$sanitized_props.classLink))))
            ]
          );
          append($$anchor3, a_1);
        };
        var alternate_2 = ($$anchor3) => {
          var span = root_8();
          var node_8 = child(span);
          slot(node_8, $$props, "default", {}, null);
          reset(span);
          template_effect(($0) => set_class(span, 1, $0), [
            () => clsx((deep_read_state(twMerge), deep_read_state(spanClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(spanClass(), $$sanitized_props.classSpan))))
          ]);
          append($$anchor3, span);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if (href()) $$render(consequent_3);
            else $$render(alternate_2, false);
          }),
          "if",
          BreadcrumbItem,
          29,
          4
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (home()) $$render(consequent_1);
        else $$render(alternate_3, false);
      }),
      "if",
      BreadcrumbItem,
      10,
      2
    );
  }
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  BreadcrumbItem = hmr(BreadcrumbItem, () => BreadcrumbItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BreadcrumbItem[HMR].source;
    set(BreadcrumbItem[HMR].source, module.default[HMR].original);
  });
}
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/flowbite-svelte/dist/buttons/Button.svelte
Button[FILENAME] = "node_modules/flowbite-svelte/dist/buttons/Button.svelte";
var root_19 = add_locations(from_html(`<a><!></a>`), Button[FILENAME], [[107, 2]]);
var root_36 = add_locations(from_html(`<button><!></button>`), Button[FILENAME], [[111, 2]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "pill",
    "outline",
    "size",
    "href",
    "type",
    "color",
    "shadow",
    "tag",
    "checked",
    "disabled"
  ]);
  push($$props, false, Button);
  const group = getContext("group");
  let pill = prop($$props, "pill", 8, false);
  let outline = prop($$props, "outline", 8, false);
  let size = prop($$props, "size", 8, group ? "sm" : "md");
  let href = prop($$props, "href", 24, () => void 0);
  let type = prop($$props, "type", 8, "button");
  let color = prop($$props, "color", 24, () => group ? outline() ? "dark" : "alternative" : "primary");
  let shadow = prop($$props, "shadow", 8, false);
  let tag2 = prop($$props, "tag", 8, "button");
  let checked = prop($$props, "checked", 24, () => void 0);
  let disabled = prop($$props, "disabled", 8, false);
  const colorClasses2 = {
    alternative: "text-gray-900 bg-white border border-gray-200 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-400 hover:text-primary-700 focus-within:text-primary-700 dark:focus-within:text-white dark:hover:text-white dark:hover:bg-gray-700",
    blue: "text-white bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700",
    dark: "text-white bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:hover:bg-gray-700",
    green: "text-white bg-green-700 hover:bg-green-800 dark:bg-green-600 dark:hover:bg-green-700",
    light: "text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600",
    primary: "text-white bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700",
    purple: "text-white bg-purple-700 hover:bg-purple-800 dark:bg-purple-600 dark:hover:bg-purple-700",
    red: "text-white bg-red-700 hover:bg-red-800 dark:bg-red-600 dark:hover:bg-red-700",
    yellow: "text-white bg-yellow-400 hover:bg-yellow-500 ",
    none: ""
  };
  const colorCheckedClasses = {
    alternative: "text-primary-700 border dark:text-primary-500 bg-gray-100 dark:bg-gray-700 border-gray-300 shadow-gray-300 dark:shadow-gray-800 shadow-inner",
    blue: "text-blue-900 bg-blue-400 dark:bg-blue-500 shadow-blue-700 dark:shadow-blue-800 shadow-inner",
    dark: "text-white bg-gray-500 dark:bg-gray-600 shadow-gray-800 dark:shadow-gray-900 shadow-inner",
    green: "text-green-900 bg-green-400 dark:bg-green-500 shadow-green-700 dark:shadow-green-800 shadow-inner",
    light: "text-gray-900 bg-gray-100 border border-gray-300 dark:bg-gray-500 dark:text-gray-900 dark:border-gray-700 shadow-gray-300 dark:shadow-gray-700 shadow-inner",
    primary: "text-primary-900 bg-primary-400 dark:bg-primary-500 shadow-primary-700 dark:shadow-primary-800 shadow-inner",
    purple: "text-purple-900 bg-purple-400 dark:bg-purple-500 shadow-purple-700 dark:shadow-purple-800 shadow-inner",
    red: "text-red-900 bg-red-400 dark:bg-red-500 shadow-red-700 dark:shadow-red-800 shadow-inner",
    yellow: "text-yellow-900 bg-yellow-300 dark:bg-yellow-400 shadow-yellow-500 dark:shadow-yellow-700 shadow-inner",
    none: ""
  };
  const coloredFocusClasses = {
    alternative: "focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
    blue: "focus-within:ring-blue-300 dark:focus-within:ring-blue-800",
    dark: "focus-within:ring-gray-300 dark:focus-within:ring-gray-700",
    green: "focus-within:ring-green-300 dark:focus-within:ring-green-800",
    light: "focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
    primary: "focus-within:ring-primary-300 dark:focus-within:ring-primary-800",
    purple: "focus-within:ring-purple-300 dark:focus-within:ring-purple-900",
    red: "focus-within:ring-red-300 dark:focus-within:ring-red-900",
    yellow: "focus-within:ring-yellow-300 dark:focus-within:ring-yellow-900",
    none: ""
  };
  const coloredShadowClasses = {
    alternative: "shadow-gray-500/50 dark:shadow-gray-800/80",
    blue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    dark: "shadow-gray-500/50 dark:shadow-gray-800/80",
    green: "shadow-green-500/50 dark:shadow-green-800/80",
    light: "shadow-gray-500/50 dark:shadow-gray-800/80",
    primary: "shadow-primary-500/50 dark:shadow-primary-800/80",
    purple: "shadow-purple-500/50 dark:shadow-purple-800/80",
    red: "shadow-red-500/50 dark:shadow-red-800/80 ",
    yellow: "shadow-yellow-500/50 dark:shadow-yellow-800/80 ",
    none: ""
  };
  const outlineClasses = {
    alternative: "text-gray-900 dark:text-gray-400 hover:text-white border border-gray-800 hover:bg-gray-900 focus-within:bg-gray-900 focus-within:text-white focus-within:ring-gray-300 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-600 dark:focus-within:ring-gray-800",
    blue: "text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600",
    dark: "text-gray-900 hover:text-white border border-gray-800 hover:bg-gray-900 focus-within:bg-gray-900 focus-within:text-white dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-600",
    green: "text-green-700 hover:text-white border border-green-700 hover:bg-green-800 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600",
    light: "text-gray-500 hover:text-gray-900 bg-white border border-gray-200 dark:border-gray-600 dark:hover:text-white dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600",
    primary: "text-primary-700 hover:text-white border border-primary-700 hover:bg-primary-700 dark:border-primary-500 dark:text-primary-500 dark:hover:text-white dark:hover:bg-primary-600",
    purple: "text-purple-700 hover:text-white border border-purple-700 hover:bg-purple-800 dark:border-purple-400 dark:text-purple-400 dark:hover:text-white dark:hover:bg-purple-500",
    red: "text-red-700 hover:text-white border border-red-700 hover:bg-red-800 dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600",
    yellow: "text-yellow-400 hover:text-white border border-yellow-400 hover:bg-yellow-500 dark:border-yellow-300 dark:text-yellow-300 dark:hover:text-white dark:hover:bg-yellow-400",
    none: ""
  };
  const sizeClasses = {
    xs: "px-3 py-2 text-xs",
    sm: "px-4 py-2 text-sm",
    md: "px-5 py-2.5 text-sm",
    lg: "px-5 py-3 text-base",
    xl: "px-6 py-3.5 text-base"
  };
  const hasBorder = () => outline() || strict_equals(color(), "alternative") || strict_equals(color(), "light");
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(outline()), deep_read_state(checked()), deep_read_state(color()), deep_read_state(pill()), deep_read_state(shadow()), deep_read_state(disabled()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge(
        "text-center font-medium",
        group ? "focus-within:ring-2" : "focus-within:ring-4",
        group && "focus-within:z-10",
        group || "focus-within:outline-none",
        "inline-flex items-center justify-center " + sizeClasses[size()],
        outline() && checked() && "border dark:border-gray-900",
        outline() && checked() && colorCheckedClasses[color()],
        outline() && !checked() && outlineClasses[color()],
        !outline() && checked() && colorCheckedClasses[color()],
        !outline() && !checked() && colorClasses2[color()],
        strict_equals(color(), "alternative") && (group && !checked() ? "dark:bg-gray-700 dark:text-white dark:border-gray-700 dark:hover:border-gray-600 dark:hover:bg-gray-600" : "dark:bg-transparent dark:border-gray-600 dark:hover:border-gray-600"),
        outline() && strict_equals(color(), "dark") && (group ? checked() ? "bg-gray-900 border-gray-800 dark:border-white dark:bg-gray-600" : "dark:text-white border-gray-800 dark:border-white" : "dark:text-gray-400 dark:border-gray-700"),
        coloredFocusClasses[color()],
        hasBorder() && group && "[&:not(:first-child)]:-ms-px",
        group ? pill() && "first:rounded-s-full last:rounded-e-full" || "first:rounded-s-lg last:rounded-e-lg" : pill() && "rounded-full" || "rounded-lg",
        shadow() && "shadow-lg",
        shadow() && coloredShadowClasses[color()],
        disabled() && "cursor-not-allowed opacity-50",
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_19();
      attribute_effect(a, () => ({
        href: href(),
        ...$$restProps,
        class: get(buttonClass),
        role: "button"
      }));
      var node_1 = child(a);
      slot(node_1, $$props, "default", {}, null);
      reset(a);
      event("click", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("change", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event(
        "touchstart",
        a,
        function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        },
        void 0,
        true
      );
      event("touchend", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("touchcancel", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", a, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var button = root_36();
          attribute_effect(button, () => ({
            type: type(),
            ...$$restProps,
            disabled: disabled(),
            class: get(buttonClass)
          }));
          var node_3 = child(button);
          slot(node_3, $$props, "default", {}, null);
          reset(button);
          event("click", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event(
            "touchstart",
            button,
            function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            void 0,
            true
          );
          event("touchend", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("touchcancel", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, button);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          {
            validate_void_dynamic_element(tag2);
            validate_dynamic_element_tag(tag2);
            element(
              node_4,
              tag2,
              false,
              ($$element, $$anchor4) => {
                attribute_effect($$element, () => ({ ...$$restProps, class: get(buttonClass) }));
                var fragment_3 = comment();
                var node_5 = first_child(fragment_3);
                slot(node_5, $$props, "default", {}, null);
                append($$anchor4, fragment_3);
              },
              void 0,
              [115, 2]
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (strict_equals(tag2(), "button")) $$render(consequent_1);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          Button,
          110,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href() && !disabled()) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      Button,
      106,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var Button_default = Button;

// node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte
GradientButton[FILENAME] = "node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte";
var root_110 = add_locations(from_html(`<div><!></div>`), GradientButton[FILENAME], [[56, 2]]);
function GradientButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "shadow"]);
  push($$props, false, GradientButton);
  const group = getContext("group");
  let color = prop($$props, "color", 8, "blue");
  let shadow = prop($$props, "shadow", 8, false);
  const gradientClasses = {
    blue: "text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-blue-300 dark:focus:ring-blue-800 ",
    green: "text-white bg-gradient-to-r from-green-400 via-green-500 to-green-600 hover:bg-gradient-to-br focus:ring-green-300 dark:focus:ring-green-800",
    cyan: "text-white bg-gradient-to-r from-cyan-400 via-cyan-500 to-cyan-600 hover:bg-gradient-to-br focus:ring-cyan-300 dark:focus:ring-cyan-800",
    teal: "text-white bg-gradient-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-gradient-to-br focus:ring-teal-300 dark:focus:ring-teal-800",
    lime: "text-gray-900 bg-gradient-to-r from-lime-200 via-lime-400 to-lime-500 hover:bg-gradient-to-br focus:ring-lime-300 dark:focus:ring-lime-800",
    red: "text-white bg-gradient-to-r from-red-400 via-red-500 to-red-600 hover:bg-gradient-to-br focus:ring-red-300 dark:focus:ring-red-800",
    pink: "text-white bg-gradient-to-r from-pink-400 via-pink-500 to-pink-600 hover:bg-gradient-to-br focus:ring-pink-300 dark:focus:ring-pink-800",
    purple: "text-white bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-purple-300 dark:focus:ring-purple-800",
    purpleToBlue: "text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-blue-300 dark:focus:ring-blue-800",
    cyanToBlue: "text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-cyan-300 dark:focus:ring-cyan-800",
    greenToBlue: "text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl focus:ring-green-200 dark:focus:ring-green-800",
    purpleToPink: "text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l focus:ring-purple-200 dark:focus:ring-purple-800",
    pinkToOrange: "text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-pink-200 dark:focus:ring-pink-800",
    tealToLime: "text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l focus:ring-lime-200 dark:focus:ring-teal-700",
    redToYellow: "text-gray-900 bg-gradient-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-gradient-to-bl focus:ring-red-100 dark:focus:ring-red-400"
  };
  const coloredShadowClasses = {
    blue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    green: "shadow-green-500/50 dark:shadow-green-800/80",
    cyan: "shadow-cyan-500/50 dark:shadow-cyan-800/80",
    teal: "shadow-teal-500/50 dark:shadow-teal-800/80 ",
    lime: "shadow-lime-500/50 dark:shadow-lime-800/80",
    red: "shadow-red-500/50 dark:shadow-red-800/80 ",
    pink: "shadow-pink-500/50 dark:shadow-pink-800/80",
    purple: "shadow-purple-500/50 dark:shadow-purple-800/80",
    purpleToBlue: "shadow-blue-500/50 dark:shadow-blue-800/80",
    cyanToBlue: "shadow-cyan-500/50 dark:shadow-cyan-800/80",
    greenToBlue: "shadow-green-500/50 dark:shadow-green-800/80",
    purpleToPink: "shadow-purple-500/50 dark:shadow-purple-800/80",
    pinkToOrange: "shadow-pink-500/50 dark:shadow-pink-800/80",
    tealToLime: "shadow-lime-500/50 dark:shadow-teal-800/80",
    redToYellow: "shadow-red-500/50 dark:shadow-red-800/80"
  };
  let gradientOutlineClass = mutable_source();
  let divClass = mutable_source();
  legacy_pre_effect(() => (twMerge, deep_read_state($$sanitized_props)), () => {
    set(gradientOutlineClass, twMerge("inline-flex items-center justify-center w-full  !border-0", $$sanitized_props.pill || "!rounded-md", "bg-white !text-gray-900 dark:bg-gray-900 dark:!text-white", "hover:bg-transparent hover:!text-inherit", "transition-all duration-75 ease-in group-hover:!bg-opacity-0 group-hover:!text-inherit"));
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state($$sanitized_props), deep_read_state(color()), deep_read_state(shadow())),
    () => {
      set(divClass, twMerge(
        $$sanitized_props.outline && "p-0.5",
        gradientClasses[color()],
        shadow() && "shadow-lg",
        shadow() && coloredShadowClasses[color()],
        group ? $$sanitized_props.pill && "first:rounded-s-full last:rounded-e-full" || "first:rounded-s-lg last:rounded-e-lg" : $$sanitized_props.pill && "rounded-full" || "rounded-lg",
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_110();
      var node_1 = child(div);
      add_svelte_meta(
        () => Button_default(node_1, spread_props(() => $$restProps, {
          color: "none",
          get class() {
            return get(gradientOutlineClass);
          },
          $$events: {
            click($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            change($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keydown($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keyup($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseenter($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseleave($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            slot(node_2, $$props, "default", {}, null);
            append($$anchor3, fragment_1);
          }),
          $$slots: { default: true }
        })),
        "component",
        GradientButton,
        60,
        4,
        { componentTag: "Button" }
      );
      reset(div);
      template_effect(() => set_class(div, 1, clsx(get(divClass))));
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      add_svelte_meta(
        () => Button_default(node_3, spread_props(() => $$restProps, {
          color: "none",
          get class() {
            return get(divClass);
          },
          $$events: {
            click($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            change($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keydown($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keyup($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            touchstart($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            touchend($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            touchcancel($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseenter($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseleave($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
            var fragment_3 = comment();
            var node_4 = first_child(fragment_3);
            slot(node_4, $$props, "default", {}, null);
            append($$anchor3, fragment_3);
          }),
          $$slots: { default: true }
        })),
        "component",
        GradientButton,
        63,
        2,
        { componentTag: "Button" }
      );
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.outline)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      GradientButton,
      55,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  GradientButton = hmr(GradientButton, () => GradientButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GradientButton[HMR].source;
    set(GradientButton[HMR].source, module.default[HMR].original);
  });
}
var GradientButton_default = GradientButton;

// node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte
ButtonGroup[FILENAME] = "node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte";
var root8 = add_locations(from_html(`<div><!></div>`), ButtonGroup[FILENAME], [[8, 0]]);
function ButtonGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "divClass"]);
  push($$props, false, ButtonGroup);
  let size = prop($$props, "size", 8, "md");
  let divClass = prop($$props, "divClass", 8, "inline-flex rounded-lg shadow-sm");
  setContext("group", { size: size() });
  var $$exports = { ...legacy_api() };
  init();
  var div = root8();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0, role: "group" }), [
    () => (deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class)))
  ]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonGroup = hmr(ButtonGroup, () => ButtonGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonGroup[HMR].source;
    set(ButtonGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonGroup_default = ButtonGroup;

// node_modules/flowbite-svelte/dist/cards/Card.svelte
Card[FILENAME] = "node_modules/flowbite-svelte/dist/cards/Card.svelte";
var root_25 = add_locations(from_html(`<img alt=""/> <div><!></div>`, 1), Card[FILENAME], [[36, 4], [37, 4]]);
function Card($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "href",
    "horizontal",
    "reverse",
    "img",
    "padding",
    "size",
    "imgClass"
  ]);
  push($$props, false, Card);
  let href = prop($$props, "href", 24, () => void 0);
  let horizontal = prop($$props, "horizontal", 8, false);
  let reverse = prop($$props, "reverse", 8, false);
  let img = prop($$props, "img", 24, () => void 0);
  let padding = prop($$props, "padding", 8, "lg");
  let size = prop($$props, "size", 8, "sm");
  let imgClass = prop($$props, "imgClass", 8, "");
  const paddings = {
    none: "",
    xs: "p-2",
    sm: "p-4",
    md: "p-4 sm:p-5",
    lg: "p-4 sm:p-6",
    xl: "p-4 sm:p-8"
  };
  const sizes = {
    none: "",
    xs: "max-w-xs",
    sm: "max-w-sm",
    md: "max-w-xl",
    lg: "max-w-2xl",
    xl: "max-w-screen-xl"
  };
  let innerPadding = mutable_source();
  let cardClass = mutable_source();
  let imgCls = mutable_source();
  legacy_pre_effect(() => deep_read_state(padding()), () => {
    set(innerPadding, paddings[padding()]);
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(reverse()), deep_read_state(horizontal()), deep_read_state(href()), deep_read_state(img()), get(innerPadding), deep_read_state($$sanitized_props)),
    () => {
      set(cardClass, twMerge("flex w-full", sizes[size()], reverse() ? "flex-col-reverse" : "flex-col", horizontal() && (reverse() ? "md:flex-row-reverse" : "md:flex-row"), href() && "hover:bg-gray-100 dark:hover:bg-gray-700", !img() && get(innerPadding), $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(reverse()), deep_read_state(horizontal()), deep_read_state(imgClass())),
    () => {
      set(imgCls, twMerge(reverse() ? "rounded-b-lg" : "rounded-t-lg", horizontal() && "object-cover w-full h-96 md:h-auto md:w-48 md:rounded-none", horizontal() && (reverse() ? "md:rounded-e-lg" : "md:rounded-s-lg"), imgClass()));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => href() ? "a" : "div");
    add_svelte_meta(
      () => Frame_default(node, spread_props(
        {
          get tag() {
            return get($0);
          },
          rounded: true,
          shadow: true,
          border: true,
          get href() {
            return href();
          }
        },
        () => $$restProps,
        {
          get class() {
            return get(cardClass);
          },
          $$events: {
            click($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            focusin($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            focusout($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseenter($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseleave($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(Card, ($$anchor2, $$slotProps) => {
            var fragment_1 = comment();
            var node_1 = first_child(fragment_1);
            {
              var consequent = ($$anchor3) => {
                var fragment_2 = root_25();
                var img_1 = first_child(fragment_2);
                var div = sibling(img_1, 2);
                var node_2 = child(div);
                slot(node_2, $$props, "default", {}, null);
                reset(div);
                template_effect(() => {
                  set_class(img_1, 1, clsx(get(imgCls)));
                  set_attribute(img_1, "src", img());
                  set_class(div, 1, clsx(get(innerPadding)));
                });
                append($$anchor3, fragment_2);
              };
              var alternate = ($$anchor3) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                slot(node_3, $$props, "default", {}, null);
                append($$anchor3, fragment_3);
              };
              add_svelte_meta(
                () => if_block(node_1, ($$render) => {
                  if (img()) $$render(consequent);
                  else $$render(alternate, false);
                }),
                "if",
                Card,
                35,
                2
              );
            }
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      Card,
      34,
      0,
      { componentTag: "Frame" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Card = hmr(Card, () => Card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Card[HMR].source;
    set(Card[HMR].source, module.default[HMR].original);
  });
}
var Card_default = Card;

// node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte
ControlButton[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte";
var root_26 = add_locations(from_svg(`<svg aria-hidden="true" class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>`), ControlButton[FILENAME], [[12, 8, [[13, 10]]]]);
var root_37 = add_locations(from_svg(`<svg aria-hidden="true" class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>`), ControlButton[FILENAME], [[16, 8, [[17, 10]]]]);
var root_111 = add_locations(from_html(`<span class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"><!> <span class="sr-only"> </span></span>`), ControlButton[FILENAME], [[10, 4, [[20, 6]]]]);
var root9 = add_locations(from_html(`<button type="button"><!></button>`), ControlButton[FILENAME], [[8, 0]]);
function ControlButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ControlButton);
  let forward = prop($$props, "forward", 8);
  let name = prop($$props, "name", 8);
  let buttonCls = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(forward()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonCls, twMerge("flex absolute top-0 z-30 justify-center items-center px-4 h-full group focus:outline-none text-white dark:text-gray-300", forward() ? "end-0" : "start-0", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var button = root9();
  var node = child(button);
  slot(node, $$props, "default", {}, ($$anchor2) => {
    var span = root_111();
    var node_1 = child(span);
    {
      var consequent = ($$anchor3) => {
        var svg = root_26();
        append($$anchor3, svg);
      };
      var alternate = ($$anchor3) => {
        var svg_1 = root_37();
        append($$anchor3, svg_1);
      };
      add_svelte_meta(
        () => if_block(node_1, ($$render) => {
          if (forward()) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        ControlButton,
        11,
        6
      );
    }
    var span_1 = sibling(node_1, 2);
    var text2 = child(span_1, true);
    reset(span_1);
    reset(span);
    template_effect(() => set_text(text2, name()));
    append($$anchor2, span);
  });
  reset(button);
  template_effect(() => set_class(button, 1, clsx(get(buttonCls))));
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, button);
  return pop($$exports);
}
if (import.meta.hot) {
  ControlButton = hmr(ControlButton, () => ControlButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ControlButton[HMR].source;
    set(ControlButton[HMR].source, module.default[HMR].original);
  });
}
var ControlButton_default = ControlButton;

// node_modules/flowbite-svelte/dist/carousel/CarouselSlide.js
var canChangeSlide = ({ lastSlideChange, slideDuration, slideDurationRatio = 1 }) => {
  if (lastSlideChange && (/* @__PURE__ */ new Date()).getTime() - lastSlideChange.getTime() < slideDuration * slideDurationRatio) {
    console.warn("Can't change slide yet, too soon");
    return false;
  }
  return true;
};

// node_modules/flowbite-svelte/dist/carousel/Controls.svelte
Controls[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Controls.svelte";
var root_112 = add_locations(from_html(`<!> <!>`, 1), Controls[FILENAME], []);
function Controls($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Controls);
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const state = getContext("state");
  const { update } = state;
  function changeSlide(forward) {
    if (!canChangeSlide({
      lastSlideChange: $state().lastSlideChange,
      slideDuration: $state().slideDuration,
      slideDurationRatio: 0.75
    })) {
      return;
    }
    if (forward) {
      update((_state) => {
        _state.forward = true;
        _state.index = _state.index >= _state.images.length - 1 ? 0 : _state.index + 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    } else {
      update((_state) => {
        _state.forward = false;
        _state.index = _state.index <= 0 ? _state.images.length - 1 : _state.index - 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    }
  }
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  slot(
    node,
    $$props,
    "default",
    {
      get ControlButton() {
        return ControlButton_default;
      },
      changeSlide
    },
    ($$anchor2) => {
      var fragment_1 = root_112();
      var node_1 = first_child(fragment_1);
      {
        let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge($$sanitized_props.class))));
        add_svelte_meta(
          () => ControlButton_default(node_1, {
            name: "Previous",
            forward: false,
            get class() {
              return get($0);
            },
            $$events: { click: () => changeSlide(false) }
          }),
          "component",
          Controls,
          35,
          2,
          { componentTag: "ControlButton" }
        );
      }
      var node_2 = sibling(node_1, 2);
      {
        let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge($$sanitized_props.class))));
        add_svelte_meta(
          () => ControlButton_default(node_2, {
            name: "Next",
            forward: true,
            get class() {
              return get($0);
            },
            $$events: { click: () => changeSlide(true) }
          }),
          "component",
          Controls,
          36,
          2,
          { componentTag: "ControlButton" }
        );
      }
      append($$anchor2, fragment_1);
    }
  );
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Controls = hmr(Controls, () => Controls[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Controls[HMR].source;
    set(Controls[HMR].source, module.default[HMR].original);
  });
}
var Controls_default = Controls;

// node_modules/flowbite-svelte/dist/carousel/Indicators.svelte
Indicators[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Indicators.svelte";
var root_113 = add_locations(from_html(`<button><!></button>`), Indicators[FILENAME], [[12, 4]]);
var root10 = add_locations(from_html(`<div></div>`), Indicators[FILENAME], [[9, 0]]);
function Indicators($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Indicators);
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let activeClass = prop($$props, "activeClass", 8, "opacity-100");
  let inactiveClass = prop($$props, "inactiveClass", 8, "opacity-60");
  const state = getContext("state");
  var $$exports = { ...legacy_api() };
  init();
  var div = root10();
  add_svelte_meta(
    () => each(div, 5, () => ($state(), untrack(() => $state().images)), index, ($$anchor2, _, idx) => {
      const selected = tag(
        derived_safe_equal(() => ($state(), idx, untrack(() => strict_equals($state().index, idx)))),
        "selected"
      );
      get(selected);
      var button = root_113();
      var node = child(button);
      slot(
        node,
        $$props,
        "default",
        {
          get Indicator() {
            return Indicator_default;
          },
          get selected() {
            return get(selected);
          },
          index: idx
        },
        ($$anchor3) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          {
            let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state(get(selected)), deep_read_state(activeClass()), deep_read_state(inactiveClass()), untrack(() => twMerge("bg-gray-100 hover:bg-gray-300", get(selected) ? activeClass() : inactiveClass()))));
            add_svelte_meta(
              () => Indicator_default(node_1, {
                get class() {
                  return get($0);
                }
              }),
              "component",
              Indicators,
              14,
              8,
              { componentTag: "Indicator" }
            );
          }
          append($$anchor3, fragment);
        }
      );
      reset(button);
      event("click", button, () => store_mutate(state, untrack($state).index = idx, untrack($state)));
      append($$anchor2, button);
    }),
    "each",
    Indicators,
    10,
    2
  );
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("flex absolute bottom-5 start-1/2 z-30 space-x-3 rtl:space-x-reverse -translate-x-1/2 rtl:translate-x-1/2", $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Indicators = hmr(Indicators, () => Indicators[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indicators[HMR].source;
    set(Indicators[HMR].source, module.default[HMR].original);
  });
}
var Indicators_default = Indicators;

// node_modules/flowbite-svelte/dist/carousel/Slide.svelte
Slide[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Slide.svelte";
var root_27 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[26, 4]]);
var root_43 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[30, 4]]);
function Slide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["image", "transition"]);
  push($$props, false, Slide);
  const $state = () => (validate_store(state, "state"), store_get(state, "$state", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const transitionSlideIn = mutable_source();
  const transitionSlideOut = mutable_source();
  const imgClass = mutable_source();
  const state = getContext("state");
  let image = prop($$props, "image", 8);
  let transition2 = prop($$props, "transition", 8, null);
  legacy_pre_effect(() => $state(), () => {
    set(transitionSlideIn, {
      x: $state().forward ? "100%" : "-100%",
      opacity: 1,
      width: "100%",
      height: "100%",
      duration: $state().slideDuration
    });
  });
  legacy_pre_effect(() => $state(), () => {
    set(transitionSlideOut, {
      x: $state().forward ? "-100%" : "100%",
      opacity: 0.9,
      width: "100%",
      height: "100%",
      duration: $state().slideDuration
    });
  });
  legacy_pre_effect(() => (twMerge, deep_read_state($$sanitized_props)), () => {
    set(imgClass, twMerge("absolute block !w-full h-full object-cover", $$sanitized_props.class));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => key(node_1, image, ($$anchor3) => {
          var img = root_27();
          attribute_effect(img, () => ({
            alt: "...",
            ...image(),
            ...$$restProps,
            class: get(imgClass)
          }));
          replay_events(img);
          transition(3, img, transition2, () => ({}));
          append($$anchor3, img);
        }),
        "key",
        Slide,
        25,
        2
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_2 = first_child(fragment_2);
      add_svelte_meta(
        () => key(node_2, image, ($$anchor3) => {
          var img_1 = root_43();
          attribute_effect(img_1, () => ({
            alt: "...",
            ...image(),
            ...$$restProps,
            class: get(imgClass)
          }));
          replay_events(img_1);
          transition(2, img_1, () => fly, () => get(transitionSlideOut));
          transition(1, img_1, () => fly, () => get(transitionSlideIn));
          append($$anchor3, img_1);
        }),
        "key",
        Slide,
        29,
        2
      );
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (transition2()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Slide,
      24,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Slide = hmr(Slide, () => Slide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slide[HMR].source;
    set(Slide[HMR].source, module.default[HMR].original);
  });
}
var Slide_default = Slide;

// node_modules/flowbite-svelte/dist/carousel/Carousel.svelte
Carousel[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Carousel.svelte";
var root_38 = add_locations(from_html(`<link rel="preload" as="image"/>`), Carousel[FILENAME], [[127, 6]]);
var root11 = add_locations(from_html(`<div class="relative" role="button" tabindex="0"><div><!></div> <!></div>`), Carousel[FILENAME], [[134, 0, [[135, 2]]]]);
function Carousel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "images",
    "index",
    "slideDuration",
    "transition",
    "duration",
    "ariaLabel",
    "disableSwipe",
    "imgClass"
  ]);
  push($$props, false, Carousel);
  const onDragMove = mutable_source();
  const onDragStop = mutable_source();
  const SLIDE_DURATION_RATIO = 0.25;
  let images = prop($$props, "images", 8);
  let index2 = prop($$props, "index", 12, 0);
  let slideDuration = prop($$props, "slideDuration", 8, 1e3);
  let transition2 = prop($$props, "transition", 8, null);
  let duration = prop($$props, "duration", 8, 0);
  let ariaLabel = prop($$props, "ariaLabel", 8, "Draggable Carousel");
  let disableSwipe = prop($$props, "disableSwipe", 8, false);
  let divClass = "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96";
  let imgClass = prop($$props, "imgClass", 8, "");
  const dispatch = createEventDispatcher();
  const { set: set2, subscribe, update } = writable({
    images: images(),
    index: index2(),
    forward: true,
    slideDuration: slideDuration(),
    lastSlideChange: /* @__PURE__ */ new Date()
  });
  const state = {
    set: (_state) => set2({
      index: _state.index,
      images: _state.images,
      lastSlideChange: /* @__PURE__ */ new Date(),
      slideDuration: slideDuration(),
      forward
    }),
    subscribe,
    update
  };
  let forward = true;
  setContext("state", state);
  subscribe((_state) => {
    index2(_state.index);
    forward = _state.forward;
    dispatch("change", images()[index2()]);
  });
  onMount(() => {
    dispatch("change", images()[index2()]);
  });
  const nextSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      })) return _state;
      _state.index = _state.index >= images().length - 1 ? 0 : _state.index + 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const prevSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      })) return _state;
      _state.index = _state.index <= 0 ? images().length - 1 : _state.index - 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const loop = (node, duration2) => {
    set(carouselDiv, node);
    let intervalId;
    if (duration2 > 0) intervalId = setInterval(nextSlide, duration2);
    return {
      update: (duration3) => {
        clearInterval(intervalId);
        if (duration3 > 0) intervalId = setInterval(nextSlide, duration3);
      },
      destroy: () => clearInterval(intervalId)
    };
  };
  let activeDragGesture = mutable_source();
  let carouselDiv = mutable_source();
  let percentOffset = mutable_source(0);
  let touchEvent = mutable_source(null);
  const getPositionFromEvent = (evt) => {
    const mousePos = evt == null ? void 0 : evt.clientX;
    if (mousePos) return mousePos;
    let touchEvt = evt;
    if (/^touch/.test(touchEvt == null ? void 0 : touchEvt.type)) {
      return touchEvt.touches[0].clientX;
    }
  };
  const onDragStart = (evt) => {
    if (disableSwipe()) return;
    set(touchEvent, evt);
    evt.cancelable && evt.preventDefault();
    const start = getPositionFromEvent(evt);
    const width = get(carouselDiv).getBoundingClientRect().width;
    if (strict_equals(start, void 0) || strict_equals(width, void 0)) return;
    set(activeDragGesture, { start, position: start, width, timestamp: Date.now() });
  };
  legacy_pre_effect(
    () => (get(activeDragGesture), get(percentOffset), get(touchEvent)),
    () => {
      set(onDragStop, strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
        var _a, _b, _c;
        const SWIPE_MAX_DURATION = 250;
        const SWIPE_MIN_DISTANCE = 30;
        const DRAG_MIN_PERCENT = 50;
        if (get(activeDragGesture)) {
          const { timestamp, position, start } = get(activeDragGesture);
          const duration2 = Date.now() - timestamp;
          const distance = position - start;
          if (Math.abs(distance) >= SWIPE_MIN_DISTANCE && duration2 <= SWIPE_MAX_DURATION && duration2 > 0) {
            if (distance > 0) prevSlide();
            else nextSlide();
          } else if (get(percentOffset) > DRAG_MIN_PERCENT) prevSlide();
          else if (get(percentOffset) < -DRAG_MIN_PERCENT) nextSlide();
          else {
            if (strict_equals((_a = get(touchEvent)) == null ? void 0 : _a.constructor.name, "TouchEvent")) {
              (_c = (_b = get(touchEvent)) == null ? void 0 : _b.target) == null ? void 0 : _c.dispatchEvent(new Event("click", { bubbles: true }));
            }
          }
        }
        set(percentOffset, 0);
        set(activeDragGesture, void 0);
        set(touchEvent, null);
      });
    }
  );
  legacy_pre_effect(() => get(activeDragGesture), () => {
    set(onDragMove, strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
      const position = getPositionFromEvent(evt);
      if (!get(activeDragGesture) || strict_equals(position, void 0)) return;
      const { start, width } = get(activeDragGesture);
      set(percentOffset, Math.min(100, Math.max(-100, (position - start) / width * 100)));
      mutate(activeDragGesture, get(activeDragGesture).position = position);
    });
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root11();
  head(($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        add_svelte_meta(
          () => each(node_2, 1, images, index, ($$anchor4, image) => {
            var link = root_38();
            template_effect(() => set_attribute(link, "href", (get(image), untrack(() => get(image).src))));
            append($$anchor4, link);
          }),
          "each",
          Carousel,
          126,
          4
        );
        append($$anchor3, fragment_1);
      };
      add_svelte_meta(
        () => if_block(node_1, ($$render) => {
          if (deep_read_state(images()), untrack(() => images().length > 0)) $$render(consequent);
        }),
        "if",
        Carousel,
        125,
        2
      );
    }
    append($$anchor2, fragment);
  });
  event("mousemove", $document, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [133, 31]);
  });
  event("mouseup", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [133, 55]);
  });
  event("touchmove", $document, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [133, 81]);
  });
  event("touchend", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [133, 106]);
  });
  var div_1 = child(div);
  attribute_effect(div_1, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), get(activeDragGesture), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass, strict_equals(get(activeDragGesture), void 0) ? "transition-transform" : "", $$sanitized_props.class)))
  ]);
  var node_3 = child(div_1);
  slot(
    node_3,
    $$props,
    "slide",
    {
      get Slide() {
        return Slide_default;
      },
      get index() {
        return index2();
      }
    },
    ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      add_svelte_meta(
        () => Slide_default(node_4, {
          get image() {
            return deep_read_state(images()), deep_read_state(index2()), untrack(() => images()[index2()]);
          },
          get class() {
            return imgClass();
          },
          get transition() {
            return transition2();
          }
        }),
        "component",
        Carousel,
        137,
        6,
        { componentTag: "Slide" }
      );
      append($$anchor2, fragment_2);
    }
  );
  reset(div_1);
  action(div_1, ($$node, $$action_arg) => loop == null ? void 0 : loop($$node, $$action_arg), duration);
  var node_5 = sibling(div_1, 2);
  slot(
    node_5,
    $$props,
    "default",
    {
      get index() {
        return index2();
      },
      get Controls() {
        return Controls_default;
      },
      get Indicators() {
        return Indicators_default;
      }
    },
    null
  );
  reset(div);
  bind_this(div, ($$value) => set(carouselDiv, $$value), () => get(carouselDiv));
  template_effect(() => set_attribute(div, "aria-label", ariaLabel()));
  event("mousedown", div, onDragStart, void 0, false);
  event("touchstart", div, onDragStart, void 0, false);
  event("mousemove", div, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [134, 137]);
  });
  event("mouseup", div, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [134, 161]);
  });
  event("touchmove", div, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [134, 187]);
  });
  event("touchend", div, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [134, 212]);
  });
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Carousel = hmr(Carousel, () => Carousel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Carousel[HMR].source;
    set(Carousel[HMR].source, module.default[HMR].original);
  });
}
var Carousel_default = Carousel;

// node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte
Thumbnail[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte";
var root12 = add_locations(from_html(`<img/>`), Thumbnail[FILENAME], [[8, 0]]);
function Thumbnail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["selected", "alt", "activeClass", "inactiveClass"]);
  push($$props, false, Thumbnail);
  let selected = prop($$props, "selected", 8, false);
  let alt = prop($$props, "alt", 8, "");
  let activeClass = prop($$props, "activeClass", 8, "opacity-100");
  let inactiveClass = prop($$props, "inactiveClass", 8, "opacity-60");
  var $$exports = { ...legacy_api() };
  init();
  var img = root12();
  attribute_effect(img, ($0) => ({ ...$$restProps, alt: alt(), class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(selected()), deep_read_state(activeClass()), deep_read_state(inactiveClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(selected() ? activeClass() : inactiveClass(), $$sanitized_props.class)))
  ]);
  replay_events(img);
  append($$anchor, img);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbnail = hmr(Thumbnail, () => Thumbnail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnail[HMR].source;
    set(Thumbnail[HMR].source, module.default[HMR].original);
  });
}
var Thumbnail_default = Thumbnail;

// node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte
Thumbnails[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte";
var root_114 = add_locations(from_html(`<button><!></button>`), Thumbnails[FILENAME], [[27, 4]]);
var root13 = add_locations(from_html(`<div></div>`), Thumbnails[FILENAME], [[23, 0]]);
function Thumbnails($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thumbnails);
  let images = prop($$props, "images", 24, () => []);
  let index2 = prop($$props, "index", 12, 0);
  let ariaLabel = prop($$props, "ariaLabel", 8, "Click to view image");
  let imgClass = prop($$props, "imgClass", 8, "");
  let throttleDelay = prop($$props, "throttleDelay", 8, 650);
  let lastClickedAt = /* @__PURE__ */ new Date();
  const btnClick = (idx) => {
    if ((/* @__PURE__ */ new Date()).getTime() - lastClickedAt.getTime() < throttleDelay()) {
      console.warn("Thumbnail action throttled");
      return;
    }
    if (strict_equals(idx, index2())) {
      return;
    }
    index2(idx);
    lastClickedAt = /* @__PURE__ */ new Date();
  };
  legacy_pre_effect(() => (deep_read_state(index2()), deep_read_state(images())), () => {
    index2((index2() + images().length) % images().length);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root13();
  add_svelte_meta(
    () => each(div, 5, images, index, ($$anchor2, image, idx) => {
      const selected = tag(derived_safe_equal(() => strict_equals(index2(), idx)), "selected");
      get(selected);
      var button = root_114();
      var node = child(button);
      slot(
        node,
        $$props,
        "default",
        {
          get Thumbnail() {
            return Thumbnail_default;
          },
          get image() {
            return get(image);
          },
          get selected() {
            return get(selected);
          },
          get imgClass() {
            return imgClass();
          }
        },
        ($$anchor3) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          add_svelte_meta(
            () => Thumbnail_default(node_1, spread_props(() => get(image), {
              get selected() {
                return get(selected);
              },
              get class() {
                return imgClass();
              }
            })),
            "component",
            Thumbnails,
            29,
            8,
            { componentTag: "Thumbnail" }
          );
          append($$anchor3, fragment);
        }
      );
      reset(button);
      template_effect(() => set_attribute(button, "aria-label", ariaLabel()));
      event("click", button, () => btnClick(idx));
      append($$anchor2, button);
    }),
    "each",
    Thumbnails,
    24,
    2
  );
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("flex flex-row justify-center bg-gray-100 w-full", $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbnails = hmr(Thumbnails, () => Thumbnails[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnails[HMR].source;
    set(Thumbnails[HMR].source, module.default[HMR].original);
  });
}
var Thumbnails_default = Thumbnails;

// node_modules/flowbite-svelte/dist/charts/Chart.svelte
Chart[FILENAME] = "node_modules/flowbite-svelte/dist/charts/Chart.svelte";
var root14 = add_locations(from_html(`<div></div>`), Chart[FILENAME], [[28, 0]]);
function Chart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart);
  let options = prop($$props, "options", 8);
  let chart;
  function initChart(node, options2) {
    async function asyncInitChart() {
      const ApexChartsModule = (await track_reactivity_loss(import("./apexcharts.js")))();
      const ApexCharts = ApexChartsModule.default;
      chart = new ApexCharts(node, options2);
      (await track_reactivity_loss(chart.render()))();
    }
    asyncInitChart();
    return {
      update(options3) {
        chart == null ? void 0 : chart.updateOptions(options3);
      },
      destroy() {
        chart == null ? void 0 : chart.destroy();
      }
    };
  }
  onMount(() => {
    return () => {
      chart == null ? void 0 : chart.destroy();
    };
  });
  var $$exports = { ...legacy_api() };
  init();
  var div = root14();
  action(div, ($$node, $$action_arg) => initChart == null ? void 0 : initChart($$node, $$action_arg), options);
  template_effect(() => set_class(div, 1, clsx((deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Chart = hmr(Chart, () => Chart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart[HMR].source;
    set(Chart[HMR].source, module.default[HMR].original);
  });
}
var Chart_default = Chart;

// node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte
DarkMode[FILENAME] = "node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte";
var root_115 = add_locations(
  with_script(from_html(
    `<script>
    if ('color-theme' in localStorage) {
      // explicit preference - overrides author's choice
      localStorage.getItem('color-theme') === 'dark' ? window.document.documentElement.classList.add('dark') : window.document.documentElement.classList.remove('dark');
    } else {
      // browser preference - does not overrides
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) window.document.documentElement.classList.add('dark');
    }
  <\/script><!>`,
    1
  )),
  DarkMode[FILENAME],
  [[19, 2]]
);
var root_28 = add_locations(
  from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1
  0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
  DarkMode[FILENAME],
  [[33, 6, [[34, 8]]]]
);
var root_39 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>`), DarkMode[FILENAME], [[44, 6, [[45, 8]]]]);
var root15 = add_locations(from_html(`<button><span class="hidden dark:block"><!></span> <span class="block dark:hidden"><!></span></button>`), DarkMode[FILENAME], [[30, 0, [[31, 2], [42, 2]]]]);
function DarkMode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["btnClass", "size", "ariaLabel"]);
  push($$props, false, DarkMode);
  let btnClass = prop($$props, "btnClass", 8, "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none rounded-lg text-sm p-2.5");
  let size = prop($$props, "size", 8, "md");
  let ariaLabel = prop($$props, "ariaLabel", 8, "Dark mode");
  const sizes = { sm: "w-4 h-4", md: "w-5 h-5", lg: "w-6 h-6" };
  const toggleTheme = (ev) => {
    const target = ev.target;
    const isDark = target.ownerDocument.documentElement.classList.toggle("dark");
    if (strict_equals(target.ownerDocument, document)) localStorage.setItem("color-theme", isDark ? "dark" : "light");
  };
  var $$exports = { ...legacy_api() };
  init();
  var button = root15();
  head(($$anchor2) => {
    var fragment = root_115();
    var node = sibling(first_child(fragment));
    append($$anchor2, fragment);
  });
  attribute_effect(
    button,
    ($0) => ({
      "aria-label": ariaLabel(),
      type: "button",
      ...$$restProps,
      class: $0
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(btnClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(btnClass(), $$sanitized_props.class)))
    ]
  );
  var span = child(button);
  var node_1 = child(span);
  slot(node_1, $$props, "lightIcon", {}, ($$anchor2) => {
    var svg = root_28();
    template_effect(() => set_class(svg, 0, clsx((deep_read_state(size()), untrack(() => sizes[size()])))));
    append($$anchor2, svg);
  });
  reset(span);
  var span_1 = sibling(span, 2);
  var node_2 = child(span_1);
  slot(node_2, $$props, "darkIcon", {}, ($$anchor2) => {
    var svg_1 = root_39();
    template_effect(() => set_class(svg_1, 0, clsx((deep_read_state(size()), untrack(() => sizes[size()])))));
    append($$anchor2, svg_1);
  });
  reset(span_1);
  reset(button);
  event("click", button, toggleTheme);
  append($$anchor, button);
  return pop($$exports);
}
if (import.meta.hot) {
  DarkMode = hmr(DarkMode, () => DarkMode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DarkMode[HMR].source;
    set(DarkMode[HMR].source, module.default[HMR].original);
  });
}
var DarkMode_default = DarkMode;

// node_modules/flowbite-svelte/dist/datepicker/Calender.svelte
Calender[FILENAME] = "node_modules/flowbite-svelte/dist/datepicker/Calender.svelte";
var root16 = add_locations(from_svg(`<svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>`), Calender[FILENAME], [[1, 0, [[2, 2]]]]);
function Calender($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Calender);
  var $$exports = { ...legacy_api() };
  var svg = root16();
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Calender = hmr(Calender, () => Calender[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calender[HMR].source;
    set(Calender[HMR].source, module.default[HMR].original);
  });
}
var Calender_default = Calender;

// node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte
Datepicker[FILENAME] = "node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte";
var root_116 = add_locations(with_script(from_html(`<link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.1/dist/flowbite.min.css"/> <script src="https://unpkg.com/flowbite@1.5.1/dist/datepicker.js"><\/script>`, 1)), Datepicker[FILENAME], [[19, 2], [20, 2]]);
var root_29 = add_locations(from_html(`<div date-rangepicker="" class="flex items-center"><div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <input name="start" type="text" placeholder="Select date start"/></div> <span class="mx-4 text-gray-500">to</span> <div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <input name="end" type="text" placeholder="Select date end"/></div></div>`), Datepicker[FILENAME], [
  [
    24,
    2,
    [
      [25, 4, [[26, 6], [29, 6]]],
      [31, 4],
      [32, 4, [[33, 6], [36, 6]]]
    ]
  ]
]);
var root_44 = add_locations(from_html(`<input/>`), Datepicker[FILENAME], [[45, 6]]);
var root_53 = add_locations(from_html(`<input/>`), Datepicker[FILENAME], [[47, 6]]);
var root_310 = add_locations(from_html(`<div class="relative"><div class="flex absolute inset-y-0 start-0 items-center ps-3 pointer-events-none"><!></div> <!> <!></div>`), Datepicker[FILENAME], [[40, 2, [[41, 4]]]]);
function Datepicker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "range",
    "datepickerButtons",
    "datepickerFormat",
    "datepickerOrientation",
    "datepickerTitle",
    "attribute",
    "inputClass"
  ]);
  push($$props, false, Datepicker);
  const setAttribute = mutable_source();
  let range = prop($$props, "range", 8, false);
  let datepickerButtons = prop($$props, "datepickerButtons", 8, false);
  let datepickerFormat = prop($$props, "datepickerFormat", 8, "mm/dd/yyyy");
  let datepickerOrientation = prop($$props, "datepickerOrientation", 8, "bottom");
  let datepickerTitle = prop($$props, "datepickerTitle", 8, "Flowbite datepicker");
  let attribute = prop($$props, "attribute", 8, "");
  let inputClass2 = prop($$props, "inputClass", 8, "bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500");
  legacy_pre_effect(() => {
  }, () => {
    set(setAttribute, (node, params) => {
      if (params) {
        node.setAttribute(params, "");
      }
    });
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  var fragment_1 = comment();
  head(($$anchor2) => {
    var fragment = root_116();
    next(2);
    append($$anchor2, fragment);
  });
  var node_1 = first_child(fragment_1);
  {
    var consequent = ($$anchor2) => {
      var div = root_29();
      var div_1 = child(div);
      var div_2 = child(div_1);
      var node_2 = child(div_2);
      add_svelte_meta(() => Calender_default(node_2, {}), "component", Datepicker, 27, 8, { componentTag: "Calendar" });
      reset(div_2);
      var input = sibling(div_2, 2);
      reset(div_1);
      var div_3 = sibling(div_1, 4);
      var div_4 = child(div_3);
      var node_3 = child(div_4);
      add_svelte_meta(() => Calender_default(node_3, {}), "component", Datepicker, 34, 8, { componentTag: "Calendar" });
      reset(div_4);
      var input_1 = sibling(div_4, 2);
      reset(div_3);
      reset(div);
      template_effect(() => {
        set_class(input, 1, clsx(inputClass2()));
        set_class(input_1, 1, clsx(inputClass2()));
      });
      append($$anchor2, div);
    };
    var alternate_1 = ($$anchor2) => {
      var div_5 = root_310();
      var div_6 = child(div_5);
      var node_4 = child(div_6);
      add_svelte_meta(() => Calender_default(node_4, {}), "component", Datepicker, 42, 6, { componentTag: "Calendar" });
      reset(div_6);
      var node_5 = sibling(div_6, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var input_2 = root_44();
          attribute_effect(
            input_2,
            () => ({
              ...$$restProps,
              datepicker: true,
              "datepicker-buttons": true,
              "datepicker-format": datepickerFormat(),
              "datepicker-orientation": datepickerOrientation(),
              "datepicker-title": datepickerTitle(),
              type: "text",
              class: inputClass2(),
              placeholder: "Select date"
            }),
            void 0,
            void 0,
            void 0,
            true
          );
          action(input_2, ($$node, $$action_arg) => {
            var _a;
            return (_a = get(setAttribute)) == null ? void 0 : _a($$node, $$action_arg);
          }, attribute);
          append($$anchor3, input_2);
        };
        var alternate = ($$anchor3) => {
          var input_3 = root_53();
          attribute_effect(
            input_3,
            () => ({
              ...$$restProps,
              datepicker: true,
              "datepicker-format": datepickerFormat(),
              "datepicker-orientation": datepickerOrientation(),
              "datepicker-title": datepickerTitle(),
              type: "text",
              class: inputClass2(),
              placeholder: "Select date"
            }),
            void 0,
            void 0,
            void 0,
            true
          );
          action(input_3, ($$node, $$action_arg) => {
            var _a;
            return (_a = get(setAttribute)) == null ? void 0 : _a($$node, $$action_arg);
          }, attribute);
          append($$anchor3, input_3);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (datepickerButtons()) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          Datepicker,
          44,
          4
        );
      }
      var node_6 = sibling(node_5, 2);
      slot(node_6, $$props, "default", {}, null);
      reset(div_5);
      append($$anchor2, div_5);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (range()) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      Datepicker,
      23,
      0
    );
  }
  append($$anchor, fragment_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Datepicker = hmr(Datepicker, () => Datepicker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Datepicker[HMR].source;
    set(Datepicker[HMR].source, module.default[HMR].original);
  });
}
var Datepicker_default = Datepicker;

// node_modules/flowbite-svelte/dist/device-mockups/Android.svelte
Android[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Android.svelte";
var root17 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Android[FILENAME], [
  [
    11,
    0,
    [[12, 2], [13, 2], [14, 2], [15, 2], [16, 2], [17, 2]]
  ]
]);
function Android($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Android);
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-xl h-[600px] w-[300px] shadow-xl");
  let slot2 = prop($$props, "slot", 8, "rounded-xl overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 8, "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute");
  let leftTop = prop($$props, "leftTop", 8, "h-[32px] w-[3px] bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftMid = prop($$props, "leftMid", 8, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 8, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 8, "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  var $$exports = { ...legacy_api() };
  init();
  var div_1 = root17();
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  var node = child(div_7);
  slot(node, $$props, "default", {}, null);
  reset(div_7);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
      set_class(div_7, 1, $6);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(top()), deep_read_state($$sanitized_props), untrack(() => twMerge(top(), $$sanitized_props.classTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftTop()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftTop(), $$sanitized_props.classLeftTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftMid()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftMid(), $$sanitized_props.classLeftMid)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftBot()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftBot(), $$sanitized_props.classLeftBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(right()), deep_read_state($$sanitized_props), untrack(() => twMerge(right(), $$sanitized_props.classRight)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(slot2()), deep_read_state($$sanitized_props), untrack(() => twMerge(slot2(), $$sanitized_props.classSlot))))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Android = hmr(Android, () => Android[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Android[HMR].source;
    set(Android[HMR].source, module.default[HMR].original);
  });
}
var Android_default = Android;

// node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte
DefaultMockup[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte";
var root18 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), DefaultMockup[FILENAME], [[10, 0, [[11, 2], [12, 2], [13, 2], [14, 2], [15, 2]]]]);
function DefaultMockup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, DefaultMockup);
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px]");
  let slot2 = prop($$props, "slot", 8, "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 8, "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftTop = prop($$props, "leftTop", 8, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 8, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 8, "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  var $$exports = { ...legacy_api() };
  init();
  var div_1 = root18();
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  slot(node, $$props, "default", {}, null);
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(top()), deep_read_state($$sanitized_props), untrack(() => twMerge(top(), $$sanitized_props.classTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftTop()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftTop(), $$sanitized_props.classLeftTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftBot()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftBot(), $$sanitized_props.classLeftBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(right()), deep_read_state($$sanitized_props), untrack(() => twMerge(right(), $$sanitized_props.classRight)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(slot2()), deep_read_state($$sanitized_props), untrack(() => twMerge(slot2(), $$sanitized_props.classSlot))))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  DefaultMockup = hmr(DefaultMockup, () => DefaultMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DefaultMockup[HMR].source;
    set(DefaultMockup[HMR].source, module.default[HMR].original);
  });
}
var DefaultMockup_default = DefaultMockup;

// node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte
Desktop[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte";
var root19 = add_locations(from_html(`<div><div><!></div></div> <div></div> <div></div>`, 1), Desktop[FILENAME], [[8, 0, [[9, 2]]], [13, 0], [14, 0]]);
function Desktop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Desktop);
  let inner = prop($$props, "inner", 8, "rounded-xl overflow-hidden h-[140px] md:h-[262px]");
  let bot = prop($$props, "bot", 8, "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl h-[24px] max-w-[301px] md:h-[42px] md:max-w-[512px]");
  let botUnder = prop($$props, "botUnder", 8, "relative mx-auto bg-gray-800 rounded-b-xl h-[55px] max-w-[83px] md:h-[95px] md:max-w-[142px]");
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[16px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root19();
  var div_1 = first_child(fragment);
  var div_2 = child(div_1);
  var node = child(div_2);
  slot(node, $$props, "default", {}, null);
  reset(div_2);
  reset(div_1);
  var div_3 = sibling(div_1, 2);
  var div_4 = sibling(div_3, 2);
  template_effect(
    ($0, $1, $2, $3) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(inner()), deep_read_state($$sanitized_props), untrack(() => twMerge(inner(), $$sanitized_props.classInner)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(bot()), deep_read_state($$sanitized_props), untrack(() => twMerge(bot(), $$sanitized_props.classBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(botUnder()), deep_read_state($$sanitized_props), untrack(() => twMerge(botUnder(), $$sanitized_props.classBotUnder))))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Desktop = hmr(Desktop, () => Desktop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Desktop[HMR].source;
    set(Desktop[HMR].source, module.default[HMR].original);
  });
}
var Desktop_default = Desktop;

// node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte
Ios[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte";
var root20 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Ios[FILENAME], [[10, 0, [[11, 2], [12, 2], [13, 2], [14, 2], [15, 2]]]]);
function Ios($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ios);
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl");
  let slot2 = prop($$props, "slot", 8, "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800");
  let top = prop($$props, "top", 8, "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute");
  let leftTop = prop($$props, "leftTop", 8, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 8, "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 8, "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  var $$exports = { ...legacy_api() };
  init();
  var div_1 = root20();
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  slot(node, $$props, "default", {}, null);
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(top()), deep_read_state($$sanitized_props), untrack(() => twMerge(top(), $$sanitized_props.classTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftTop()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftTop(), $$sanitized_props.classLeftTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftBot()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftBot(), $$sanitized_props.classLeftBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(right()), deep_read_state($$sanitized_props), untrack(() => twMerge(right(), $$sanitized_props.classRight)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(slot2()), deep_read_state($$sanitized_props), untrack(() => twMerge(slot2(), $$sanitized_props.classSlot))))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Ios = hmr(Ios, () => Ios[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ios[HMR].source;
    set(Ios[HMR].source, module.default[HMR].original);
  });
}
var Ios_default = Ios;

// node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte
Laptop[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte";
var root21 = add_locations(from_html(`<div><div><!></div></div> <div><div></div></div>`, 1), Laptop[FILENAME], [[8, 0, [[9, 2]]], [14, 0, [[15, 2]]]]);
function Laptop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Laptop);
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[8px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]");
  let inner = prop($$props, "inner", 8, "rounded-lg overflow-hidden h-[156px] md:h-[278px] bg-white dark:bg-gray-800");
  let bot = prop($$props, "bot", 8, "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl rounded-t-sm h-[17px] max-w-[351px] md:h-[21px] md:max-w-[597px]");
  let botCen = prop($$props, "botCen", 8, "absolute left-1/2 top-0 -translate-x-1/2 rounded-b-xl w-[56px] h-[5px] md:w-[96px] md:h-[8px] bg-gray-800");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root21();
  var div_1 = first_child(fragment);
  var div_2 = child(div_1);
  var node = child(div_2);
  slot(node, $$props, "default", {}, null);
  reset(div_2);
  reset(div_1);
  var div_3 = sibling(div_1, 2);
  var div_4 = child(div_3);
  reset(div_3);
  template_effect(
    ($0, $1, $2, $3) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(inner()), deep_read_state($$sanitized_props), untrack(() => twMerge(inner(), $$sanitized_props.classInner)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(bot()), deep_read_state($$sanitized_props), untrack(() => twMerge(bot(), $$sanitized_props.classBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(botCen()), deep_read_state($$sanitized_props), untrack(() => twMerge(botCen(), $$sanitized_props.classBotCen))))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Laptop = hmr(Laptop, () => Laptop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop[HMR].source;
    set(Laptop[HMR].source, module.default[HMR].original);
  });
}
var Laptop_default = Laptop;

// node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte
Smartwatch[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte";
var root22 = add_locations(from_html(`<div></div> <div><div></div> <div></div> <div><!></div></div> <div></div>`, 1), Smartwatch[FILENAME], [[10, 0], [11, 0, [[12, 2], [13, 2], [14, 2]]], [18, 0]]);
function Smartwatch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smartwatch);
  let div = prop($$props, "div", 8, "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-t-[2.5rem] h-[63px] max-w-[133px]");
  let slot2 = prop($$props, "slot", 8, "rounded-[2rem] overflow-hidden h-[193px] w-[188px]");
  let rightTop = prop($$props, "rightTop", 8, "h-[41px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[40px] rounded-r-lg");
  let rightBot = prop($$props, "rightBot", 8, "h-[32px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[88px] rounded-r-lg");
  let top = prop($$props, "top", 8, "relative mx-auto border-gray-900 dark:bg-gray-800 dark:border-gray-800 border-[10px] rounded-[2.5rem] h-[213px] w-[208px]");
  let bot = prop($$props, "bot", 8, "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-b-[2.5rem] h-[63px] max-w-[133px]");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root22();
  var div_1 = first_child(fragment);
  var div_2 = sibling(div_1, 2);
  var div_3 = child(div_2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var node = child(div_5);
  slot(node, $$props, "default", {}, null);
  reset(div_5);
  reset(div_2);
  var div_6 = sibling(div_2, 2);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(top()), deep_read_state($$sanitized_props), untrack(() => twMerge(top(), $$sanitized_props.classTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(rightTop()), deep_read_state($$sanitized_props), untrack(() => twMerge(rightTop(), $$sanitized_props.classRightTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(rightBot()), deep_read_state($$sanitized_props), untrack(() => twMerge(rightBot(), $$sanitized_props.classRightBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(slot2()), deep_read_state($$sanitized_props), untrack(() => twMerge(slot2(), $$sanitized_props.classSlot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(bot()), deep_read_state($$sanitized_props), untrack(() => twMerge(bot(), $$sanitized_props.classBot))))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Smartwatch = hmr(Smartwatch, () => Smartwatch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartwatch[HMR].source;
    set(Smartwatch[HMR].source, module.default[HMR].original);
  });
}
var Smartwatch_default = Smartwatch;

// node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte
Tablet[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte";
var root23 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Tablet[FILENAME], [[10, 0, [[11, 2], [12, 2], [13, 2], [14, 2], [15, 2]]]]);
function Tablet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tablet);
  let div = prop($$props, "div", 8, "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[454px] max-w-[341px] md:h-[682px] md:max-w-[512px]");
  let slot2 = prop($$props, "slot", 8, "rounded-[2rem] overflow-hidden h-[426px] md:h-[654px] bg-white dark:bg-gray-800");
  let leftTop = prop($$props, "leftTop", 8, "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg");
  let leftMid = prop($$props, "leftMid", 8, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg");
  let leftBot = prop($$props, "leftBot", 8, "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg");
  let right = prop($$props, "right", 8, "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg");
  var $$exports = { ...legacy_api() };
  init();
  var div_1 = root23();
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  slot(node, $$props, "default", {}, null);
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(div()), deep_read_state($$sanitized_props), untrack(() => twMerge(div(), $$sanitized_props.class)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftTop()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftTop(), $$sanitized_props.classLeftTop)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftMid()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftMid(), $$sanitized_props.classLeftMid)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(leftBot()), deep_read_state($$sanitized_props), untrack(() => twMerge(leftBot(), $$sanitized_props.classLeftBot)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(right()), deep_read_state($$sanitized_props), untrack(() => twMerge(right(), $$sanitized_props.classRight)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(slot2()), deep_read_state($$sanitized_props), untrack(() => twMerge(slot2(), $$sanitized_props.classSlot))))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Tablet = hmr(Tablet, () => Tablet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet[HMR].source;
    set(Tablet[HMR].source, module.default[HMR].original);
  });
}
var Tablet_default = Tablet;

// node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte
DeviceMockup[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte";
var root_311 = add_locations(from_html(`<div class="border p-3 text-xl">Unknow device</div>`), DeviceMockup[FILENAME], [[25, 2]]);
function DeviceMockup($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DeviceMockup);
  let device = prop($$props, "device", 8, "default");
  const componets = {
    android: Android_default,
    ios: Ios_default,
    tablet: Tablet_default,
    default: DefaultMockup_default,
    smartwatch: Smartwatch_default,
    laptop: Laptop_default,
    desktop: Desktop_default
  };
  let component2 = mutable_source();
  legacy_pre_effect(() => deep_read_state(device()), () => {
    set(component2, componets[device()]);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => component(node_1, () => get(component2), ($$anchor3, $$component) => {
          $$component($$anchor3, {
            children: wrap_snippet(DeviceMockup, ($$anchor4, $$slotProps) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              slot(node_2, $$props, "default", {}, null);
              append($$anchor4, fragment_2);
            }),
            $$slots: { default: true }
          });
        }),
        "component",
        DeviceMockup,
        23,
        2,
        { componentTag: "svelte:component" }
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var div = root_311();
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(component2)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      DeviceMockup,
      22,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DeviceMockup = hmr(DeviceMockup, () => DeviceMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceMockup[HMR].source;
    set(DeviceMockup[HMR].source, module.default[HMR].original);
  });
}
var DeviceMockup_default = DeviceMockup;

// node_modules/flowbite-svelte/dist/utils/clickOutside.js
var clickOutside = (node, callback) => {
  const handleClick = (event2) => {
    if (!(event2 == null ? void 0 : event2.target))
      return;
    if (node && !node.contains(event2.target) && !event2.defaultPrevented) {
      callback();
    }
  };
  document.addEventListener("click", handleClick, true);
  return {
    destroy() {
      document.removeEventListener("click", handleClick, true);
    }
  };
};

// node_modules/flowbite-svelte/dist/drawer/Drawer.svelte
Drawer[FILENAME] = "node_modules/flowbite-svelte/dist/drawer/Drawer.svelte";
var root_210 = add_locations(from_html(`<div role="presentation"></div>`), Drawer[FILENAME], [[50, 4]]);
var root_45 = add_locations(from_html(`<div role="presentation"></div>`), Drawer[FILENAME], [[52, 4]]);
var root_117 = add_locations(from_html(`<!> <div><!></div>`, 1), Drawer[FILENAME], [[55, 2]]);
function Drawer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activateClickOutside",
    "hidden",
    "position",
    "leftOffset",
    "rightOffset",
    "topOffset",
    "bottomOffset",
    "width",
    "backdrop",
    "bgColor",
    "bgOpacity",
    "placement",
    "id",
    "divClass",
    "transitionParams",
    "transitionType"
  ]);
  push($$props, false, Drawer);
  let activateClickOutside = prop($$props, "activateClickOutside", 8, true);
  let hidden = prop($$props, "hidden", 12, true);
  let position = prop($$props, "position", 8, "fixed");
  let leftOffset = prop($$props, "leftOffset", 8, "inset-y-0 start-0");
  let rightOffset = prop($$props, "rightOffset", 8, "inset-y-0 end-0");
  let topOffset = prop($$props, "topOffset", 8, "inset-x-0 top-0");
  let bottomOffset = prop($$props, "bottomOffset", 8, "inset-x-0 bottom-0");
  let width = prop($$props, "width", 8, "w-80");
  let backdrop = prop($$props, "backdrop", 8, true);
  let bgColor = prop($$props, "bgColor", 8, "bg-gray-900");
  let bgOpacity = prop($$props, "bgOpacity", 8, "bg-opacity-75");
  let placement = prop($$props, "placement", 8, "left");
  let id = prop($$props, "id", 8, "drawer-example");
  let divClass = prop($$props, "divClass", 8, "overflow-y-auto z-50 p-4 bg-white dark:bg-gray-800");
  let transitionParams = prop($$props, "transitionParams", 24, () => ({}));
  let transitionType = prop($$props, "transitionType", 8, "fly");
  function multiple(node, params) {
    switch (transitionType()) {
      case "slide":
        return slide(node, params);
      case "blur":
        return blur(node, params);
      case "fade":
        return fade(node, params);
      default:
        return fly(node, params);
    }
  }
  const placements = {
    left: leftOffset(),
    right: rightOffset(),
    top: topOffset(),
    bottom: bottomOffset()
  };
  const handleDrawer = () => {
    hidden(!hidden());
  };
  const handleClickOutside = () => activateClickOutside() && !hidden() && handleDrawer();
  let backdropDivClass = twMerge("fixed top-0 start-0 z-50 w-full h-full", backdrop() && bgColor(), backdrop() && bgOpacity());
  function clickOutsideWrapper(node, callback) {
    return activateClickOutside() ? clickOutside(node, callback) : void 0;
  }
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = root_117();
      var node_2 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var div = root_210();
          template_effect(() => set_class(div, 1, clsx(backdropDivClass)));
          event("click", div, () => !hidden() && handleDrawer());
          append($$anchor3, div);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var div_1 = root_45();
              template_effect(() => set_class(div_1, 1, clsx(backdropDivClass)));
              append($$anchor4, div_1);
            };
            add_svelte_meta(
              () => if_block(
                node_3,
                ($$render) => {
                  if (backdrop() && !activateClickOutside()) $$render(consequent_1);
                },
                true
              ),
              "if",
              Drawer,
              51,
              2
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (backdrop() && activateClickOutside()) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Drawer,
          49,
          2
        );
      }
      var div_2 = sibling(node_2, 2);
      attribute_effect(
        div_2,
        ($0) => ({
          id: id(),
          ...$$restProps,
          class: $0,
          tabindex: "-1",
          "aria-controls": id(),
          "aria-labelledby": id()
        }),
        [
          () => (deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state(width()), deep_read_state(position()), deep_read_state(placement()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), width(), position(), placements[placement()], $$sanitized_props.class)))
        ]
      );
      var node_4 = child(div_2);
      slot(
        node_4,
        $$props,
        "default",
        {
          get hidden() {
            return hidden();
          }
        },
        null
      );
      reset(div_2);
      action(div_2, ($$node, $$action_arg) => clickOutsideWrapper == null ? void 0 : clickOutsideWrapper($$node, $$action_arg), () => handleClickOutside);
      transition(3, div_2, () => multiple, transitionParams);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (!hidden()) $$render(consequent_2);
      }),
      "if",
      Drawer,
      48,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Drawer = hmr(Drawer, () => Drawer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawer[HMR].source;
    set(Drawer[HMR].source, module.default[HMR].original);
  });
}
var Drawer_default = Drawer;

// node_modules/flowbite-svelte/dist/utils/Popper.svelte
Popper[FILENAME] = "node_modules/flowbite-svelte/dist/utils/Popper.svelte";
var root_118 = add_locations(from_html(`<div></div>`), Popper[FILENAME], [[152, 2]]);
var root_46 = add_locations(from_html(`<div></div>`), Popper[FILENAME], [[158, 15]]);
var root_312 = add_locations(from_html(`<!> <!>`, 1), Popper[FILENAME], []);
var root24 = add_locations(from_html(`<!> <!>`, 1), Popper[FILENAME], []);
function Popper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeContent",
    "arrow",
    "offset",
    "placement",
    "trigger",
    "triggeredBy",
    "reference",
    "strategy",
    "open",
    "yOnly",
    "middlewares"
  ]);
  push($$props, false, Popper);
  var $$ownership_validator = create_ownership_validator($$props);
  const middleware = mutable_source();
  let activeContent = prop($$props, "activeContent", 8, false);
  let arrow2 = prop($$props, "arrow", 8, true);
  let offset2 = prop($$props, "offset", 8, 8);
  let placement = prop($$props, "placement", 8, "top");
  let trigger = prop($$props, "trigger", 8, "hover");
  let triggeredBy = prop($$props, "triggeredBy", 24, () => void 0);
  let reference = prop($$props, "reference", 24, () => void 0);
  let strategy = prop($$props, "strategy", 8, "absolute");
  let open = prop($$props, "open", 12, false);
  let yOnly = prop($$props, "yOnly", 8, false);
  let middlewares = prop($$props, "middlewares", 24, () => [flip(), shift()]);
  const dispatch = createEventDispatcher();
  let focusable = mutable_source();
  let clickable = mutable_source();
  let hoverable = mutable_source();
  let referenceEl = mutable_source();
  let floatingEl;
  let arrowEl = mutable_source();
  let contentEl = mutable_source();
  let triggerEls = [];
  const showHandler = (ev) => {
    if (strict_equals(get(referenceEl), void 0)) console.error("trigger undefined");
    if (!reference() && triggerEls.includes(ev.target) && strict_equals(get(referenceEl), ev.target, false)) {
      set(referenceEl, ev.target);
      if (open()) return;
    }
    open(strict_equals(ev.type, "click") ? !open() : true);
  };
  const hasHover = (el) => el.matches(":hover");
  const hasFocus = (el) => el.contains(document.activeElement);
  const px = (n2) => n2 ? `${n2}px` : "";
  const hideHandler = (ev) => {
    if (activeContent() && get(hoverable)) {
      const elements = [get(referenceEl), floatingEl, ...triggerEls].filter(Boolean);
      setTimeout(
        () => {
          if (strict_equals(ev.type, "mouseleave") && !elements.some(hasHover)) {
            open(false);
          }
        },
        100
      );
    } else {
      open(false);
    }
  };
  let arrowSide = mutable_source();
  const oppositeSideMap = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function updatePosition() {
    computePosition(get(referenceEl), floatingEl, {
      placement: placement(),
      strategy: strategy(),
      middleware: get(middleware)
    }).then(({
      x,
      y,
      middlewareData,
      placement: placement2,
      strategy: strategy2
    }) => {
      floatingEl.style.position = strategy2;
      floatingEl.style.left = yOnly() ? "0" : px(x);
      floatingEl.style.top = px(y);
      if (middlewareData.arrow && get(arrowEl) instanceof HTMLDivElement) {
        mutate(arrowEl, get(arrowEl).style.left = px(middlewareData.arrow.x));
        mutate(arrowEl, get(arrowEl).style.top = px(middlewareData.arrow.y));
        set(arrowSide, oppositeSideMap[placement2.split("-")[0]]);
        mutate(arrowEl, get(arrowEl).style[get(arrowSide)] = px(-get(arrowEl).offsetWidth / 2 - ($$sanitized_props.border ? 1 : 0)));
      }
    });
  }
  function init2(node, _referenceEl) {
    floatingEl = node;
    let cleanup = autoUpdate(_referenceEl, floatingEl, updatePosition);
    return {
      update(_referenceEl2) {
        cleanup();
        cleanup = autoUpdate(_referenceEl2, floatingEl, updatePosition);
      },
      destroy() {
        cleanup();
      }
    };
  }
  onMount(() => {
    const events = [
      ["focusin", showHandler, get(focusable)],
      ["focusout", hideHandler, get(focusable)],
      ["click", showHandler, get(clickable)],
      ["mouseenter", showHandler, get(hoverable)],
      ["mouseleave", hideHandler, get(hoverable)]
    ];
    if (triggeredBy()) triggerEls = [...document.querySelectorAll(triggeredBy())];
    else triggerEls = get(contentEl).previousElementSibling ? [get(contentEl).previousElementSibling] : [];
    if (!triggerEls.length) {
      console.error("No triggers found.");
    }
    triggerEls.forEach((element2) => {
      if (element2.tabIndex < 0) element2.tabIndex = 0;
      for (const [name, handler, cond] of events) if (cond) element2.addEventListener(name, handler);
    });
    if (reference()) {
      set(referenceEl, document.querySelector(reference()) ?? document.body);
      if (strict_equals(get(referenceEl), document.body)) {
        console.error(`Popup reference not found: '${reference()}'`);
      } else {
        if (get(focusable)) get(referenceEl).addEventListener("focusout", hideHandler);
        if (get(hoverable)) get(referenceEl).addEventListener("mouseleave", hideHandler);
      }
    } else {
      set(referenceEl, triggerEls[0]);
    }
    if (get(clickable)) document.addEventListener("click", closeOnClickOutside);
    return () => {
      triggerEls.forEach((element2) => {
        if (element2) {
          for (const [name, handler] of events) element2.removeEventListener(name, handler);
        }
      });
      if (get(referenceEl)) {
        get(referenceEl).removeEventListener("focusout", hideHandler);
        get(referenceEl).removeEventListener("mouseleave", hideHandler);
      }
      document.removeEventListener("click", closeOnClickOutside);
    };
  });
  function closeOnClickOutside(event2) {
    if (open()) {
      if (!event2.composedPath().includes(floatingEl) && !triggerEls.some((el) => event2.composedPath().includes(el))) {
        hideHandler(event2);
      }
    }
  }
  function optional(pred, func) {
    return pred ? func : () => void 0;
  }
  let arrowClass = mutable_source();
  function initArrow(node) {
    set(arrowEl, node);
    return {
      destroy() {
        set(arrowEl, null);
      }
    };
  }
  legacy_pre_effect(() => deep_read_state(trigger()), () => {
    set(focusable, strict_equals(trigger(), "focus"));
  });
  legacy_pre_effect(() => deep_read_state(trigger()), () => {
    set(clickable, strict_equals(trigger(), "click"));
  });
  legacy_pre_effect(() => deep_read_state(trigger()), () => {
    set(hoverable, strict_equals(trigger(), "hover"));
  });
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch("show", open());
  });
  legacy_pre_effect(() => (deep_read_state(placement()), get(referenceEl)), () => {
    placement() && set(referenceEl, get(referenceEl));
  });
  legacy_pre_effect(
    () => (deep_read_state(middlewares()), floating_ui_dom_exports, deep_read_state(offset2()), get(arrowEl)),
    () => {
      set(middleware, [
        ...middlewares(),
        offset(+offset2()),
        get(arrowEl) && arrow({ element: get(arrowEl), padding: 10 })
      ]);
    }
  );
  legacy_pre_effect(
    () => (twJoin, deep_read_state($$sanitized_props), get(arrowSide)),
    () => {
      set(arrowClass, twJoin("absolute pointer-events-none block w-[10px] h-[10px] rotate-45 bg-inherit border-inherit", $$sanitized_props.border && strict_equals(get(arrowSide), "bottom") && "border-b border-e", $$sanitized_props.border && strict_equals(get(arrowSide), "top") && "border-t border-s ", $$sanitized_props.border && strict_equals(get(arrowSide), "right") && "border-t border-e ", $$sanitized_props.border && strict_equals(get(arrowSide), "left") && "border-b border-s "));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root24();
  var node_1 = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_118();
      bind_this(div, ($$value) => set(contentEl, $$value), () => get(contentEl));
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (!get(referenceEl)) $$render(consequent);
      }),
      "if",
      Popper,
      151,
      0
    );
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      var event_handler = user_derived(() => optional(activeContent() && get(focusable), showHandler));
      var event_handler_1 = user_derived(() => optional(activeContent() && get(focusable), hideHandler));
      var event_handler_2 = user_derived(() => optional(activeContent() && get(hoverable), showHandler));
      var event_handler_3 = user_derived(() => optional(activeContent() && get(hoverable), hideHandler));
      {
        let $0 = derived_safe_equal(() => activeContent() ? -1 : void 0);
        $$ownership_validator.binding("open", Frame_default, open);
        add_svelte_meta(
          () => Frame_default(node_3, spread_props(
            {
              use: init2,
              get options() {
                return get(referenceEl);
              },
              role: "tooltip",
              get tabindex() {
                return get($0);
              }
            },
            () => $$restProps,
            {
              get open() {
                return open();
              },
              set open($$value) {
                open($$value);
              },
              $$events: {
                focusin(...$$args) {
                  apply(() => get(event_handler), this, $$args, Popper, [156, 121], true);
                },
                focusout(...$$args) {
                  apply(() => get(event_handler_1), this, $$args, Popper, [156, 185], true);
                },
                mouseenter(...$$args) {
                  apply(() => get(event_handler_2), this, $$args, Popper, [156, 251], true);
                },
                mouseleave(...$$args) {
                  apply(() => get(event_handler_3), this, $$args, Popper, [156, 317], true);
                }
              },
              children: wrap_snippet(Popper, ($$anchor3, $$slotProps) => {
                var fragment_2 = root_312();
                var node_4 = first_child(fragment_2);
                slot(node_4, $$props, "default", {}, null);
                var node_5 = sibling(node_4, 2);
                {
                  var consequent_1 = ($$anchor4) => {
                    var div_1 = root_46();
                    action(div_1, ($$node) => initArrow == null ? void 0 : initArrow($$node));
                    template_effect(() => set_class(div_1, 1, clsx(get(arrowClass))));
                    append($$anchor4, div_1);
                  };
                  add_svelte_meta(
                    () => if_block(node_5, ($$render) => {
                      if (arrow2()) $$render(consequent_1);
                    }),
                    "if",
                    Popper,
                    158,
                    4
                  );
                }
                append($$anchor3, fragment_2);
              }),
              $$slots: { default: true },
              $$legacy: true
            }
          )),
          "component",
          Popper,
          156,
          2,
          { componentTag: "Frame" }
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (get(referenceEl)) $$render(consequent_2);
      }),
      "if",
      Popper,
      155,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Popper = hmr(Popper, () => Popper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popper[HMR].source;
    set(Popper[HMR].source, module.default[HMR].original);
  });
}
var Popper_default = Popper;

// node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte
Dropdown[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte";
var root_211 = add_locations(from_html(`<div><!></div>`), Dropdown[FILENAME], [[36, 4]]);
var root_313 = add_locations(from_html(`<div><!></div>`), Dropdown[FILENAME], [[44, 4]]);
var root_119 = add_locations(from_html(`<!> <ul><!></ul> <!>`, 1), Dropdown[FILENAME], [[40, 2]]);
function Dropdown($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "open",
    "containerClass",
    "classContainer",
    "headerClass",
    "classHeader",
    "footerClass",
    "classFooter",
    "activeClass",
    "classActive",
    "arrow",
    "trigger",
    "placement",
    "color",
    "shadow",
    "rounded"
  ]);
  push($$props, false, Dropdown);
  var $$ownership_validator = create_ownership_validator($$props);
  const containerCls = mutable_source();
  const headerCls = mutable_source();
  const ulCls = mutable_source();
  const footerCls = mutable_source();
  let activeUrl = prop($$props, "activeUrl", 24, () => void 0);
  let open = prop($$props, "open", 12, false);
  let containerClass = prop($$props, "containerClass", 8, "divide-y z-50");
  let classContainer = prop($$props, "classContainer", 24, () => void 0);
  let headerClass = prop($$props, "headerClass", 8, "py-1 overflow-hidden rounded-t-lg");
  let classHeader = prop($$props, "classHeader", 24, () => void 0);
  let footerClass = prop($$props, "footerClass", 8, "py-1 overflow-hidden rounded-b-lg");
  let classFooter = prop($$props, "classFooter", 24, () => void 0);
  let activeClass = prop($$props, "activeClass", 8, "text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900");
  let classActive = prop($$props, "classActive", 24, () => void 0);
  let arrow2 = prop($$props, "arrow", 8, false);
  let trigger = prop($$props, "trigger", 8, "click");
  let placement = prop($$props, "placement", 8, "bottom");
  let color = prop($$props, "color", 8, "dropdown");
  let shadow = prop($$props, "shadow", 8, true);
  let rounded = prop($$props, "rounded", 8, true);
  const activeUrlStore = writable("");
  let activeCls = twMerge(activeClass(), classActive());
  setContext("DropdownType", { activeClass: activeCls });
  setContext("activeUrl", activeUrlStore);
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl() ?? "");
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(containerClass()), deep_read_state(classContainer())),
    () => {
      set(containerCls, twMerge(containerClass(), classContainer()));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(headerClass()), deep_read_state(classHeader())),
    () => {
      set(headerCls, twMerge(headerClass(), classHeader()));
    }
  );
  legacy_pre_effect(() => (twMerge, deep_read_state($$sanitized_props)), () => {
    set(ulCls, twMerge("py-1", $$sanitized_props.class));
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(footerClass()), deep_read_state(classFooter())),
    () => {
      set(footerCls, twMerge(footerClass(), classFooter()));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    $$ownership_validator.binding("open", Popper_default, open);
    add_svelte_meta(
      () => Popper_default(node, spread_props({ activeContent: true }, () => $$restProps, {
        get trigger() {
          return trigger();
        },
        get arrow() {
          return arrow2();
        },
        get placement() {
          return placement();
        },
        get shadow() {
          return shadow();
        },
        get rounded() {
          return rounded();
        },
        get color() {
          return color();
        },
        get class() {
          return get(containerCls);
        },
        get open() {
          return open();
        },
        set open($$value) {
          open($$value);
        },
        $$events: {
          show($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(Dropdown, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_119();
          var node_1 = first_child(fragment_1);
          {
            var consequent = ($$anchor3) => {
              var div = root_211();
              var node_2 = child(div);
              slot(node_2, $$props, "header", {}, null);
              reset(div);
              template_effect(() => set_class(div, 1, clsx(get(headerCls))));
              append($$anchor3, div);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if (untrack(() => $$slots.header)) $$render(consequent);
              }),
              "if",
              Dropdown,
              35,
              2
            );
          }
          var ul = sibling(node_1, 2);
          var node_3 = child(ul);
          slot(node_3, $$props, "default", {}, null);
          reset(ul);
          var node_4 = sibling(ul, 2);
          {
            var consequent_1 = ($$anchor3) => {
              var div_1 = root_313();
              var node_5 = child(div_1);
              slot(node_5, $$props, "footer", {}, null);
              reset(div_1);
              template_effect(() => set_class(div_1, 1, clsx(get(footerCls))));
              append($$anchor3, div_1);
            };
            add_svelte_meta(
              () => if_block(node_4, ($$render) => {
                if (untrack(() => $$slots.footer)) $$render(consequent_1);
              }),
              "if",
              Dropdown,
              43,
              2
            );
          }
          template_effect(() => set_class(ul, 1, clsx(get(ulCls))));
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true },
        $$legacy: true
      })),
      "component",
      Dropdown,
      34,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Dropdown = hmr(Dropdown, () => Dropdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropdown[HMR].source;
    set(Dropdown[HMR].source, module.default[HMR].original);
  });
}
var Dropdown_default = Dropdown;

// node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte
DropdownDivider[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte";
var root25 = add_locations(from_html(`<div></div>`), DropdownDivider[FILENAME], [[5, 0]]);
function DropdownDivider($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass"]);
  push($$props, false, DropdownDivider);
  let divClass = prop($$props, "divClass", 8, "my-1 h-px bg-gray-100 dark:bg-gray-600");
  var $$exports = { ...legacy_api() };
  init();
  var div = root25();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class)))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownDivider = hmr(DropdownDivider, () => DropdownDivider[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownDivider[HMR].source;
    set(DropdownDivider[HMR].source, module.default[HMR].original);
  });
}
var DropdownDivider_default = DropdownDivider;

// node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte
DropdownHeader[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte";
var root26 = add_locations(from_html(`<div><!></div> <!>`, 1), DropdownHeader[FILENAME], [[7, 0]]);
function DropdownHeader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass", "divider"]);
  push($$props, false, DropdownHeader);
  let divClass = prop($$props, "divClass", 8, "py-2 px-4 text-gray-700 dark:text-white");
  let divider = prop($$props, "divider", 8, true);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root26();
  var div = first_child(fragment);
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class)))
  ]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  var node_1 = sibling(div, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => DropdownDivider_default(node_2, {}), "component", DropdownHeader, 11, 2, { componentTag: "DropdownDivider" });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (divider()) $$render(consequent);
      }),
      "if",
      DropdownHeader,
      10,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownHeader = hmr(DropdownHeader, () => DropdownHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownHeader[HMR].source;
    set(DropdownHeader[HMR].source, module.default[HMR].original);
  });
}
var DropdownHeader_default = DropdownHeader;

// node_modules/flowbite-svelte/dist/utils/Wrapper.svelte
Wrapper[FILENAME] = "node_modules/flowbite-svelte/dist/utils/Wrapper.svelte";
function Wrapper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "show", "use"]);
  push($$props, false, Wrapper);
  let tag2 = prop($$props, "tag", 8, "div");
  let show = prop($$props, "show", 8);
  let use = prop($$props, "use", 8, () => {
  });
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        validate_void_dynamic_element(tag2);
        validate_dynamic_element_tag(tag2);
        element(
          node_1,
          tag2,
          false,
          ($$element, $$anchor3) => {
            action($$element, ($$node) => {
              var _a;
              return (_a = use()) == null ? void 0 : _a($$node);
            });
            attribute_effect($$element, () => ({ ...$$restProps }));
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            slot(node_2, $$props, "default", {}, null);
            append($$anchor3, fragment_2);
          },
          void 0,
          [8, 2]
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_3 = comment();
      var node_3 = first_child(fragment_3);
      slot(node_3, $$props, "default", {}, null);
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (show()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Wrapper,
      7,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Wrapper = hmr(Wrapper, () => Wrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wrapper[HMR].source;
    set(Wrapper[HMR].source, module.default[HMR].original);
  });
}
var Wrapper_default = Wrapper;

// node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte
DropdownItem[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte";
function DropdownItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["defaultClass", "href", "activeClass"]);
  push($$props, false, DropdownItem);
  const active = mutable_source();
  const liClass = mutable_source();
  let defaultClass = prop($$props, "defaultClass", 8, "font-medium py-2 px-4 text-sm hover:bg-gray-100 dark:hover:bg-gray-600");
  let href = prop($$props, "href", 24, () => void 0);
  let activeClass = prop($$props, "activeClass", 24, () => void 0);
  const context = getContext("DropdownType") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value);
  });
  let wrap = mutable_source(true);
  function init2(node) {
    var _a;
    set(wrap, strict_equals((_a = node.parentElement) == null ? void 0 : _a.tagName, "UL"));
  }
  legacy_pre_effect(() => (get(sidebarUrl), deep_read_state(href())), () => {
    set(active, get(sidebarUrl) ? strict_equals(href(), get(sidebarUrl)) : false);
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(href()), get(active), deep_read_state(activeClass()), deep_read_state($$sanitized_props)),
    () => {
      set(liClass, twMerge(defaultClass(), href() ? "block" : "w-full text-left", get(active) && (activeClass() ?? context.activeClass), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  add_svelte_meta(
    () => Wrapper_default(node_1, {
      tag: "li",
      get show() {
        return get(wrap);
      },
      use: init2,
      children: wrap_snippet(DropdownItem, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        {
          validate_void_dynamic_element(() => href() ? "a" : "button");
          validate_dynamic_element_tag(() => href() ? "a" : "button");
          element(
            node_2,
            () => href() ? "a" : "button",
            false,
            ($$element, $$anchor3) => {
              attribute_effect($$element, () => ({
                href: href(),
                type: href() ? void 0 : "button",
                role: href() ? "link" : "button",
                ...$$restProps,
                class: get(liClass)
              }));
              event("click", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keydown", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keyup", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("blur", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseenter", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseleave", $$element, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              var fragment_2 = comment();
              var node_3 = first_child(fragment_2);
              slot(node_3, $$props, "default", {}, null);
              append($$anchor3, fragment_2);
            },
            void 0,
            [22, 2]
          );
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    DropdownItem,
    21,
    0,
    { componentTag: "Wrapper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownItem = hmr(DropdownItem, () => DropdownItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownItem[HMR].source;
    set(DropdownItem[HMR].source, module.default[HMR].original);
  });
}
var DropdownItem_default = DropdownItem;

// node_modules/flowbite-svelte/dist/footer/Footer.svelte
Footer[FILENAME] = "node_modules/flowbite-svelte/dist/footer/Footer.svelte";
var root27 = add_locations(from_html(`<footer><!></footer>`), Footer[FILENAME], [[6, 0]]);
function Footer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["footerType"]);
  push($$props, false, Footer);
  let footerType = prop($$props, "footerType", 24, () => void 0);
  let footerClass = twMerge(strict_equals(footerType(), "sitemap") && "bg-gray-800", strict_equals(footerType(), "socialmedia") && "p-4 bg-white sm:p-6 dark:bg-gray-800", strict_equals(footerType(), "logo") && "p-4 bg-white rounded-lg shadow md:px-6 md:py-8 dark:bg-gray-800", strict_equals(footerType(), "default") && "p-4 bg-white rounded-lg shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800", $$sanitized_props.class);
  var $$exports = { ...legacy_api() };
  init();
  var footer = root27();
  attribute_effect(footer, () => ({ ...$$restProps, class: footerClass }));
  var node = child(footer);
  slot(node, $$props, "default", {}, null);
  reset(footer);
  append($$anchor, footer);
  return pop($$exports);
}
if (import.meta.hot) {
  Footer = hmr(Footer, () => Footer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Footer[HMR].source;
    set(Footer[HMR].source, module.default[HMR].original);
  });
}
var Footer_default = Footer;

// node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte
FooterBrand[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte";
var root_120 = add_locations(from_html(`<a><img/> <span> </span> <!></a>`), FooterBrand[FILENAME], [[16, 2, [[17, 4], [18, 4]]]]);
var root_212 = add_locations(from_html(`<img/>`), FooterBrand[FILENAME], [[22, 2]]);
function FooterBrand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "aClass",
    "spanClass",
    "imgClass",
    "href",
    "src",
    "alt",
    "name",
    "target"
  ]);
  push($$props, false, FooterBrand);
  let aClass = prop($$props, "aClass", 8, "flex items-center");
  let spanClass = prop($$props, "spanClass", 8, "self-center text-2xl font-semibold whitespace-nowrap dark:text-white");
  let imgClass = prop($$props, "imgClass", 8, "me-3 h-8");
  let href = prop($$props, "href", 8, "");
  let src = prop($$props, "src", 8, "");
  let alt = prop($$props, "alt", 8, "");
  let name = prop($$props, "name", 8, "");
  let target = prop($$props, "target", 8, "");
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_120();
      attribute_effect(a, () => ({ ...$$restProps, href: href(), target: target(), class: aCls }));
      var img = child(a);
      var span = sibling(img, 2);
      var text2 = child(span, true);
      reset(span);
      var node_1 = sibling(span, 2);
      slot(node_1, $$props, "default", {}, null);
      reset(a);
      template_effect(() => {
        set_attribute(img, "src", src());
        set_class(img, 1, clsx(imgCls));
        set_attribute(img, "alt", alt());
        set_class(span, 1, clsx(spanCls));
        set_text(text2, name());
      });
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var img_1 = root_212();
      attribute_effect(img_1, () => ({ ...$$restProps, src: src(), class: imgCls, alt: alt() }));
      replay_events(img_1);
      append($$anchor2, img_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      FooterBrand,
      15,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterBrand = hmr(FooterBrand, () => FooterBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterBrand[HMR].source;
    set(FooterBrand[HMR].source, module.default[HMR].original);
  });
}
var FooterBrand_default = FooterBrand;

// node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte
FooterCopyright[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte";
var root_121 = add_locations(from_html(`<a> </a>`), FooterCopyright[FILENAME], [[16, 4]]);
var root_213 = add_locations(from_html(`<span class="ms-1"> </span>`), FooterCopyright[FILENAME], [[20, 4]]);
var root28 = add_locations(from_html(`<span> <!> </span>`), FooterCopyright[FILENAME], [[13, 0]]);
function FooterCopyright($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "spanClass",
    "aClass",
    "year",
    "href",
    "by",
    "target",
    "copyrightMessage"
  ]);
  push($$props, false, FooterCopyright);
  let spanClass = prop($$props, "spanClass", 8, "block text-sm text-gray-500 sm:text-center dark:text-gray-400");
  let aClass = prop($$props, "aClass", 8, "hover:underline");
  let year = prop($$props, "year", 24, () => (/* @__PURE__ */ new Date()).getFullYear());
  let href = prop($$props, "href", 8, "");
  let by = prop($$props, "by", 8, "");
  let target = prop($$props, "target", 24, () => void 0);
  let copyrightMessage = prop($$props, "copyrightMessage", 8, "All Rights Reserved.");
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  var $$exports = { ...legacy_api() };
  init();
  var span = root28();
  var text2 = child(span);
  var node = sibling(text2);
  {
    var consequent = ($$anchor2) => {
      var a = root_121();
      attribute_effect(a, () => ({ ...$$restProps, href: href(), target: target(), class: aCls }));
      var text_1 = child(a, true);
      reset(a);
      template_effect(() => set_text(text_1, by()));
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var span_1 = root_213();
      var text_2 = child(span_1, true);
      reset(span_1);
      template_effect(() => set_text(text_2, by()));
      append($$anchor2, span_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      FooterCopyright,
      15,
      2
    );
  }
  var text_3 = sibling(node);
  reset(span);
  template_effect(() => {
    set_class(span, 1, clsx(spanCls));
    set_text(text2, `© ${year() ?? ""} `);
    set_text(text_3, ` ${copyrightMessage() ?? ""}`);
  });
  append($$anchor, span);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterCopyright = hmr(FooterCopyright, () => FooterCopyright[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterCopyright[HMR].source;
    set(FooterCopyright[HMR].source, module.default[HMR].original);
  });
}
var FooterCopyright_default = FooterCopyright;

// node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte
FooterIcon[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte";
var root_122 = add_locations(from_html(`<a><!></a>`), FooterIcon[FILENAME], [[9, 2]]);
function FooterIcon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href", "ariaLabel", "aClass", "target"]);
  push($$props, false, FooterIcon);
  let href = prop($$props, "href", 8, "");
  let ariaLabel = prop($$props, "ariaLabel", 8, "");
  let aClass = prop($$props, "aClass", 8, "text-gray-500 hover:text-gray-900 dark:hover:text-white");
  let target = prop($$props, "target", 24, () => void 0);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_122();
      attribute_effect(
        a,
        ($0) => ({
          ...$$restProps,
          href: href(),
          target: target(),
          "aria-label": ariaLabel(),
          class: $0
        }),
        [
          () => (deep_read_state(twMerge), deep_read_state(aClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(aClass(), $$sanitized_props.class)))
        ]
      );
      var node_1 = child(a);
      slot(node_1, $$props, "default", {}, null);
      reset(a);
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      slot(node_2, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (href()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      FooterIcon,
      8,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterIcon = hmr(FooterIcon, () => FooterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterIcon[HMR].source;
    set(FooterIcon[HMR].source, module.default[HMR].original);
  });
}
var FooterIcon_default = FooterIcon;

// node_modules/flowbite-svelte/dist/footer/FooterLink.svelte
FooterLink[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterLink.svelte";
var root29 = add_locations(from_html(`<li><a><!></a></li>`), FooterLink[FILENAME], [[10, 0, [[11, 2]]]]);
function FooterLink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["liClass", "aClass", "href", "target"]);
  push($$props, false, FooterLink);
  let liClass = prop($$props, "liClass", 8, "me-4 last:me-0 md:me-6");
  let aClass = prop($$props, "aClass", 8, "hover:underline");
  let href = prop($$props, "href", 8, "");
  let target = prop($$props, "target", 24, () => void 0);
  let liCls = twMerge(liClass(), $$sanitized_props.classLi);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  var $$exports = { ...legacy_api() };
  init();
  var li = root29();
  var a = child(li);
  attribute_effect(a, () => ({ ...$$restProps, href: href(), class: aCls, target: target() }));
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  reset(li);
  template_effect(() => set_class(li, 1, clsx(liCls)));
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterLink = hmr(FooterLink, () => FooterLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLink[HMR].source;
    set(FooterLink[HMR].source, module.default[HMR].original);
  });
}
var FooterLink_default = FooterLink;

// node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte
FooterLinkGroup[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte";
var root30 = add_locations(from_html(`<ul><!></ul>`), FooterLinkGroup[FILENAME], [[5, 0]]);
function FooterLinkGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["ulClass"]);
  push($$props, false, FooterLinkGroup);
  let ulClass = prop($$props, "ulClass", 8, "text-gray-600 dark:text-gray-400");
  var $$exports = { ...legacy_api() };
  init();
  var ul = root30();
  attribute_effect(ul, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(ulClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(ulClass(), $$sanitized_props.class)))
  ]);
  var node = child(ul);
  slot(node, $$props, "default", {}, null);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterLinkGroup = hmr(FooterLinkGroup, () => FooterLinkGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLinkGroup[HMR].source;
    set(FooterLinkGroup[HMR].source, module.default[HMR].original);
  });
}
var FooterLinkGroup_default = FooterLinkGroup;

// node_modules/flowbite-svelte/dist/forms/Label.svelte
Label[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Label.svelte";
var root_123 = add_locations(from_html(`<label><!></label>`), Label[FILENAME], [[21, 2]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "defaultClass", "show"]);
  push($$props, false, Label);
  const labelClass2 = mutable_source();
  let color = prop($$props, "color", 12, "gray");
  let defaultClass = prop($$props, "defaultClass", 8, "text-sm rtl:text-right font-medium block");
  let show = prop($$props, "show", 8, true);
  let node = mutable_source();
  const colorClasses2 = {
    gray: "text-gray-900 dark:text-gray-300",
    green: "text-green-700 dark:text-green-500",
    red: "text-red-700 dark:text-red-500",
    disabled: "text-gray-400 dark:text-gray-500 grayscale contrast-50"
  };
  legacy_pre_effect(() => (get(node), deep_read_state(color())), () => {
    var _a;
    const control = (_a = get(node)) == null ? void 0 : _a.control;
    color((control == null ? void 0 : control.disabled) ? "disabled" : color());
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(labelClass2, twMerge(defaultClass(), colorClasses2[color()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var label = root_123();
      attribute_effect(label, () => ({ ...$$restProps, class: get(labelClass2) }));
      var node_2 = child(label);
      slot(node_2, $$props, "default", {}, null);
      reset(label);
      bind_this(label, ($$value) => set(node, $$value), () => get(node));
      append($$anchor2, label);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      slot(node_3, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (show()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Label,
      19,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var Label_default = Label;

// node_modules/flowbite-svelte/dist/forms/Radio.svelte
Radio[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Radio.svelte";
var colorClasses = {
  primary: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600",
  secondary: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600",
  red: "text-red-600 focus:ring-red-500 dark:focus:ring-red-600",
  green: "text-green-600 focus:ring-green-500 dark:focus:ring-green-600",
  purple: "text-purple-600 focus:ring-purple-500 dark:focus:ring-purple-600",
  teal: "text-teal-600 focus:ring-teal-500 dark:focus:ring-teal-600",
  yellow: "text-yellow-400 focus:ring-yellow-500 dark:focus:ring-yellow-600",
  orange: "text-orange-500 focus:ring-orange-500 dark:focus:ring-orange-600",
  blue: "text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-600"
};
var labelClass = (inline, extraClass) => twMerge(inline ? "inline-flex" : "flex", "items-center", extraClass);
var inputClass = (custom, color, rounded, tinted, spacing, extraClass) => twMerge(
  "w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2",
  spacing,
  tinted ? "dark:bg-gray-600 dark:border-gray-500" : "dark:bg-gray-700 dark:border-gray-600",
  custom && "sr-only peer",
  rounded && "rounded",
  colorClasses[color],
  extraClass
);
var root_124 = add_locations(from_html(`<input/> <!>`, 1), Radio[FILENAME], [[33, 2]]);
function Radio($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "custom",
    "inline",
    "group",
    "value",
    "spacing",
    "checked"
  ]);
  push($$props, false, Radio);
  const binding_group = [];
  let color = prop($$props, "color", 8, "primary");
  let custom = prop($$props, "custom", 8, false);
  let inline = prop($$props, "inline", 8, false);
  let group = prop($$props, "group", 28, () => void 0);
  let value = prop($$props, "value", 8, "");
  let spacing = prop($$props, "spacing", 24, () => $$slots.default ? "me-2" : "");
  let checked = prop($$props, "checked", 8, false);
  let background = getContext("background");
  legacy_pre_effect(
    () => (deep_read_state(checked()), deep_read_state(group()), deep_read_state(value())),
    () => {
      if (checked() && strict_equals(group(), void 0)) {
        group(value());
      }
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(inline()), deep_read_state($$sanitized_props), untrack(() => labelClass(inline(), $$sanitized_props.class))));
    add_svelte_meta(
      () => Label_default(node, {
        get class() {
          return get($0);
        },
        show: untrack(() => $$slots.default),
        children: wrap_snippet(Radio, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_124();
          var input = first_child(fragment_1);
          attribute_effect(
            input,
            ($02) => ({ type: "radio", value: value(), ...$$restProps, class: $02 }),
            [
              () => (deep_read_state(custom()), deep_read_state(color()), deep_read_state(spacing()), deep_read_state($$sanitized_props), untrack(() => inputClass(custom(), color(), false, background, spacing(), $$slots.default || $$sanitized_props.class)))
            ],
            void 0,
            void 0,
            true
          );
          var node_1 = sibling(input, 2);
          slot(node_1, $$props, "default", {}, null);
          bind_group(
            binding_group,
            [],
            input,
            () => {
              value();
              return group();
            },
            group
          );
          event("blur", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("paste", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }),
      "component",
      Radio,
      32,
      0,
      { componentTag: "Label" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Radio = hmr(Radio, () => Radio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio[HMR].source;
    set(Radio[HMR].source, module.default[HMR].original);
  });
}
var Radio_default = Radio;

// node_modules/flowbite-svelte/dist/forms/Checkbox.svelte
Checkbox[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Checkbox.svelte";
var root_314 = add_locations(from_html(` <input/> <!>`, 1), Checkbox[FILENAME], [[19, 6]]);
var root_54 = add_locations(from_html(`<input/> <!>`, 1), Checkbox[FILENAME], [[25, 2]]);
function Checkbox($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "custom",
    "inline",
    "group",
    "choices",
    "value",
    "checked",
    "spacing",
    "groupLabelClass",
    "groupInputClass"
  ]);
  push($$props, false, Checkbox);
  const binding_group = [];
  let color = prop($$props, "color", 8, "primary");
  let custom = prop($$props, "custom", 8, false);
  let inline = prop($$props, "inline", 8, false);
  let group = prop($$props, "group", 28, () => []);
  let choices = prop($$props, "choices", 24, () => []);
  let value = prop($$props, "value", 8, "on");
  let checked = prop($$props, "checked", 28, () => void 0);
  let spacing = prop($$props, "spacing", 24, () => $$slots.default ? "me-2" : "");
  let groupLabelClass = prop($$props, "groupLabelClass", 8, "");
  let groupInputClass = prop($$props, "groupInputClass", 8, "");
  let background = getContext("background");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => each(node_1, 1, choices, index, ($$anchor3, $$item, i, $$array) => {
          let value2 = () => get($$item).value;
          value2();
          let label = () => get($$item).label;
          label();
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            let $0 = derived_safe_equal(() => (deep_read_state(labelClass), deep_read_state(inline()), deep_read_state(groupLabelClass()), untrack(() => labelClass(inline(), groupLabelClass()))));
            add_svelte_meta(
              () => Label_default(node_2, {
                get class() {
                  return get($0);
                },
                show: untrack(() => $$slots.default),
                for: `checkbox-${i}`,
                children: wrap_snippet(Checkbox, ($$anchor4, $$slotProps) => {
                  next();
                  var fragment_3 = root_314();
                  var text2 = first_child(fragment_3);
                  var input = sibling(text2);
                  attribute_effect(
                    input,
                    ($02) => ({
                      id: `checkbox-${i}`,
                      type: "checkbox",
                      value: value2(),
                      ...$$restProps,
                      class: $02
                    }),
                    [
                      () => (deep_read_state(inputClass), deep_read_state(custom()), deep_read_state(color()), deep_read_state(spacing()), deep_read_state(groupInputClass()), untrack(() => inputClass(custom(), color(), true, background, spacing(), groupInputClass())))
                    ],
                    void 0,
                    void 0,
                    true
                  );
                  var node_3 = sibling(input, 2);
                  slot(node_3, $$props, "default", {}, null);
                  template_effect(() => set_text(text2, `${label() ?? ""} `));
                  bind_group(
                    binding_group,
                    [],
                    input,
                    () => {
                      value2();
                      return group();
                    },
                    group
                  );
                  append($$anchor4, fragment_3);
                }),
                $$slots: { default: true }
              }),
              "component",
              Checkbox,
              18,
              4,
              { componentTag: "Label" }
            );
          }
          append($$anchor3, fragment_2);
        }),
        "each",
        Checkbox,
        17,
        2
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_4 = comment();
      var node_4 = first_child(fragment_4);
      {
        let $0 = derived_safe_equal(() => (deep_read_state(labelClass), deep_read_state(inline()), deep_read_state($$sanitized_props), untrack(() => labelClass(inline(), $$sanitized_props.class))));
        add_svelte_meta(
          () => Label_default(node_4, {
            get class() {
              return get($0);
            },
            show: untrack(() => $$slots.default),
            children: wrap_snippet(Checkbox, ($$anchor3, $$slotProps) => {
              var fragment_5 = root_54();
              var input_1 = first_child(fragment_5);
              attribute_effect(
                input_1,
                ($02) => ({ type: "checkbox", value: value(), ...$$restProps, class: $02 }),
                [
                  () => (deep_read_state(inputClass), deep_read_state(custom()), deep_read_state(color()), deep_read_state(spacing()), deep_read_state($$sanitized_props), untrack(() => inputClass(custom(), color(), true, background, spacing(), $$slots.default || $$sanitized_props.class)))
                ],
                void 0,
                void 0,
                true
              );
              var node_5 = sibling(input_1, 2);
              slot(node_5, $$props, "default", {}, null);
              bind_checked(input_1, checked);
              event("keyup", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keydown", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keypress", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("blur", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseover", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseenter", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseleave", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("paste", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", input_1, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              append($$anchor3, fragment_5);
            }),
            $$slots: { default: true }
          }),
          "component",
          Checkbox,
          24,
          0,
          { componentTag: "Label" }
        );
      }
      append($$anchor2, fragment_4);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state(choices()), untrack(() => choices().length > 0)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Checkbox,
      16,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Checkbox = hmr(Checkbox, () => Checkbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Checkbox[HMR].source;
    set(Checkbox[HMR].source, module.default[HMR].original);
  });
}
var Checkbox_default = Checkbox;

// node_modules/flowbite-svelte/dist/forms/CheckboxButton.svelte
CheckboxButton[FILENAME] = "node_modules/flowbite-svelte/dist/forms/CheckboxButton.svelte";
var root_125 = add_locations(from_html(`<input/> <!>`, 1), CheckboxButton[FILENAME], [[43, 2]]);
function CheckboxButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "value",
    "checked",
    "inline",
    "pill",
    "outline",
    "size",
    "color",
    "shadow"
  ]);
  push($$props, false, CheckboxButton);
  let group = prop($$props, "group", 28, () => []);
  let value = prop($$props, "value", 8, "on");
  let checked = prop($$props, "checked", 28, () => void 0);
  let inline = prop($$props, "inline", 8, true);
  let pill = prop($$props, "pill", 8, false);
  let outline = prop($$props, "outline", 8, false);
  let size = prop($$props, "size", 24, () => void 0);
  let color = prop($$props, "color", 24, () => void 0);
  let shadow = prop($$props, "shadow", 8, false);
  function init2(node, _group) {
    function update(_group2) {
      if (_group2 && strict_equals(value(), void 0, false)) {
        checked(_group2.includes(value()));
      }
    }
    update(_group);
    return { update };
  }
  function onChange() {
    if (group() && strict_equals(value(), void 0, false)) {
      const index2 = group().indexOf(value());
      if (strict_equals(checked(), void 0)) checked(index2 >= 0);
      if (checked()) {
        if (index2 < 0) {
          group().push(value());
          group(group());
        }
      } else {
        if (index2 >= 0) {
          group().splice(index2, 1);
          group(group());
        }
      }
    }
  }
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(inline()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge(inline() ? "inline-flex" : "flex", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  add_svelte_meta(
    () => Button_default(node_1, {
      get checked() {
        return checked();
      },
      get pill() {
        return pill();
      },
      get outline() {
        return outline();
      },
      get size() {
        return size();
      },
      get color() {
        return color();
      },
      get shadow() {
        return shadow();
      },
      get class() {
        return get(buttonClass);
      },
      children: wrap_snippet(CheckboxButton, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_125();
        var input = first_child(fragment_1);
        attribute_effect(
          input,
          () => ({
            type: "checkbox",
            value: strict_equals(value(), void 0, false) ? value() : "on",
            ...$$restProps,
            class: "sr-only"
          }),
          void 0,
          void 0,
          void 0,
          true
        );
        action(input, ($$node, $$action_arg) => init2 == null ? void 0 : init2($$node, $$action_arg), group);
        effect(() => bind_checked(input, checked));
        effect(() => event("keyup", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("keydown", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("keypress", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("focus", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("blur", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("click", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("mouseover", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("mouseenter", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("mouseleave", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("paste", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        effect(() => event("change", input, onChange));
        effect(() => event("change", input, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }));
        var node_2 = sibling(input, 2);
        slot(node_2, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    CheckboxButton,
    42,
    0,
    { componentTag: "Button" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  CheckboxButton = hmr(CheckboxButton, () => CheckboxButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckboxButton[HMR].source;
    set(CheckboxButton[HMR].source, module.default[HMR].original);
  });
}
var CheckboxButton_default = CheckboxButton;

// node_modules/flowbite-svelte/dist/forms/Dropzone.svelte
Dropzone[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Dropzone.svelte";
var root31 = add_locations(from_html(`<button type="button"><!></button> <label class="hidden"><input/></label>`, 1), Dropzone[FILENAME], [[18, 0], [21, 0, [[22, 2]]]]);
function Dropzone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "files", "defaultClass"]);
  push($$props, false, Dropzone);
  let value = prop($$props, "value", 12, "");
  let files = prop($$props, "files", 28, () => void 0);
  let defaultClass = prop($$props, "defaultClass", 8, "flex flex-col justify-center items-center w-full h-64 bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600");
  let input = mutable_source();
  function keydown(ev) {
    if ([" ", "Enter"].includes(ev.key)) {
      ev.preventDefault();
      get(input).click();
    }
  }
  function onClick(event2) {
    event2.preventDefault();
    get(input).click();
  }
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root31();
  var button = first_child(fragment);
  var node = child(button);
  slot(node, $$props, "default", {}, null);
  reset(button);
  var label = sibling(button, 2);
  var input_1 = child(label);
  attribute_effect(input_1, () => ({ ...$$restProps, type: "file" }), void 0, void 0, void 0, true);
  bind_this(input_1, ($$value) => set(input, $$value), () => get(input));
  reset(label);
  template_effect(($0) => set_class(button, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(defaultClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(defaultClass(), $$sanitized_props.class))))
  ]);
  event("keydown", button, keydown);
  event("click", button, onClick);
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dragover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("drop", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  bind_value(input_1, value);
  bind_files(input_1, files);
  event("change", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Dropzone = hmr(Dropzone, () => Dropzone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropzone[HMR].source;
    set(Dropzone[HMR].source, module.default[HMR].original);
  });
}
var Dropzone_default = Dropzone;

// node_modules/flowbite-svelte/dist/forms/Input.svelte
Input[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Input.svelte";
function clampSize(s) {
  return s && strict_equals(s, "xs") ? "sm" : strict_equals(s, "xl") ? "lg" : s;
}
var root_214 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[56, 4]]);
var root_315 = add_locations(from_html(`<input/>`), Input[FILENAME], [[61, 4]]);
var root_47 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[64, 2]]);
var root_126 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Input[FILENAME], []);
function Input($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "type",
    "value",
    "size",
    "clearable",
    "defaultClass",
    "color",
    "floatClass"
  ]);
  push($$props, false, Input);
  const _size = mutable_source();
  let type = prop($$props, "type", 8, "text");
  let value = prop($$props, "value", 28, () => void 0);
  let size = prop($$props, "size", 24, () => void 0);
  let clearable = prop($$props, "clearable", 8, false);
  let defaultClass = prop($$props, "defaultClass", 8, "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right");
  let color = prop($$props, "color", 8, "base");
  let floatClass = prop($$props, "floatClass", 8, "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400");
  const dispatcher = createEventDispatcher();
  const borderClasses = {
    base: "border border-gray-300 dark:border-gray-600",
    tinted: "border border-gray-300 dark:border-gray-500",
    green: "border border-green-500 dark:border-green-400",
    red: "border border-red-500 dark:border-red-400"
  };
  const ringClasses = {
    base: "focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500",
    green: "focus:ring-green-500 focus:border-green-500 dark:focus:border-green-500 dark:focus:ring-green-500",
    red: "focus:ring-red-500 focus:border-red-500 dark:focus:ring-red-500 dark:focus:border-red-500"
  };
  const colorClasses2 = {
    base: "bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400",
    tinted: "bg-gray-50 text-gray-900 dark:bg-gray-600 dark:text-white dark:placeholder-gray-400",
    green: "bg-green-50 text-green-900 placeholder-green-700 dark:text-green-400 dark:placeholder-green-500 dark:bg-gray-700",
    red: "bg-red-50 text-red-900 placeholder-red-700 dark:text-red-500 dark:placeholder-red-500 dark:bg-gray-700"
  };
  let background = getContext("background");
  let group = getContext("group");
  const textSizes = { sm: "sm:text-xs", md: "text-sm", lg: "sm:text-base" };
  const leftPadding = { sm: "ps-9", md: "ps-10", lg: "ps-11" };
  const rightPadding = { sm: "pe-9", md: "pe-10", lg: "pe-11" };
  const inputPadding = { sm: "p-2", md: "p-2.5", lg: "p-3" };
  let inputClass2 = mutable_source();
  const clearAll = (e) => {
    e.stopPropagation();
    value(void 0);
    dispatcher("change");
  };
  legacy_pre_effect(() => deep_read_state(size()), () => {
    set(_size, size() || clampSize(group == null ? void 0 : group.size) || "md");
  });
  legacy_pre_effect(
    () => (deep_read_state(color()), twMerge, deep_read_state(defaultClass()), get(_size), deep_read_state(clearable()), deep_read_state($$sanitized_props)),
    () => {
      const _color = strict_equals(color(), "base") && background ? "tinted" : color();
      set(inputClass2, twMerge([
        defaultClass(),
        inputPadding[get(_size)],
        $$slots.left && leftPadding[get(_size)] || (clearable() || $$slots.right) && rightPadding[get(_size)],
        ringClasses[color()],
        colorClasses2[_color],
        borderClasses[_color],
        textSizes[get(_size)],
        group || "rounded-lg",
        group && "first:rounded-s-lg last:rounded-e-lg",
        group && "[&:not(:first-child)]:-ms-px",
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Wrapper_default(node, {
      class: "relative w-full",
      show: untrack(() => $$slots.left || $$slots.right),
      children: wrap_snippet(Input, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_126();
        var node_1 = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var div = root_214();
            var node_2 = child(div);
            slot(node_2, $$props, "left", {}, null);
            reset(div);
            template_effect(($0) => set_class(div, 1, `${$0 ?? ""} start-0 ps-2.5 pointer-events-none`), [
              () => (deep_read_state(twMerge), deep_read_state(floatClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(floatClass(), $$sanitized_props.classLeft)))
            ]);
            append($$anchor3, div);
          };
          add_svelte_meta(
            () => if_block(node_1, ($$render) => {
              if (untrack(() => $$slots.left)) $$render(consequent);
            }),
            "if",
            Input,
            55,
            2
          );
        }
        var node_3 = sibling(node_1, 2);
        {
          let $0 = derived_safe_equal(() => (deep_read_state($$restProps), get(inputClass2), untrack(() => ({ ...$$restProps, class: get(inputClass2) }))));
          slot(
            node_3,
            $$props,
            "default",
            {
              get props() {
                return get($0);
              }
            },
            ($$anchor3) => {
              var input = root_315();
              attribute_effect(
                input,
                () => ({
                  ...$$restProps,
                  ...{ type: type() },
                  class: get(inputClass2)
                }),
                void 0,
                void 0,
                void 0,
                true
              );
              bind_value(input, value);
              event("blur", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("contextmenu", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keydown", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keypress", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keyup", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseover", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseenter", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseleave", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("paste", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("input", input, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              append($$anchor3, input);
            }
          );
        }
        var node_4 = sibling(node_3, 2);
        {
          var consequent_1 = ($$anchor3) => {
            var div_1 = root_47();
            var node_5 = child(div_1);
            slot(node_5, $$props, "right", {}, null);
            reset(div_1);
            template_effect(($0) => set_class(div_1, 1, `${$0 ?? ""} end-0 pe-2.5`), [
              () => (deep_read_state(twMerge), deep_read_state(floatClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(floatClass(), $$sanitized_props.classRight)))
            ]);
            append($$anchor3, div_1);
          };
          add_svelte_meta(
            () => if_block(node_4, ($$render) => {
              if (untrack(() => $$slots.right)) $$render(consequent_1);
            }),
            "if",
            Input,
            63,
            2
          );
        }
        var node_6 = sibling(node_4, 2);
        {
          var consequent_2 = ($$anchor3) => {
            var fragment_2 = comment();
            var node_7 = first_child(fragment_2);
            {
              let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state(floatClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(floatClass(), $$sanitized_props.classRight))));
              add_svelte_meta(
                () => CloseButton_default(node_7, {
                  get size() {
                    return size();
                  },
                  color: "none",
                  get class() {
                    return ` ${get($0) ?? ""} focus:ring-0 end-6 focus:ring-gray-400 dark:text-white`;
                  },
                  $$events: { click: clearAll }
                }),
                "component",
                Input,
                69,
                4,
                { componentTag: "CloseButton" }
              );
            }
            append($$anchor3, fragment_2);
          };
          add_svelte_meta(
            () => if_block(node_6, ($$render) => {
              if (deep_read_state(clearable()), deep_read_state(value()), untrack(() => clearable() && value() && `${value()}`.length > 0)) $$render(consequent_2);
            }),
            "if",
            Input,
            68,
            2
          );
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    Input,
    54,
    0,
    { componentTag: "Wrapper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Input = hmr(Input, () => Input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Input[HMR].source;
    set(Input[HMR].source, module.default[HMR].original);
  });
}
var Input_default = Input;

// node_modules/flowbite-svelte/dist/forms/Fileupload.svelte
Fileupload[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Fileupload.svelte";
var root_127 = add_locations(from_html(`<input/>`), Fileupload[FILENAME], [[9, 2]]);
function Fileupload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "files", "inputClass"]);
  push($$props, false, Fileupload);
  let value = prop($$props, "value", 12, "");
  let files = prop($$props, "files", 28, () => void 0);
  let inputClass2 = prop($$props, "inputClass", 8, "border !p-0 dark:text-gray-400");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state(inputClass2()), deep_read_state($$sanitized_props), untrack(() => twMerge(inputClass2(), $$sanitized_props.class))));
    add_svelte_meta(
      () => Input_default(node, spread_props(() => $$restProps, {
        get class() {
          return get($0);
        },
        children: invalid_default_snippet,
        $$slots: {
          default: ($$anchor2, $$slotProps) => {
            const props = derived_safe_equal(() => $$slotProps.props);
            var input = root_127();
            attribute_effect(input, () => ({ type: "file", ...get(props) }), void 0, void 0, void 0, true);
            event("change", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("keyup", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("keydown", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("keypress", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("focus", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("blur", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("click", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseover", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseenter", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("mouseleave", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            event("paste", input, function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            });
            bind_value(input, value);
            bind_files(input, files);
            append($$anchor2, input);
          }
        }
      })),
      "component",
      Fileupload,
      8,
      0,
      { componentTag: "Input" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Fileupload = hmr(Fileupload, () => Fileupload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fileupload[HMR].source;
    set(Fileupload[HMR].source, module.default[HMR].original);
  });
}
var Fileupload_default = Fileupload;

// node_modules/flowbite-svelte/dist/utils/generateId.js
var n = Date.now();
function generateId_default() {
  return (++n).toString(36);
}

// node_modules/flowbite-svelte/dist/forms/FloatingLabelInput.svelte
FloatingLabelInput[FILENAME] = "node_modules/flowbite-svelte/dist/forms/FloatingLabelInput.svelte";
var root32 = add_locations(from_html(`<div><input/> <label><!></label></div>`), FloatingLabelInput[FILENAME], [[64, 0, [[65, 2], [67, 2]]]]);
function FloatingLabelInput($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["id", "style", "type", "size", "color", "value"]);
  push($$props, false, FloatingLabelInput);
  let id = prop($$props, "id", 24, generateId_default);
  let style = prop($$props, "style", 8, "standard");
  let type = prop($$props, "type", 8, "text");
  let size = prop($$props, "size", 8, "default");
  let color = prop($$props, "color", 8, "base");
  let value = prop($$props, "value", 28, () => void 0);
  const divClasses = {
    filled: "relative",
    outlined: "relative",
    standard: "relative z-0"
  };
  const inputSizes = {
    filled: { small: "px-2.5 pb-1.5 pt-4", default: "px-2.5 pb-2.5 pt-5" },
    outlined: { small: "px-2.5 pb-1.5 pt-3", default: "px-2.5 pb-2.5 pt-4" },
    standard: { small: "py-2 px-0", default: "py-2.5 px-0" }
  };
  const labelSizes = {
    filled: { small: "top-3", default: "top-4" },
    outlined: { small: "top-1", default: "top-2" },
    standard: { small: "top-3", default: "top-3" }
  };
  const inputClasses = {
    filled: "block rounded-t-lg w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 appearance-none dark:text-white focus:outline-none focus:ring-0 peer",
    outlined: "block w-full text-sm text-gray-900 bg-transparent rounded-lg border appearance-none dark:text-white  focus:outline-none focus:ring-0 peer",
    standard: "block w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 appearance-none dark:text-white  focus:outline-none focus:ring-0 peer"
  };
  const labelClasses = {
    filled: "absolute text-sm duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-left rtl:origin-right start-2.5  peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4",
    outlined: "absolute text-sm duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-left rtl:origin-right bg-white dark:bg-gray-900 px-2 peer-focus:px-2  peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 start-1",
    standard: "absolute text-sm duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-left rtl:origin-right peer-focus:start-0  peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
  };
  const inputColorClasses = {
    base: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
    green: "border-green-600 dark:border-green-500 dark:focus:border-green-500 focus:border-green-600",
    red: "border-red-600 dark:border-red-500 dark:focus:border-red-500  focus:border-red-600"
  };
  const labelColorClasses = {
    base: "text-gray-500 dark:text-gray-400 peer-focus:text-primary-600 peer-focus:dark:text-primary-500",
    green: "text-green-600 dark:text-green-500",
    red: "text-red-600 dark:text-red-500"
  };
  var $$exports = { ...legacy_api() };
  init();
  var div = root32();
  var input = child(div);
  attribute_effect(
    input,
    ($0) => ({
      id: id(),
      ...$$restProps,
      ...{ type: type() },
      placeholder: " ",
      class: $0
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(style()), deep_read_state(color()), deep_read_state(size()), deep_read_state($$sanitized_props), untrack(() => twMerge(inputClasses[style()], inputColorClasses[color()], inputSizes[style()][size()], $$sanitized_props.classInput)))
    ],
    void 0,
    void 0,
    true
  );
  var label = sibling(input, 2);
  var node = child(label);
  slot(node, $$props, "default", {}, null);
  reset(label);
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      set_attribute(label, "for", id());
      set_class(label, 1, $1);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(style()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClasses[style()], $$sanitized_props.classDiv)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(style()), deep_read_state(color()), deep_read_state(size()), deep_read_state($$sanitized_props), untrack(() => twMerge(labelClasses[style()], labelColorClasses[color()], labelSizes[style()][size()], $$sanitized_props.classLabel))))
    ]
  );
  bind_value(input, value);
  event("blur", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("input", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("paste", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  FloatingLabelInput = hmr(FloatingLabelInput, () => FloatingLabelInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FloatingLabelInput[HMR].source;
    set(FloatingLabelInput[HMR].source, module.default[HMR].original);
  });
}
var FloatingLabelInput_default = FloatingLabelInput;

// node_modules/flowbite-svelte/dist/forms/Helper.svelte
Helper[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Helper.svelte";
var root33 = add_locations(from_html(`<p><!></p>`), Helper[FILENAME], [[12, 0]]);
function Helper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["helperClass", "color"]);
  push($$props, false, Helper);
  let helperClass = prop($$props, "helperClass", 8, "text-xs font-normal text-gray-500 dark:text-gray-300");
  let color = prop($$props, "color", 8, "gray");
  const colorClasses2 = {
    gray: "text-gray-900 dark:text-gray-300",
    green: "text-green-700 dark:text-green-500",
    red: "text-red-700 dark:text-red-500",
    disabled: "text-gray-400 dark:text-gray-500 grayscale contrast-50"
  };
  var $$exports = { ...legacy_api() };
  init();
  var p = root33();
  attribute_effect(p, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(helperClass()), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge(helperClass(), colorClasses2[color()], $$sanitized_props.class)))
  ]);
  var node = child(p);
  slot(node, $$props, "default", {}, null);
  reset(p);
  append($$anchor, p);
  return pop($$exports);
}
if (import.meta.hot) {
  Helper = hmr(Helper, () => Helper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Helper[HMR].source;
    set(Helper[HMR].source, module.default[HMR].original);
  });
}
var Helper_default = Helper;

// node_modules/flowbite-svelte/dist/forms/InputAddon.svelte
InputAddon[FILENAME] = "node_modules/flowbite-svelte/dist/forms/InputAddon.svelte";
var root34 = add_locations(from_html(`<div><!></div>`), InputAddon[FILENAME], [[25, 0]]);
function InputAddon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size"]);
  push($$props, false, InputAddon);
  const _size = mutable_source();
  const divClass = mutable_source();
  let size = prop($$props, "size", 24, () => void 0);
  let background = getContext("background");
  let group = getContext("group");
  const borderClasses = {
    base: "border-gray-300 dark:border-gray-600",
    tinted: "border-gray-300 dark:border-gray-500"
  };
  const darkBgClasses = {
    base: "dark:bg-gray-600 dark:text-gray-400",
    tinted: "dark:bg-gray-500 dark:text-gray-300"
  };
  const divider = {
    base: "dark:border-e-gray-700 dark:last:border-e-gray-600",
    tinted: "dark:border-e-gray-600 dark:last:border-e-gray-500"
  };
  const textSizes = { sm: "sm:text-xs", md: "text-sm", lg: "sm:text-base" };
  const prefixPadding = { sm: "px-2", md: "px-3", lg: "px-4" };
  legacy_pre_effect(() => (deep_read_state(size()), clampSize), () => {
    set(_size, size() || clampSize(group == null ? void 0 : group.size) || "md");
  });
  legacy_pre_effect(() => (twMerge, get(_size), deep_read_state($$sanitized_props)), () => {
    set(divClass, twMerge(textSizes[get(_size)], prefixPadding[get(_size)], "text-gray-500 bg-gray-200", background ? darkBgClasses.tinted : darkBgClasses.base, background ? divider.tinted : divider.base, background ? borderClasses["tinted"] : borderClasses["base"], "inline-flex items-center border", group && "[&:not(:first-child)]:-ms-px", "first:rounded-s-lg last:rounded-e-lg", $$sanitized_props.class));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root34();
  attribute_effect(div, () => ({ ...$$restProps, class: get(divClass) }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  InputAddon = hmr(InputAddon, () => InputAddon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputAddon[HMR].source;
    set(InputAddon[HMR].source, module.default[HMR].original);
  });
}
var InputAddon_default = InputAddon;

// node_modules/flowbite-svelte/dist/forms/MultiSelect.svelte
MultiSelect[FILENAME] = "node_modules/flowbite-svelte/dist/forms/MultiSelect.svelte";
var root_128 = add_locations(from_html(`<option> </option>`), MultiSelect[FILENAME], [[105, 4]]);
var root_215 = add_locations(from_html(`<span class="text-gray-400"> </span>`), MultiSelect[FILENAME], [[111, 4]]);
var root_9 = add_locations(from_html(`<div role="presentation"> </div>`), MultiSelect[FILENAME], [[138, 8]]);
var root_82 = add_locations(from_html(`<div role="presentation"></div>`), MultiSelect[FILENAME], [[135, 4]]);
var root35 = add_locations(from_html(`<select></select> <div tabindex="0" role="listbox"><!> <span class="flex gap-2 flex-wrap"><!></span> <div class="flex ms-auto gap-2 items-center"><!> <div class="w-[1px] bg-gray-300 dark:bg-gray-600"></div> <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg></div> <!></div>`, 1), MultiSelect[FILENAME], [
  [103, 0],
  [
    109,
    0,
    [[113, 2], [124, 2, [[128, 4], [129, 4, [[130, 6]]]]]]
  ]
]);
function MultiSelect($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "items",
    "value",
    "size",
    "dropdownClass",
    "placeholder",
    "disabled"
  ]);
  push($$props, false, MultiSelect);
  const selectItems = mutable_source();
  const activeItem = mutable_source();
  let items = prop($$props, "items", 24, () => []);
  let value = prop($$props, "value", 28, () => []);
  let size = prop($$props, "size", 8, "md");
  let dropdownClass = prop($$props, "dropdownClass", 8, "");
  let placeholder = prop($$props, "placeholder", 8, "");
  let disabled = prop($$props, "disabled", 8, false);
  const dispatcher = createEventDispatcher();
  let show = mutable_source(false);
  const sizes = {
    sm: "px-2 py-1 min-h-[2.4rem]",
    md: "px-3 py-1 min-h-[2.7rem]",
    lg: "px-4 py-2 min-h-[3.2rem]"
  };
  const multiSelectClass = "relative border border-gray-300 flex items-center rounded-lg gap-2 dark:border-gray-600 ring-primary-500 dark:ring-primary-500 focus-visible:outline-none";
  let multiSelectDropdown = mutable_source();
  const itemsClass = "py-2 px-3 rounded-lg text-gray-600 hover:text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:text-gray-300 dark:hover:bg-gray-600";
  const itemsSelectClass = "bg-gray-100 text-black font-semibold hover:text-black dark:text-white dark:bg-gray-600 dark:hover:text-white";
  let activeIndex = mutable_source(null);
  const activeItemClass = "bg-primary-100 text-primary-500 dark:bg-primary-500 dark:text-primary-100 hover:bg-primary-100 dark:hover:bg-primary-500 hover:text-primary-600 dark:hover:text-primary-100";
  const selectOption = (select) => {
    if (disabled()) return;
    if (select.disabled) return;
    if (value().includes(select.value)) {
      clearThisOption(select);
    } else if (!value().includes(select.value)) {
      value([...value(), select.value]);
      dispatcher("change");
    }
  };
  const clearAll = (e) => {
    if (disabled()) return;
    e.stopPropagation();
    value([]);
    dispatcher("change");
  };
  const clearThisOption = (select) => {
    if (disabled()) return;
    if (value().includes(select.value)) {
      value(value().filter((o) => strict_equals(o, select.value, false)));
      dispatcher("change");
    }
  };
  function handleEscape() {
    if (disabled()) return;
    if (get(show)) {
      set(show, false);
    }
  }
  function handleToggleActiveItem() {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(activeItem), null, false)) selectOption(get(activeItem));
    }
  }
  function handleArrowUpDown(offset2) {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(activeIndex), null, false)) {
        set(activeIndex, get(activeIndex) + offset2);
      } else {
        set(activeIndex, 0);
      }
    }
  }
  function handleKeyDown(event2) {
    if (disabled()) return;
    switch (event2.key) {
      case "Escape":
        handleEscape();
        break;
      case "Enter":
      case " ":
        handleToggleActiveItem();
        break;
      case "ArrowDown":
        handleArrowUpDown(1);
        break;
      case "ArrowUp":
        handleArrowUpDown(-1);
        break;
      default:
        return;
    }
    event2.stopPropagation();
    event2.preventDefault();
  }
  legacy_pre_effect(() => (deep_read_state(items()), deep_read_state(value())), () => {
    set(selectItems, items().filter((x) => value().includes(x.value)));
  });
  legacy_pre_effect(() => (twMerge, deep_read_state(dropdownClass())), () => {
    set(multiSelectDropdown, twMerge("absolute z-50 p-3 flex flex-col gap-1 max-h-64 bg-white border border-gray-300 dark:bg-gray-700 dark:border-gray-600 start-0 top-[calc(100%+1rem)] rounded-lg cursor-pointer overflow-y-scroll w-full", dropdownClass()));
  });
  legacy_pre_effect(() => (get(activeIndex), deep_read_state(items())), () => {
    set(activeItem, strict_equals(get(activeIndex), null, false) ? items()[(get(activeIndex) % items().length + items().length) % items().length] : null);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root35();
  var select_1 = first_child(fragment);
  attribute_effect(select_1, () => ({ ...$$restProps, value: value(), hidden: true, multiple: true }));
  add_svelte_meta(
    () => each(select_1, 5, items, index, ($$anchor2, $$item, $$index, $$array) => {
      let value2 = () => get($$item).value;
      value2();
      let name = () => get($$item).name;
      name();
      let disabled2 = () => get($$item).disabled;
      disabled2();
      var option = root_128();
      var text2 = child(option, true);
      reset(option);
      var option_value = {};
      template_effect(() => {
        option.disabled = disabled2();
        set_text(text2, name());
        if (option_value !== (option_value = value2())) {
          option.value = (option.__value = value2()) ?? "";
        }
      });
      append($$anchor2, option);
    }),
    "each",
    MultiSelect,
    104,
    2
  );
  reset(select_1);
  var div = sibling(select_1, 2);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var span = root_215();
      var text_1 = child(span, true);
      reset(span);
      template_effect(() => set_text(text_1, placeholder()));
      append($$anchor2, span);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(selectItems), untrack(() => !get(selectItems).length)) $$render(consequent);
      }),
      "if",
      MultiSelect,
      110,
      2
    );
  }
  var span_1 = sibling(node, 2);
  var node_1 = child(span_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      validate_each_keys(() => get(selectItems), (item) => item.name);
      add_svelte_meta(
        () => each(node_2, 1, () => get(selectItems), (item) => item.name, ($$anchor3, item) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          slot(
            node_3,
            $$props,
            "default",
            {
              get item() {
                return get(item);
              },
              clear: () => clearThisOption(get(item))
            },
            ($$anchor4) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              {
                let $0 = derived_safe_equal(() => strict_equals(size(), "lg"));
                let $1 = derived_safe_equal(() => disabled() ? "pointer-events-none" : void 0);
                add_svelte_meta(
                  () => Badge_default(node_4, {
                    color: "dark",
                    get large() {
                      return get($0);
                    },
                    dismissable: true,
                    params: { duration: 100 },
                    get class() {
                      return get($1);
                    },
                    $$events: { close: () => clearThisOption(get(item)) },
                    children: wrap_snippet(MultiSelect, ($$anchor5, $$slotProps) => {
                      next();
                      var text_2 = text();
                      template_effect(() => set_text(text_2, (get(item), untrack(() => get(item).name))));
                      append($$anchor5, text_2);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  MultiSelect,
                  117,
                  10,
                  { componentTag: "Badge" }
                );
              }
              append($$anchor4, fragment_3);
            }
          );
          append($$anchor3, fragment_2);
        }),
        "each",
        MultiSelect,
        115,
        6
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (get(selectItems), untrack(() => get(selectItems).length)) $$render(consequent_1);
      }),
      "if",
      MultiSelect,
      114,
      4
    );
  }
  reset(span_1);
  var div_1 = sibling(span_1, 2);
  var node_5 = child(div_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_6 = first_child(fragment_5);
      {
        let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state(disabled()), untrack(() => twMerge("p-0 focus:ring-gray-400 dark:text-white", disabled() && "cursor-not-allowed"))));
        add_svelte_meta(
          () => CloseButton_default(node_6, {
            get size() {
              return size();
            },
            color: "none",
            get class() {
              return get($0);
            },
            get disabled() {
              return disabled();
            },
            $$events: { click: clearAll }
          }),
          "component",
          MultiSelect,
          126,
          6,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment_5);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if (get(selectItems), untrack(() => get(selectItems).length)) $$render(consequent_2);
      }),
      "if",
      MultiSelect,
      125,
      4
    );
  }
  var svg = sibling(node_5, 4);
  var path = child(svg);
  reset(svg);
  reset(div_1);
  var node_7 = sibling(div_1, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var div_2 = root_82();
      validate_each_keys(items, (item) => item.name);
      add_svelte_meta(
        () => each(div_2, 5, items, (item) => item.name, ($$anchor3, item) => {
          var div_3 = root_9();
          var text_3 = child(div_3, true);
          reset(div_3);
          template_effect(
            ($0) => {
              set_class(div_3, 1, $0);
              set_text(text_3, (get(item), untrack(() => get(item).name)));
            },
            [
              () => clsx((deep_read_state(twMerge), get(selectItems), get(item), get(activeItem), deep_read_state(disabled()), untrack(() => twMerge(itemsClass, get(selectItems).includes(get(item)) && itemsSelectClass, strict_equals(get(activeItem), get(item)) && activeItemClass, disabled() && "pointer-events-none", get(item).disabled && "opacity-50 cursor-not-allowed"))))
            ]
          );
          event("click", div_3, () => selectOption(get(item)));
          append($$anchor3, div_3);
        }),
        "each",
        MultiSelect,
        136,
        6
      );
      reset(div_2);
      template_effect(() => set_class(div_2, 1, clsx(get(multiSelectDropdown))));
      event("click", div_2, stopPropagation(function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }));
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if (get(show)) $$render(consequent_3);
      }),
      "if",
      MultiSelect,
      134,
      2
    );
  }
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      set_class(svg, 0, $1);
      set_attribute(path, "d", get(show) ? "m1 5 4-4 4 4" : "m9 1-4 4-4-4");
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(size()), deep_read_state($$sanitized_props), deep_read_state(disabled()), untrack(() => twMerge(multiSelectClass, sizes[size()], $$sanitized_props.class, !disabled() && "focus-within:ring-1 focus-within:border-primary-500 dark:focus-within:border-primary-500", disabled() && "opacity-50 cursor-not-allowed")))),
      () => clsx((deep_read_state(twMerge), deep_read_state(disabled()), untrack(() => twMerge("cursor-pointer h-3 w-3 ms-1 text-gray-800 dark:text-white", disabled() && "cursor-not-allowed"))))
    ]
  );
  event("input", select_1, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", div, () => !disabled() && set(show, !get(show)));
  event("focusout", div, () => !disabled() && set(show, false));
  event("keydown", div, handleKeyDown);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  MultiSelect = hmr(MultiSelect, () => MultiSelect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MultiSelect[HMR].source;
    set(MultiSelect[HMR].source, module.default[HMR].original);
  });
}
var MultiSelect_default = MultiSelect;

// node_modules/flowbite-svelte/dist/forms/NumberInput.svelte
NumberInput[FILENAME] = "node_modules/flowbite-svelte/dist/forms/NumberInput.svelte";
var root_129 = add_locations(from_html(`<input/>`), NumberInput[FILENAME], [[6, 2]]);
function NumberInput($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value"]);
  push($$props, false, NumberInput);
  let value = prop($$props, "value", 12, 0);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Input_default(node, spread_props(() => $$restProps, {
      children: invalid_default_snippet,
      $$slots: {
        default: ($$anchor2, $$slotProps) => {
          const props = derived_safe_equal(() => $$slotProps.props);
          var input = root_129();
          attribute_effect(input, () => ({ ...get(props), type: "number" }), void 0, void 0, void 0, true);
          bind_value(input, value);
          event("blur", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("contextmenu", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("paste", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("input", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor2, input);
        }
      }
    })),
    "component",
    NumberInput,
    5,
    0,
    { componentTag: "Input" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  NumberInput = hmr(NumberInput, () => NumberInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NumberInput[HMR].source;
    set(NumberInput[HMR].source, module.default[HMR].original);
  });
}
var NumberInput_default = NumberInput;

// node_modules/flowbite-svelte/dist/forms/RadioButton.svelte
RadioButton[FILENAME] = "node_modules/flowbite-svelte/dist/forms/RadioButton.svelte";
var root_130 = add_locations(from_html(`<input/> <!>`, 1), RadioButton[FILENAME], [[16, 2]]);
function RadioButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "group",
    "value",
    "inline",
    "pill",
    "outline",
    "size",
    "color",
    "shadow"
  ]);
  push($$props, false, RadioButton);
  const binding_group = [];
  let group = prop($$props, "group", 12, "");
  let value = prop($$props, "value", 8, "");
  let inline = prop($$props, "inline", 8, true);
  let pill = prop($$props, "pill", 8, false);
  let outline = prop($$props, "outline", 8, false);
  let size = prop($$props, "size", 24, () => void 0);
  let color = prop($$props, "color", 24, () => void 0);
  let shadow = prop($$props, "shadow", 8, false);
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(inline()), deep_read_state($$sanitized_props)),
    () => {
      set(buttonClass, twMerge(inline() ? "inline-flex" : "flex", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => strict_equals(value(), group()));
    add_svelte_meta(
      () => Button_default(node, {
        get checked() {
          return get($0);
        },
        get pill() {
          return pill();
        },
        get outline() {
          return outline();
        },
        get size() {
          return size();
        },
        get color() {
          return color();
        },
        get shadow() {
          return shadow();
        },
        get class() {
          return get(buttonClass);
        },
        children: wrap_snippet(RadioButton, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_130();
          var input = first_child(fragment_1);
          attribute_effect(
            input,
            () => ({
              type: "radio",
              value: value(),
              ...$$restProps,
              class: "sr-only"
            }),
            void 0,
            void 0,
            void 0,
            true
          );
          var node_1 = sibling(input, 2);
          slot(node_1, $$props, "default", {}, null);
          bind_group(
            binding_group,
            [],
            input,
            () => {
              value();
              return group();
            },
            group
          );
          event("keyup", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("blur", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("paste", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", input, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }),
      "component",
      RadioButton,
      15,
      0,
      { componentTag: "Button" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  RadioButton = hmr(RadioButton, () => RadioButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioButton[HMR].source;
    set(RadioButton[HMR].source, module.default[HMR].original);
  });
}
var RadioButton_default = RadioButton;

// node_modules/flowbite-svelte/dist/forms/Range.svelte
Range[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Range.svelte";
var root36 = add_locations(from_html(`<input/>`), Range[FILENAME], [[13, 0]]);
function Range($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["value", "size"]);
  push($$props, false, Range);
  let value = prop($$props, "value", 12, 0);
  let size = prop($$props, "size", 8, "md");
  const sizes = { sm: "h-1 range-sm", md: "h-2", lg: "h-3 range-lg" };
  let inputClass2 = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state($$sanitized_props)),
    () => {
      set(inputClass2, twMerge("w-full bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700", sizes[size()] ?? sizes.md, $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var input = root36();
  attribute_effect(input, () => ({ type: "range", ...$$restProps, class: get(inputClass2) }), void 0, void 0, void 0, true);
  bind_value(input, value);
  event("change", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", input, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, input);
  return pop($$exports);
}
if (import.meta.hot) {
  Range = hmr(Range, () => Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Range[HMR].source;
    set(Range[HMR].source, module.default[HMR].original);
  });
}
var Range_default = Range;

// node_modules/flowbite-svelte/dist/forms/Search.svelte
Search[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Search.svelte";
var root_216 = add_locations(from_svg(`<svg slot="left" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>`), Search[FILENAME], [[15, 4, [[16, 6]]]]);
var root_316 = add_locations(from_html(`<div class="flex absolute inset-y-0 end-0 items-center text-gray-500 dark:text-gray-400"><!></div>`), Search[FILENAME], [[27, 4]]);
var root_131 = add_locations(from_html(`<!> <!>`, 1), Search[FILENAME], []);
function Search($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "placeholder", "value"]);
  push($$props, false, Search);
  var $$ownership_validator = create_ownership_validator($$props);
  let size = prop($$props, "size", 8, "lg");
  let placeholder = prop($$props, "placeholder", 8, "Search");
  let value = prop($$props, "value", 28, () => void 0);
  const sizes = { sm: "w-3.5 h-3.5", md: "w-5 h-5", lg: "w-6 h-6" };
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Wrapper_default(node, {
      class: "relative w-full",
      show: untrack(() => $$slots.default),
      children: wrap_snippet(Search, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_131();
        var node_1 = first_child(fragment_1);
        {
          $$ownership_validator.binding("value", Input_default, value);
          add_svelte_meta(
            () => Input_default(node_1, spread_props(
              {
                type: "search",
                get placeholder() {
                  return placeholder();
                },
                get size() {
                  return size();
                }
              },
              () => $$restProps,
              {
                get class() {
                  return deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class);
                },
                get value() {
                  return value();
                },
                set value($$value) {
                  value($$value);
                },
                $$events: {
                  blur($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  change($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  input($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  click($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  focus($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  keydown($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  keypress($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  keyup($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  mouseenter($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  mouseleave($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  mouseover($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  },
                  paste($$arg) {
                    bubble_event.call(this, $$props, $$arg);
                  }
                },
                $$slots: {
                  left: ($$anchor3, $$slotProps2) => {
                    var svg = root_216();
                    template_effect(() => set_class(svg, 0, clsx((deep_read_state(size()), untrack(() => sizes[size()])))));
                    append($$anchor3, svg);
                  }
                },
                $$legacy: true
              }
            )),
            "component",
            Search,
            14,
            2,
            { componentTag: "Input" }
          );
        }
        var node_2 = sibling(node_1, 2);
        {
          var consequent = ($$anchor3) => {
            var div = root_316();
            var node_3 = child(div);
            slot(node_3, $$props, "default", {}, null);
            reset(div);
            append($$anchor3, div);
          };
          add_svelte_meta(
            () => if_block(node_2, ($$render) => {
              if (untrack(() => $$slots.default)) $$render(consequent);
            }),
            "if",
            Search,
            26,
            2
          );
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    Search,
    13,
    0,
    { componentTag: "Wrapper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;

// node_modules/flowbite-svelte/dist/forms/Select.svelte
Select[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Select.svelte";
var root_132 = add_locations(from_html(`<option disabled> </option>`), Select[FILENAME], [[21, 4]]);
var root_317 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[25, 6]]);
var root37 = add_locations(from_html(`<select><!><!></select>`), Select[FILENAME], [[19, 0]]);
function Select($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "items",
    "value",
    "placeholder",
    "underline",
    "size",
    "defaultClass",
    "underlineClass"
  ]);
  push($$props, false, Select);
  let items = prop($$props, "items", 24, () => []);
  let value = prop($$props, "value", 12, "");
  let placeholder = prop($$props, "placeholder", 8, "Choose option ...");
  let underline = prop($$props, "underline", 8, false);
  let size = prop($$props, "size", 8, "md");
  let defaultClass = prop($$props, "defaultClass", 8, "text-gray-900 disabled:text-gray-400 bg-gray-50 border border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:disabled:text-gray-500 dark:focus:ring-primary-500 dark:focus:border-primary-500");
  let underlineClass = prop($$props, "underlineClass", 8, "text-gray-500 disabled:text-gray-400 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-gray-400 dark:disabled:text-gray-500 dark:border-gray-700 focus:outline-none focus:ring-0 focus:border-gray-200 peer");
  const common = "block w-full";
  const sizes = {
    sm: "text-sm p-2",
    md: "text-sm p-2.5",
    lg: "text-base py-3 px-4"
  };
  let selectClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(underline()), deep_read_state(underlineClass()), deep_read_state(defaultClass()), deep_read_state(size()), deep_read_state($$sanitized_props)),
    () => {
      set(selectClass, twMerge(common, underline() ? underlineClass() : defaultClass(), sizes[size()], underline() && "!px-0", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var select = root37();
  template_effect(() => {
    value();
    invalidate_inner_signals(() => {
      $$restProps;
      get(selectClass);
      placeholder();
      items();
    });
  });
  attribute_effect(select, () => ({ ...$$restProps, class: get(selectClass) }));
  var node = child(select);
  {
    var consequent = ($$anchor2) => {
      var option = root_132();
      var text2 = child(option, true);
      reset(option);
      option.value = option.__value = "";
      template_effect(() => {
        set_selected(option, strict_equals(value(), void 0) ? true : void 0);
        set_text(text2, placeholder());
      });
      append($$anchor2, option);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (placeholder()) $$render(consequent);
      }),
      "if",
      Select,
      20,
      2
    );
  }
  var node_1 = sibling(node);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      add_svelte_meta(
        () => each(node_2, 1, items, index, ($$anchor3, $$item) => {
          let itemValue = () => get($$item).value;
          itemValue();
          let name = () => get($$item).name;
          name();
          let disabled = () => get($$item).disabled;
          disabled();
          var option_1 = root_317();
          var text_1 = child(option_1, true);
          reset(option_1);
          var option_1_value = {};
          template_effect(() => {
            option_1.disabled = disabled();
            set_selected(option_1, strict_equals(itemValue(), value()) ? true : void 0);
            set_text(text_1, name());
            if (option_1_value !== (option_1_value = itemValue())) {
              option_1.value = (option_1.__value = itemValue()) ?? "";
            }
          });
          append($$anchor3, option_1);
        }),
        "each",
        Select,
        24,
        4
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      slot(node_3, $$props, "default", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (deep_read_state(items()), untrack(() => items() && items().length > 0)) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Select,
      23,
      2
    );
  }
  reset(select);
  bind_select_value(select, value);
  event("change", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("input", select, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, select);
  return pop($$exports);
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var Select_default = Select;

// node_modules/flowbite-svelte/dist/forms/Textarea.svelte
Textarea[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Textarea.svelte";
var root_217 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[23, 4]]);
var root_318 = add_locations(from_html(`<textarea></textarea>`), Textarea[FILENAME], [[28, 4]]);
var root_48 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[31, 4]]);
var root_133 = add_locations(from_html(`<!> <!> <!>`, 1), Textarea[FILENAME], []);
function Textarea($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "value",
    "wrappedClass",
    "unWrappedClass",
    "innerWrappedClass",
    "headerClass",
    "footerClass"
  ]);
  push($$props, false, Textarea);
  const textareaClass = mutable_source();
  let value = prop($$props, "value", 28, () => void 0);
  let wrappedClass = prop($$props, "wrappedClass", 8, "block w-full text-sm border-0 px-0 bg-inherit dark:bg-inherit focus:outline-none focus:ring-0 disabled:cursor-not-allowed disabled:opacity-50");
  let unWrappedClass = prop($$props, "unWrappedClass", 8, "p-2.5 text-sm focus:ring-primary-500 border-gray-300 focus:border-primary-500 dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-50");
  let innerWrappedClass = prop($$props, "innerWrappedClass", 8, "py-2 px-4 bg-white dark:bg-gray-800");
  let headerClass = prop($$props, "headerClass", 8, "");
  let footerClass = prop($$props, "footerClass", 8, "");
  const background = getContext("background");
  let wrapped = mutable_source();
  let wrapperClass = mutable_source();
  const headerCls = (header) => twMerge(header ? "border-b" : "border-t", "py-2 px-3 border-gray-200", background ? "dark:border-gray-500" : "dark:border-gray-600", header ? headerClass() : footerClass());
  let innerWrapperClass = mutable_source();
  legacy_pre_effect(() => {
  }, () => {
    set(wrapped, $$slots.header || $$slots.footer);
  });
  legacy_pre_effect(() => (twMerge, deep_read_state($$sanitized_props)), () => {
    set(wrapperClass, twMerge("w-full rounded-lg bg-gray-50", background ? "dark:bg-gray-600" : "dark:bg-gray-700", "text-gray-900 dark:placeholder-gray-400 dark:text-white", "border border-gray-200", background ? "dark:border-gray-500" : "dark:border-gray-600", $$sanitized_props.class));
  });
  legacy_pre_effect(
    () => (get(wrapped), deep_read_state(wrappedClass()), twMerge, get(wrapperClass), deep_read_state(unWrappedClass())),
    () => {
      set(textareaClass, get(wrapped) ? wrappedClass() : twMerge(get(wrapperClass), unWrappedClass()));
    }
  );
  legacy_pre_effect(() => (twMerge, deep_read_state(innerWrappedClass())), () => {
    set(innerWrapperClass, twMerge(innerWrappedClass(), $$slots.footer ? "" : "rounded-b-lg", $$slots.header ? "" : "rounded-t-lg"));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Wrapper_default(node, {
      get show() {
        return get(wrapped);
      },
      get class() {
        return get(wrapperClass);
      },
      children: wrap_snippet(Textarea, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_133();
        var node_1 = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var div = root_217();
            var node_2 = child(div);
            slot(node_2, $$props, "header", {}, null);
            reset(div);
            template_effect(($0) => set_class(div, 1, $0), [() => clsx(untrack(() => headerCls(true)))]);
            append($$anchor3, div);
          };
          add_svelte_meta(
            () => if_block(node_1, ($$render) => {
              if (untrack(() => $$slots.header)) $$render(consequent);
            }),
            "if",
            Textarea,
            22,
            2
          );
        }
        var node_3 = sibling(node_1, 2);
        add_svelte_meta(
          () => Wrapper_default(node_3, {
            get show() {
              return get(wrapped);
            },
            get class() {
              return get(innerWrapperClass);
            },
            children: wrap_snippet(Textarea, ($$anchor3, $$slotProps2) => {
              var textarea = root_318();
              remove_textarea_child(textarea);
              attribute_effect(textarea, () => ({ ...$$restProps, class: get(textareaClass) }));
              bind_value(textarea, value);
              event("blur", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("change", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("click", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("contextmenu", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("focus", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("input", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keydown", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keypress", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("keyup", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseenter", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseleave", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("mouseover", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("paste", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              event("select", textarea, function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              });
              append($$anchor3, textarea);
            }),
            $$slots: { default: true }
          }),
          "component",
          Textarea,
          27,
          2,
          { componentTag: "Wrapper" }
        );
        var node_4 = sibling(node_3, 2);
        {
          var consequent_1 = ($$anchor3) => {
            var div_1 = root_48();
            var node_5 = child(div_1);
            slot(node_5, $$props, "footer", {}, null);
            reset(div_1);
            template_effect(($0) => set_class(div_1, 1, $0), [() => clsx(untrack(() => headerCls(false)))]);
            append($$anchor3, div_1);
          };
          add_svelte_meta(
            () => if_block(node_4, ($$render) => {
              if (untrack(() => $$slots.footer)) $$render(consequent_1);
            }),
            "if",
            Textarea,
            30,
            2
          );
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    Textarea,
    21,
    0,
    { componentTag: "Wrapper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Textarea = hmr(Textarea, () => Textarea[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Textarea[HMR].source;
    set(Textarea[HMR].source, module.default[HMR].original);
  });
}
var Textarea_default = Textarea;

// node_modules/flowbite-svelte/dist/forms/Toggle.svelte
Toggle[FILENAME] = "node_modules/flowbite-svelte/dist/forms/Toggle.svelte";
var root_134 = add_locations(from_html(`<!> <span></span> <!>`, 1), Toggle[FILENAME], [[34, 2]]);
function Toggle($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "group", "value", "checked", "customSize"]);
  push($$props, false, Toggle);
  var $$ownership_validator = create_ownership_validator($$props);
  const binding_group = [];
  let size = prop($$props, "size", 8, "default");
  let group = prop($$props, "group", 28, () => []);
  let value = prop($$props, "value", 8, "");
  let checked = prop($$props, "checked", 28, () => void 0);
  let customSize = prop($$props, "customSize", 8, "");
  let background = getContext("background");
  const common = "me-3 shrink-0 bg-gray-200 rounded-full peer-focus:ring-4 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:bg-white after:border-gray-300 after:border after:rounded-full after:transition-all";
  const colors = {
    primary: "peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 peer-checked:bg-primary-600",
    secondary: "peer-focus:ring-secondary-300 dark:peer-focus:ring-secondary-800 peer-checked:bg-secondary-600",
    red: "peer-focus:ring-red-300 dark:peer-focus:ring-red-800 peer-checked:bg-red-600",
    green: "peer-focus:ring-green-300 dark:peer-focus:ring-green-800 peer-checked:bg-green-600",
    purple: "peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 peer-checked:bg-purple-600",
    yellow: "peer-focus:ring-yellow-300 dark:peer-focus:ring-yellow-800 peer-checked:bg-yellow-400",
    teal: "peer-focus:ring-teal-300 dark:peer-focus:ring-teal-800 peer-checked:bg-teal-600",
    orange: "peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 peer-checked:bg-orange-500",
    blue: "peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:bg-blue-600"
  };
  const sizes = {
    small: "w-9 h-5 after:top-[2px] after:start-[2px] after:h-4 after:w-4",
    default: "w-11 h-6 after:top-0.5 after:start-[2px] after:h-5 after:w-5",
    large: "w-14 h-7 after:top-0.5 after:start-[4px]  after:h-6 after:w-6",
    custom: customSize()
  };
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state($$restProps), deep_read_state(size()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(
        common,
        $$slots.offLabel ? "ms-3" : "",
        background ? "dark:bg-gray-600 dark:border-gray-500" : "dark:bg-gray-700 dark:border-gray-600",
        colors[$$restProps.color ?? "primary"],
        sizes[size()],
        "relative",
        $$sanitized_props.classDiv
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    $$ownership_validator.binding("checked", Checkbox_default, checked);
    $$ownership_validator.binding("group", Checkbox_default, group);
    add_svelte_meta(
      () => Checkbox_default(node, spread_props({ custom: true }, () => $$restProps, {
        get class() {
          return deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class);
        },
        get value() {
          return value();
        },
        get checked() {
          return checked();
        },
        set checked($$value) {
          checked($$value);
        },
        get group() {
          return group();
        },
        set group($$value) {
          group($$value);
        },
        $$events: {
          click($$arg) {
            bubble_event.call(this, $$props, $$arg);
          },
          change($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(Toggle, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_134();
          var node_1 = first_child(fragment_1);
          slot(node_1, $$props, "offLabel", {}, null);
          var span = sibling(node_1, 2);
          var node_2 = sibling(span, 2);
          slot(node_2, $$props, "default", {}, null);
          template_effect(() => set_class(span, 1, clsx(get(divClass))));
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true },
        $$legacy: true
      })),
      "component",
      Toggle,
      32,
      0,
      { componentTag: "Checkbox" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Toggle = hmr(Toggle, () => Toggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle[HMR].source;
    set(Toggle[HMR].source, module.default[HMR].original);
  });
}
var Toggle_default = Toggle;

// node_modules/flowbite-svelte/dist/gallery/Gallery.svelte
Gallery[FILENAME] = "node_modules/flowbite-svelte/dist/gallery/Gallery.svelte";
var root_218 = add_locations(from_html(`<div><img/></div>`), Gallery[FILENAME], [[13, 6, [[13, 11]]]]);
var root38 = add_locations(from_html(`<div></div>`), Gallery[FILENAME], [[10, 0]]);
function Gallery($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "imgClass"]);
  push($$props, false, Gallery);
  const divClass = mutable_source();
  let items = prop($$props, "items", 24, () => []);
  let imgClass = prop($$props, "imgClass", 8, "h-auto max-w-full rounded-lg");
  function init2(node) {
    if (strict_equals(getComputedStyle(node).gap, "normal")) node.style.gap = "inherit";
  }
  legacy_pre_effect(() => (twMerge, deep_read_state($$sanitized_props)), () => {
    set(divClass, twMerge("grid", $$sanitized_props.class));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root38();
  attribute_effect(div, () => ({ ...$$restProps, class: get(divClass) }));
  add_svelte_meta(
    () => each(
      div,
      5,
      items,
      index,
      ($$anchor2, item) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        slot(
          node_1,
          $$props,
          "default",
          {
            get item() {
              return get(item);
            }
          },
          ($$anchor3) => {
            var div_1 = root_218();
            var img = child(div_1);
            reset(div_1);
            template_effect(
              ($0) => {
                set_attribute(img, "src", (get(item), untrack(() => get(item).src)));
                set_attribute(img, "alt", (get(item), untrack(() => get(item).alt)));
                set_class(img, 1, $0);
              },
              [
                () => clsx((deep_read_state(twMerge), deep_read_state(imgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(imgClass(), $$sanitized_props.classImg))))
              ]
            );
            append($$anchor3, div_1);
          }
        );
        append($$anchor2, fragment);
      },
      ($$anchor2) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        slot(
          node_2,
          $$props,
          "default",
          {
            get item() {
              return deep_read_state(items()), untrack(() => items()[0]);
            }
          },
          null
        );
        append($$anchor2, fragment_1);
      }
    ),
    "each",
    Gallery,
    11,
    2
  );
  reset(div);
  action(div, ($$node) => init2 == null ? void 0 : init2($$node));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Gallery = hmr(Gallery, () => Gallery[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery[HMR].source;
    set(Gallery[HMR].source, module.default[HMR].original);
  });
}
var Gallery_default = Gallery;

// node_modules/flowbite-svelte/dist/kbd/Kbd.svelte
Kbd[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/Kbd.svelte";
var root39 = add_locations(from_html(`<kbd><!></kbd>`), Kbd[FILENAME], [[5, 0]]);
function Kbd($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Kbd);
  let kbdClass = prop($$props, "kbdClass", 8, "text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500");
  var $$exports = { ...legacy_api() };
  init();
  var kbd = root39();
  var node = child(kbd);
  slot(node, $$props, "default", {}, null);
  reset(kbd);
  template_effect(($0) => set_class(kbd, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(kbdClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(kbdClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, kbd);
  return pop($$exports);
}
if (import.meta.hot) {
  Kbd = hmr(Kbd, () => Kbd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Kbd[HMR].source;
    set(Kbd[HMR].source, module.default[HMR].original);
  });
}
var Kbd_default = Kbd;

// node_modules/flowbite-svelte/dist/kbd/ArrowKeyDown.svelte
ArrowKeyDown[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/ArrowKeyDown.svelte";
var root40 = add_locations(from_svg(`<svg><path d="M310.6 246.6l-127.1 128C176.4 380.9 168.2 384 160 384s-16.38-3.125-22.63-9.375l-127.1-128C.2244 237.5-2.516 223.7 2.438 211.8S19.07 192 32 192h255.1c12.94 0 24.62 7.781 29.58 19.75S319.8 237.5 310.6 246.6z"></path></svg>`), ArrowKeyDown[FILENAME], [[5, 0, [[6, 2]]]]);
function ArrowKeyDown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyDown);
  let svgClass = prop($$props, "svgClass", 8, "w-4 h-4");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root40();
  attribute_effect(
    svg,
    ($0) => ({
      ...$$restProps,
      class: $0,
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(svgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(svgClass(), $$sanitized_props.class)))
    ]
  );
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  ArrowKeyDown = hmr(ArrowKeyDown, () => ArrowKeyDown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowKeyDown[HMR].source;
    set(ArrowKeyDown[HMR].source, module.default[HMR].original);
  });
}
var ArrowKeyDown_default = ArrowKeyDown;

// node_modules/flowbite-svelte/dist/kbd/ArrowKeyLeft.svelte
ArrowKeyLeft[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/ArrowKeyLeft.svelte";
var root41 = add_locations(from_svg(`<svg><path d="M137.4 406.6l-128-127.1C3.125 272.4 0 264.2 0 255.1s3.125-16.38 9.375-22.63l128-127.1c9.156-9.156 22.91-11.9 34.88-6.943S192 115.1 192 128v255.1c0 12.94-7.781 24.62-19.75 29.58S146.5 415.8 137.4 406.6z"></path></svg>`), ArrowKeyLeft[FILENAME], [[5, 0, [[6, 2]]]]);
function ArrowKeyLeft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyLeft);
  let svgClass = prop($$props, "svgClass", 8, "w-4 h-4");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root41();
  attribute_effect(
    svg,
    ($0) => ({
      ...$$restProps,
      class: $0,
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(svgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(svgClass(), $$sanitized_props.class)))
    ]
  );
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  ArrowKeyLeft = hmr(ArrowKeyLeft, () => ArrowKeyLeft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowKeyLeft[HMR].source;
    set(ArrowKeyLeft[HMR].source, module.default[HMR].original);
  });
}
var ArrowKeyLeft_default = ArrowKeyLeft;

// node_modules/flowbite-svelte/dist/kbd/ArrowKeyRight.svelte
ArrowKeyRight[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/ArrowKeyRight.svelte";
var root42 = add_locations(from_svg(`<svg><path d="M118.6 105.4l128 127.1C252.9 239.6 256 247.8 256 255.1s-3.125 16.38-9.375 22.63l-128 127.1c-9.156 9.156-22.91 11.9-34.88 6.943S64 396.9 64 383.1V128c0-12.94 7.781-24.62 19.75-29.58S109.5 96.23 118.6 105.4z"></path></svg>`), ArrowKeyRight[FILENAME], [[5, 0, [[6, 2]]]]);
function ArrowKeyRight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyRight);
  let svgClass = prop($$props, "svgClass", 8, "w-4 h-4");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root42();
  attribute_effect(
    svg,
    ($0) => ({
      ...$$restProps,
      class: $0,
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(svgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(svgClass(), $$sanitized_props.class)))
    ]
  );
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  ArrowKeyRight = hmr(ArrowKeyRight, () => ArrowKeyRight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowKeyRight[HMR].source;
    set(ArrowKeyRight[HMR].source, module.default[HMR].original);
  });
}
var ArrowKeyRight_default = ArrowKeyRight;

// node_modules/flowbite-svelte/dist/kbd/ArrowKeyUp.svelte
ArrowKeyUp[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/ArrowKeyUp.svelte";
var root43 = add_locations(from_svg(`<svg><path d="M9.39 265.4l127.1-128C143.6 131.1 151.8 128 160 128s16.38 3.125 22.63 9.375l127.1 128c9.156 9.156 11.9 22.91 6.943 34.88S300.9 320 287.1 320H32.01c-12.94 0-24.62-7.781-29.58-19.75S.2333 274.5 9.39 265.4z"></path></svg>`), ArrowKeyUp[FILENAME], [[5, 0, [[6, 2]]]]);
function ArrowKeyUp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["svgClass"]);
  push($$props, false, ArrowKeyUp);
  let svgClass = prop($$props, "svgClass", 8, "w-4 h-4");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root43();
  attribute_effect(
    svg,
    ($0) => ({
      ...$$restProps,
      class: $0,
      "aria-hidden": "true",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 320 512"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(svgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(svgClass(), $$sanitized_props.class)))
    ]
  );
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  ArrowKeyUp = hmr(ArrowKeyUp, () => ArrowKeyUp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowKeyUp[HMR].source;
    set(ArrowKeyUp[HMR].source, module.default[HMR].original);
  });
}
var ArrowKeyUp_default = ArrowKeyUp;

// node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte
ListgroupItem[FILENAME] = "node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte";
var root_135 = add_locations(from_html(`<li><!></li>`), ListgroupItem[FILENAME], [[26, 2]]);
var root_319 = add_locations(from_html(`<a><!></a>`), ListgroupItem[FILENAME], [[30, 2]]);
var root_49 = add_locations(from_html(`<button><!></button>`), ListgroupItem[FILENAME], [[34, 2]]);
function ListgroupItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ListgroupItem);
  let active = prop($$props, "active", 24, () => getContext("active"));
  let current = prop($$props, "current", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let href = prop($$props, "href", 8, "");
  let currentClass = prop($$props, "currentClass", 8, "text-white bg-primary-700 dark:text-white dark:bg-gray-800");
  let normalClass = prop($$props, "normalClass", 8, "");
  let disabledClass = prop($$props, "disabledClass", 8, "text-gray-900 bg-gray-100 dark:bg-gray-600 dark:text-gray-400");
  let focusClass = prop($$props, "focusClass", 8, "focus:z-40 focus:outline-none focus:ring-2 focus:ring-primary-700 focus:text-primary-700 dark:focus:ring-gray-500 dark:focus:text-white");
  let hoverClass = prop($$props, "hoverClass", 8, "hover:bg-gray-100 hover:text-primary-700 dark:hover:bg-gray-600 dark:hover:text-white");
  let itemDefaultClass = prop($$props, "itemDefaultClass", 8, "py-2 px-4 w-full text-sm font-medium list-none first:rounded-t-lg last:rounded-b-lg");
  let attrs = prop($$props, "attrs", 24, () => void 0);
  const states = {
    current: currentClass(),
    normal: normalClass(),
    disabled: disabledClass()
  };
  let state = mutable_source();
  let itemClass = mutable_source();
  legacy_pre_effect(() => (deep_read_state(disabled()), deep_read_state(current())), () => {
    set(state, disabled() ? "disabled" : current() ? "current" : "normal");
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(itemDefaultClass()), get(state), deep_read_state(active()), deep_read_state(hoverClass()), deep_read_state(focusClass()), deep_read_state($$sanitized_props)),
    () => {
      set(itemClass, twMerge(itemDefaultClass(), states[get(state)], active() && strict_equals(get(state), "disabled") && "cursor-not-allowed", active() && strict_equals(get(state), "normal") && hoverClass(), active() && strict_equals(get(state), "normal") && focusClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var li = root_135();
      var node_1 = child(li);
      slot(
        node_1,
        $$props,
        "default",
        {
          get item() {
            return $$sanitized_props;
          }
        },
        null
      );
      reset(li);
      template_effect(() => set_class(li, 1, clsx(get(itemClass))));
      append($$anchor2, li);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var a = root_319();
          attribute_effect(a, () => ({
            ...attrs(),
            href: href(),
            class: `block ${get(itemClass) ?? ""}`,
            "aria-current": current()
          }));
          var node_3 = child(a);
          slot(
            node_3,
            $$props,
            "default",
            {
              get item() {
                return $$sanitized_props;
              }
            },
            null
          );
          reset(a);
          event("blur", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", a, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, a);
        };
        var alternate = ($$anchor3) => {
          var button = root_49();
          attribute_effect(button, () => ({
            type: "button",
            ...attrs(),
            class: `flex items-center text-left ${get(itemClass) ?? ""}`,
            disabled: disabled(),
            "aria-current": current()
          }));
          var node_4 = child(button);
          slot(
            node_4,
            $$props,
            "default",
            {
              get item() {
                return $$sanitized_props;
              }
            },
            null
          );
          reset(button);
          event("blur", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("change", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("click", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("focus", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keydown", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keypress", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("keyup", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseenter", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseleave", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          event("mouseover", button, function($$arg) {
            bubble_event.call(this, $$props, $$arg);
          });
          append($$anchor3, button);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (href()) $$render(consequent_1);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          ListgroupItem,
          29,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!active()) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      ListgroupItem,
      25,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ListgroupItem = hmr(ListgroupItem, () => ListgroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListgroupItem[HMR].source;
    set(ListgroupItem[HMR].source, module.default[HMR].original);
  });
}
var ListgroupItem_default = ListgroupItem;

// node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte
Listgroup[FILENAME] = "node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte";
function Listgroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "active", "defaultClass"]);
  push($$props, false, Listgroup);
  const dispatch = createEventDispatcher();
  let items = prop($$props, "items", 24, () => []);
  let active = prop($$props, "active", 8, false);
  let defaultClass = prop($$props, "defaultClass", 8, "divide-y divide-gray-200 dark:divide-gray-600");
  let groupClass = mutable_source();
  legacy_pre_effect(() => (setContext, deep_read_state(active())), () => {
    setContext("active", active());
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(groupClass, twMerge(defaultClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => active() ? "div" : "ul");
    add_svelte_meta(
      () => Frame_default(node, spread_props(
        {
          get tag() {
            return get($0);
          }
        },
        () => $$restProps,
        {
          rounded: true,
          border: true,
          get class() {
            return get(groupClass);
          },
          children: wrap_snippet(Listgroup, ($$anchor2, $$slotProps) => {
            var fragment_1 = comment();
            var node_1 = first_child(fragment_1);
            add_svelte_meta(
              () => each(
                node_1,
                1,
                items,
                index,
                ($$anchor3, item, index2) => {
                  var fragment_2 = comment();
                  var node_2 = first_child(fragment_2);
                  {
                    var consequent = ($$anchor4) => {
                      var fragment_3 = comment();
                      var node_3 = first_child(fragment_3);
                      add_svelte_meta(
                        () => ListgroupItem_default(node_3, {
                          get active() {
                            return active();
                          },
                          index: index2,
                          $$events: { click: () => dispatch("click", get(item)) },
                          children: wrap_snippet(Listgroup, ($$anchor5, $$slotProps2) => {
                            var fragment_4 = comment();
                            var node_4 = first_child(fragment_4);
                            slot(
                              node_4,
                              $$props,
                              "default",
                              {
                                get item() {
                                  return get(item);
                                },
                                index: index2
                              },
                              null
                            );
                            append($$anchor5, fragment_4);
                          }),
                          $$slots: { default: true }
                        }),
                        "component",
                        Listgroup,
                        17,
                        6,
                        { componentTag: "ListgroupItem" }
                      );
                      append($$anchor4, fragment_3);
                    };
                    var alternate = ($$anchor4) => {
                      var fragment_5 = comment();
                      var node_5 = first_child(fragment_5);
                      add_svelte_meta(
                        () => ListgroupItem_default(node_5, spread_props(
                          {
                            get active() {
                              return active();
                            }
                          },
                          () => get(item),
                          {
                            index: index2,
                            $$events: { click: () => dispatch("click", get(item)) },
                            children: wrap_snippet(Listgroup, ($$anchor5, $$slotProps2) => {
                              var fragment_6 = comment();
                              var node_6 = first_child(fragment_6);
                              slot(
                                node_6,
                                $$props,
                                "default",
                                {
                                  get item() {
                                    return get(item);
                                  },
                                  index: index2
                                },
                                null
                              );
                              append($$anchor5, fragment_6);
                            }),
                            $$slots: { default: true }
                          }
                        )),
                        "component",
                        Listgroup,
                        19,
                        6,
                        { componentTag: "ListgroupItem" }
                      );
                      append($$anchor4, fragment_5);
                    };
                    add_svelte_meta(
                      () => if_block(node_2, ($$render) => {
                        if (strict_equals(typeof get(item), "string")) $$render(consequent);
                        else $$render(alternate, false);
                      }),
                      "if",
                      Listgroup,
                      16,
                      4
                    );
                  }
                  append($$anchor3, fragment_2);
                },
                ($$anchor3) => {
                  const item = tag(derived_safe_equal(() => (deep_read_state(items()), untrack(() => items()[0]))), "item");
                  get(item);
                  var fragment_7 = comment();
                  var node_7 = first_child(fragment_7);
                  slot(
                    node_7,
                    $$props,
                    "default",
                    {
                      get item() {
                        return get(item);
                      },
                      index: 0
                    },
                    null
                  );
                  append($$anchor3, fragment_7);
                }
              ),
              "each",
              Listgroup,
              15,
              2
            );
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      Listgroup,
      14,
      0,
      { componentTag: "Frame" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Listgroup = hmr(Listgroup, () => Listgroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Listgroup[HMR].source;
    set(Listgroup[HMR].source, module.default[HMR].original);
  });
}
var Listgroup_default = Listgroup;

// node_modules/flowbite-svelte/dist/marquee/Marquee.svelte
Marquee[FILENAME] = "node_modules/flowbite-svelte/dist/marquee/Marquee.svelte";
var root44 = add_locations(from_html(`<div role="banner"><div class="flex justify-around items-center min-w-full"><!></div> <div class="flex justify-around items-center min-w-full"><!></div></div>`), Marquee[FILENAME], [[30, 0, [[31, 2], [34, 2]]]]);
function Marquee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Marquee);
  let speed = prop($$props, "speed", 8, 1);
  let hoverSpeed = prop($$props, "hoverSpeed", 8, 1);
  let shadow = prop($$props, "shadow", 8, false);
  let offset2 = mutable_source(0);
  let isHovering = mutable_source(false);
  let shadowClass = `after:content-[''] after:absolute after:block after:z-10 after:h-full before:content-[''] before:absolute 
    before:block before:z-10 before:h-full before:end-0 after:shadow-[10px_0_50px_65px_rgba(256,256,256,1)] 
    before:shadow-[-10px_0_50px_65px_rgba(256,256,256,1)] dark:after:shadow-[10px_0_50px_65px_rgba(16,24,39,1)]
    dark:before:shadow-[-10px_0_50px_65px_rgba(16,24,39,1)]`;
  let divCls = twMerge("relative flex overflow-hidden w-full", shadow() ? shadowClass : "", $$sanitized_props.class);
  function init2(marquee) {
    const intervalId = setInterval(
      () => {
        if (marquee && Math.abs(get(offset2)) >= marquee.offsetWidth) {
          set(offset2, 0);
        } else {
          if (get(isHovering)) set(offset2, get(offset2) - hoverSpeed());
          else set(offset2, get(offset2) - speed());
        }
      },
      5
    );
    return {
      destroy() {
        clearInterval(intervalId);
      }
    };
  }
  var $$exports = { ...legacy_api() };
  init();
  var div = root44();
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props, "default", {}, null);
  reset(div_1);
  action(div_1, ($$node) => init2 == null ? void 0 : init2($$node));
  var div_2 = sibling(div_1, 2);
  var node_1 = child(div_2);
  slot(node_1, $$props, "default", {}, null);
  reset(div_2);
  reset(div);
  template_effect(() => {
    set_class(div, 1, clsx(divCls));
    set_style(div_1, `transform: ${`translateX(${get(offset2)}px)`}`);
    set_style(div_2, `transform: ${`translateX(${get(offset2)}px)`}`);
  });
  event("mouseover", div, () => set(isHovering, true));
  event("mouseleave", div, () => set(isHovering, false));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Marquee = hmr(Marquee, () => Marquee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Marquee[HMR].source;
    set(Marquee[HMR].source, module.default[HMR].original);
  });
}
var Marquee_default = Marquee;

// node_modules/flowbite-svelte/dist/utils/focusTrap.js
var selectorTabbable = `
  a[href], area[href], input:not([disabled]):not([tabindex='-1']),
  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),
  textarea:not([disabled]):not([tabindex='-1']),
  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]
`;
var focusTrap = (node) => {
  const handleFocusTrap = (e) => {
    const isTabPressed = e.key === "Tab" || e.keyCode === 9;
    if (!isTabPressed) {
      return;
    }
    const tabbable = Array.from(node.querySelectorAll(selectorTabbable)).filter((el) => el instanceof HTMLElement && el.hidden !== true);
    let index2 = tabbable.indexOf(document.activeElement);
    if (index2 === -1 && e.shiftKey)
      index2 = 0;
    index2 += tabbable.length + (e.shiftKey ? -1 : 1);
    index2 %= tabbable.length;
    tabbable[index2].focus();
    e.preventDefault();
  };
  document.addEventListener("keydown", handleFocusTrap, true);
  return {
    destroy() {
      document.removeEventListener("keydown", handleFocusTrap, true);
    }
  };
};
var focusTrap_default = focusTrap;

// node_modules/flowbite-svelte/dist/modal/Modal.svelte
Modal[FILENAME] = "node_modules/flowbite-svelte/dist/modal/Modal.svelte";
var root_55 = add_locations(from_html(`<h3> </h3>`), Modal[FILENAME], [[107, 14]]);
var root_410 = add_locations(from_html(`<!> <!>`, 1), Modal[FILENAME], []);
var root_219 = add_locations(from_html(`<!> <div role="document"><!> <!></div> <!>`, 1), Modal[FILENAME], [[115, 8]]);
var root_136 = add_locations(from_html(`<div></div>  <div tabindex="-1" aria-modal="true" role="dialog"><div><!></div></div>`, 1), Modal[FILENAME], [[96, 2], [99, 2, [[100, 4]]]]);
function Modal($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "open",
    "title",
    "size",
    "color",
    "placement",
    "autoclose",
    "outsideclose",
    "dismissable",
    "backdropClass",
    "classBackdrop",
    "dialogClass",
    "classDialog",
    "defaultClass",
    "headerClass",
    "classHeader",
    "bodyClass",
    "classBody",
    "footerClass",
    "classFooter"
  ]);
  push($$props, false, Modal);
  const backdropCls = mutable_source();
  const dialogCls = mutable_source();
  const frameCls = mutable_source();
  const headerCls = mutable_source();
  const bodyCls = mutable_source();
  const footerCls = mutable_source();
  let open = prop($$props, "open", 12, false);
  let title = prop($$props, "title", 8, "");
  let size = prop($$props, "size", 8, "md");
  let color = prop($$props, "color", 8, "default");
  let placement = prop($$props, "placement", 8, "center");
  let autoclose = prop($$props, "autoclose", 8, false);
  let outsideclose = prop($$props, "outsideclose", 8, false);
  let dismissable = prop($$props, "dismissable", 8, true);
  let backdropClass = prop($$props, "backdropClass", 8, "fixed inset-0 z-40 bg-gray-900 bg-opacity-50 dark:bg-opacity-80");
  let classBackdrop = prop($$props, "classBackdrop", 24, () => void 0);
  let dialogClass = prop($$props, "dialogClass", 8, "fixed top-0 start-0 end-0 h-modal md:inset-0 md:h-full z-50 w-full p-4 flex");
  let classDialog = prop($$props, "classDialog", 24, () => void 0);
  let defaultClass = prop($$props, "defaultClass", 8, "relative flex flex-col mx-auto");
  let headerClass = prop($$props, "headerClass", 8, "flex justify-between items-center p-4 md:p-5 rounded-t-lg");
  let classHeader = prop($$props, "classHeader", 24, () => void 0);
  let bodyClass = prop($$props, "bodyClass", 8, "p-4 md:p-5 space-y-4 flex-1 overflow-y-auto overscroll-contain");
  let classBody = prop($$props, "classBody", 24, () => void 0);
  let footerClass = prop($$props, "footerClass", 8, "flex items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse rounded-b-lg");
  let classFooter = prop($$props, "classFooter", 24, () => void 0);
  const dispatch = createEventDispatcher();
  function prepareFocus(node) {
    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT);
    let n2;
    while (n2 = walker.nextNode()) {
      if (n2 instanceof HTMLElement) {
        const el = n2;
        const [x, y] = isScrollable(el);
        if (x || y) el.tabIndex = 0;
      }
    }
    node.focus();
  }
  const getPlacementClasses = (placement2) => {
    switch (placement2) {
      case "top-left":
        return ["justify-start", "items-start"];
      case "top-center":
        return ["justify-center", "items-start"];
      case "top-right":
        return ["justify-end", "items-start"];
      case "center-left":
        return ["justify-start", "items-center"];
      case "center":
        return ["justify-center", "items-center"];
      case "center-right":
        return ["justify-end", "items-center"];
      case "bottom-left":
        return ["justify-start", "items-end"];
      case "bottom-center":
        return ["justify-center", "items-end"];
      case "bottom-right":
        return ["justify-end", "items-end"];
      default:
        return ["justify-center", "items-center"];
    }
  };
  const sizes = {
    xs: "max-w-md",
    sm: "max-w-lg",
    md: "max-w-2xl",
    lg: "max-w-4xl",
    xl: "max-w-7xl"
  };
  const onAutoClose = (e) => {
    const target = e.target;
    if (autoclose() && strict_equals(target == null ? void 0 : target.tagName, "BUTTON")) hide(e);
  };
  const onOutsideClose = (e) => {
    const target = e.target;
    if (outsideclose() && strict_equals(target, e.currentTarget)) hide(e);
  };
  const hide = (e) => {
    e.preventDefault();
    open(false);
  };
  const isScrollable = (e) => [
    e.scrollWidth > e.clientWidth && ["scroll", "auto"].indexOf(getComputedStyle(e).overflowX) >= 0,
    e.scrollHeight > e.clientHeight && ["scroll", "auto"].indexOf(getComputedStyle(e).overflowY) >= 0
  ];
  function handleKeys(e) {
    if (strict_equals(e.key, "Escape") && dismissable()) return hide(e);
  }
  legacy_pre_effect(() => deep_read_state(open()), () => {
    dispatch(open() ? "open" : "close");
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(backdropClass()), deep_read_state(classBackdrop())),
    () => {
      set(backdropCls, twMerge(backdropClass(), classBackdrop()));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(dialogClass()), deep_read_state(classDialog()), deep_read_state(placement())),
    () => {
      set(dialogCls, twMerge(dialogClass(), classDialog(), getPlacementClasses(placement())));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(frameCls, twMerge(defaultClass(), "w-full divide-y", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(headerClass()), deep_read_state(classHeader())),
    () => {
      set(headerCls, twMerge(headerClass(), classHeader()));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(bodyClass()), deep_read_state(classBody())),
    () => {
      set(bodyCls, twMerge(bodyClass(), classBody()));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(footerClass()), deep_read_state(classFooter())),
    () => {
      set(footerCls, twMerge(footerClass(), classFooter()));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_1 = root_136();
      var div = first_child(fragment_1);
      var div_1 = sibling(div, 2);
      var div_2 = child(div_1);
      var node_2 = child(div_2);
      add_svelte_meta(
        () => Frame_default(node_2, spread_props({ rounded: true, shadow: true }, () => $$restProps, {
          get class() {
            return get(frameCls);
          },
          get color() {
            return color();
          },
          children: wrap_snippet(Modal, ($$anchor3, $$slotProps) => {
            var fragment_2 = root_219();
            var node_3 = first_child(fragment_2);
            {
              var consequent_1 = ($$anchor4) => {
                var fragment_3 = comment();
                var node_4 = first_child(fragment_3);
                add_svelte_meta(
                  () => Frame_default(node_4, {
                    get class() {
                      return get(headerCls);
                    },
                    get color() {
                      return color();
                    },
                    children: wrap_snippet(Modal, ($$anchor5, $$slotProps2) => {
                      var fragment_4 = root_410();
                      var node_5 = first_child(fragment_4);
                      slot(node_5, $$props, "header", {}, ($$anchor6) => {
                        var h3 = root_55();
                        var text2 = child(h3, true);
                        reset(h3);
                        template_effect(() => {
                          set_class(h3, 1, `text-xl font-semibold ${strict_equals(color(), "default") ? "" : "text-gray-900 dark:text-white"} p-0`);
                          set_text(text2, title());
                        });
                        append($$anchor6, h3);
                      });
                      var node_6 = sibling(node_5, 2);
                      {
                        var consequent = ($$anchor6) => {
                          var fragment_5 = comment();
                          var node_7 = first_child(fragment_5);
                          add_svelte_meta(
                            () => CloseButton_default(node_7, {
                              name: "Close modal",
                              get color() {
                                return color();
                              },
                              $$events: { click: hide }
                            }),
                            "component",
                            Modal,
                            111,
                            29,
                            { componentTag: "CloseButton" }
                          );
                          append($$anchor6, fragment_5);
                        };
                        add_svelte_meta(
                          () => if_block(node_6, ($$render) => {
                            if (dismissable()) $$render(consequent);
                          }),
                          "if",
                          Modal,
                          111,
                          12
                        );
                      }
                      append($$anchor5, fragment_4);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Modal,
                  105,
                  10,
                  { componentTag: "Frame" }
                );
                append($$anchor4, fragment_3);
              };
              add_svelte_meta(
                () => if_block(node_3, ($$render) => {
                  if (deep_read_state(title()), untrack(() => $$slots.header || title())) $$render(consequent_1);
                }),
                "if",
                Modal,
                104,
                8
              );
            }
            var div_3 = sibling(node_3, 2);
            var node_8 = child(div_3);
            {
              var consequent_2 = ($$anchor4) => {
                var fragment_6 = comment();
                var node_9 = first_child(fragment_6);
                add_svelte_meta(
                  () => CloseButton_default(node_9, {
                    name: "Close modal",
                    class: "absolute top-3 end-2.5",
                    get color() {
                      return color();
                    },
                    $$events: { click: hide }
                  }),
                  "component",
                  Modal,
                  117,
                  12,
                  { componentTag: "CloseButton" }
                );
                append($$anchor4, fragment_6);
              };
              add_svelte_meta(
                () => if_block(node_8, ($$render) => {
                  if (deep_read_state(dismissable()), deep_read_state(title()), untrack(() => dismissable() && !$$slots.header && !title())) $$render(consequent_2);
                }),
                "if",
                Modal,
                116,
                10
              );
            }
            var node_10 = sibling(node_8, 2);
            slot(node_10, $$props, "default", {}, null);
            reset(div_3);
            var node_11 = sibling(div_3, 2);
            {
              var consequent_3 = ($$anchor4) => {
                var fragment_7 = comment();
                var node_12 = first_child(fragment_7);
                add_svelte_meta(
                  () => Frame_default(node_12, {
                    get class() {
                      return get(footerCls);
                    },
                    get color() {
                      return color();
                    },
                    children: wrap_snippet(Modal, ($$anchor5, $$slotProps2) => {
                      var fragment_8 = comment();
                      var node_13 = first_child(fragment_8);
                      slot(node_13, $$props, "footer", {}, null);
                      append($$anchor5, fragment_8);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Modal,
                  123,
                  10,
                  { componentTag: "Frame" }
                );
                append($$anchor4, fragment_7);
              };
              add_svelte_meta(
                () => if_block(node_11, ($$render) => {
                  if (untrack(() => $$slots.footer)) $$render(consequent_3);
                }),
                "if",
                Modal,
                122,
                8
              );
            }
            template_effect(() => set_class(div_3, 1, clsx(get(bodyCls))));
            event("keydown", div_3, stopPropagation(handleKeys));
            event(
              "wheel",
              div_3,
              stopPropagation(function($$arg) {
                bubble_event.call(this, $$props, $$arg);
              }),
              void 0,
              true
            );
            append($$anchor3, fragment_2);
          }),
          $$slots: { default: true }
        })),
        "component",
        Modal,
        102,
        6,
        { componentTag: "Frame" }
      );
      reset(div_2);
      reset(div_1);
      effect(() => event("keydown", div_1, handleKeys));
      effect(() => event(
        "wheel",
        div_1,
        preventDefault(function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }),
        void 0,
        false
      ));
      action(div_1, ($$node) => prepareFocus == null ? void 0 : prepareFocus($$node));
      action(div_1, ($$node) => {
        var _a;
        return (_a = focusTrap_default) == null ? void 0 : _a($$node);
      });
      effect(() => event("click", div_1, onAutoClose));
      effect(() => event("mousedown", div_1, onOutsideClose));
      template_effect(() => {
        set_class(div, 1, clsx(get(backdropCls)));
        set_class(div_1, 1, clsx(get(dialogCls)));
        set_class(div_2, 1, `flex relative ${(deep_read_state(size()), untrack(() => sizes[size()])) ?? ""} w-full max-h-full`);
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (open()) $$render(consequent_4);
      }),
      "if",
      Modal,
      94,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Modal = hmr(Modal, () => Modal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Modal[HMR].source;
    set(Modal[HMR].source, module.default[HMR].original);
  });
}
var Modal_default = Modal;

// node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte
MegaMenu[FILENAME] = "node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte";
var root_220 = add_locations(from_html(`<li><!></li>`), MegaMenu[FILENAME], [[17, 8]]);
var root_411 = add_locations(from_html(`<div class="md:w-1/3 mt-4 md:mt-0"><!></div>`), MegaMenu[FILENAME], [[24, 31]]);
var root_137 = add_locations(from_html(`<div class="flex flex-col md:flex-row p-4 max-w-screen-md justify-center mx-auto mt-2"><ul></ul> <!></div>`), MegaMenu[FILENAME], [[14, 2, [[15, 4]]]]);
function MegaMenu($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["items", "full", "open", "ulClass"]);
  push($$props, false, MegaMenu);
  var $$ownership_validator = create_ownership_validator($$props);
  let items = prop($$props, "items", 24, () => []);
  let full = prop($$props, "full", 8, false);
  let open = prop($$props, "open", 12, false);
  let ulClass = prop($$props, "ulClass", 8, "grid grid-flow-row gap-y-4 md:gap-x-0 auto-col-max auto-row-max");
  let wrapperClass = mutable_source();
  let ulCls = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(full()), deep_read_state($$sanitized_props)),
    () => {
      set(wrapperClass, twMerge(full() && "border-y w-full", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(ulClass()), deep_read_state(full()), deep_read_state($$sanitized_props)),
    () => {
      set(ulCls, twMerge(ulClass(), full() && $$slots.extra ? "grid-cols-2" : "grid-cols-2 md:grid-cols-3", "text-sm font-medium", full() && $$slots.extra && "md:w-2/3", $$sanitized_props.classUl));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => full() ? "default" : "dropdown");
    let $1 = derived_safe_equal(() => !full());
    let $2 = derived_safe_equal(() => !full());
    $$ownership_validator.binding("open", Popper_default, open);
    add_svelte_meta(
      () => Popper_default(node, spread_props(
        {
          get color() {
            return get($0);
          },
          get border() {
            return get($1);
          },
          get rounded() {
            return get($2);
          },
          activeContent: true,
          arrow: false,
          trigger: "click",
          placement: "bottom",
          get yOnly() {
            return full();
          }
        },
        () => $$restProps,
        {
          get class() {
            return get(wrapperClass);
          },
          get open() {
            return open();
          },
          set open($$value) {
            open($$value);
          },
          $$events: {
            show($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(MegaMenu, ($$anchor2, $$slotProps) => {
            var div = root_137();
            var ul = child(div);
            add_svelte_meta(
              () => each(
                ul,
                5,
                items,
                index,
                ($$anchor3, item, index2) => {
                  var li = root_220();
                  var node_1 = child(li);
                  slot(
                    node_1,
                    $$props,
                    "default",
                    {
                      get item() {
                        return get(item);
                      },
                      index: index2
                    },
                    null
                  );
                  reset(li);
                  append($$anchor3, li);
                },
                ($$anchor3) => {
                  var fragment_1 = comment();
                  var node_2 = first_child(fragment_1);
                  slot(
                    node_2,
                    $$props,
                    "default",
                    {
                      get item() {
                        return deep_read_state(items()), untrack(() => items()[0]);
                      },
                      index: 0
                    },
                    null
                  );
                  append($$anchor3, fragment_1);
                }
              ),
              "each",
              MegaMenu,
              16,
              6
            );
            reset(ul);
            var node_3 = sibling(ul, 2);
            {
              var consequent = ($$anchor3) => {
                var div_1 = root_411();
                var node_4 = child(div_1);
                slot(node_4, $$props, "extra", {}, null);
                reset(div_1);
                append($$anchor3, div_1);
              };
              add_svelte_meta(
                () => if_block(node_3, ($$render) => {
                  if (deep_read_state(full()), untrack(() => full() && $$slots.extra)) $$render(consequent);
                }),
                "if",
                MegaMenu,
                24,
                4
              );
            }
            reset(div);
            template_effect(() => set_class(ul, 1, clsx(get(ulCls))));
            append($$anchor2, div);
          }),
          $$slots: { default: true },
          $$legacy: true
        }
      )),
      "component",
      MegaMenu,
      13,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  MegaMenu = hmr(MegaMenu, () => MegaMenu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MegaMenu[HMR].source;
    set(MegaMenu[HMR].source, module.default[HMR].original);
  });
}
var MegaMenu_default = MegaMenu;

// node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte
NavContainer[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte";
var root45 = add_locations(from_html(`<div><!></div>`), NavContainer[FILENAME], [[5, 0]]);
function NavContainer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["fluid"]);
  push($$props, false, NavContainer);
  let fluid = prop($$props, "fluid", 8, false);
  var $$exports = { ...legacy_api() };
  init();
  var div = root45();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(fluid()), deep_read_state($$sanitized_props), untrack(() => twMerge("mx-auto flex flex-wrap justify-between items-center ", fluid() ? "w-full" : "container", $$sanitized_props.class)))
  ]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  NavContainer = hmr(NavContainer, () => NavContainer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavContainer[HMR].source;
    set(NavContainer[HMR].source, module.default[HMR].original);
  });
}
var NavContainer_default = NavContainer;

// node_modules/flowbite-svelte/dist/navbar/Navbar.svelte
Navbar[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/Navbar.svelte";
function Navbar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["fluid"]);
  push($$props, false, Navbar);
  const $hidden = () => (validate_store(hidden, "hidden"), store_get(hidden, "$hidden", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let fluid = prop($$props, "fluid", 8, false);
  let hidden = writable(true);
  setContext("navHidden", hidden);
  let toggle = () => hidden.update((hidden2) => !hidden2);
  legacy_pre_effect(() => deep_read_state($$restProps), () => {
    $$restProps.color = $$restProps.color ?? "navbar";
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("px-2 sm:px-4 py-2.5 w-full", $$sanitized_props.class))));
    add_svelte_meta(
      () => Frame_default(node, spread_props({ tag: "nav" }, () => $$restProps, {
        get class() {
          return get($0);
        },
        children: wrap_snippet(Navbar, ($$anchor2, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          add_svelte_meta(
            () => NavContainer_default(node_1, {
              get fluid() {
                return fluid();
              },
              children: wrap_snippet(Navbar, ($$anchor3, $$slotProps2) => {
                var fragment_2 = comment();
                var node_2 = first_child(fragment_2);
                slot(
                  node_2,
                  $$props,
                  "default",
                  {
                    get hidden() {
                      return $hidden();
                    },
                    toggle,
                    get NavContainer() {
                      return NavContainer_default;
                    }
                  },
                  null
                );
                append($$anchor3, fragment_2);
              }),
              $$slots: { default: true }
            }),
            "component",
            Navbar,
            16,
            2,
            { componentTag: "NavContainer" }
          );
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      Navbar,
      15,
      0,
      { componentTag: "Frame" }
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Navbar = hmr(Navbar, () => Navbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navbar[HMR].source;
    set(Navbar[HMR].source, module.default[HMR].original);
  });
}
var Navbar_default = Navbar;

// node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte
NavBrand[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte";
var root46 = add_locations(from_html(`<a><!></a>`), NavBrand[FILENAME], [[5, 0]]);
function NavBrand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href"]);
  push($$props, false, NavBrand);
  let href = prop($$props, "href", 8, "");
  var $$exports = { ...legacy_api() };
  init();
  var a = root46();
  attribute_effect(a, ($0) => ({ href: href(), ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("flex items-center", $$sanitized_props.class)))
  ]);
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  NavBrand = hmr(NavBrand, () => NavBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavBrand[HMR].source;
    set(NavBrand[HMR].source, module.default[HMR].original);
  });
}
var NavBrand_default = NavBrand;

// node_modules/flowbite-svelte/dist/navbar/Menu.svelte
Menu[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/Menu.svelte";
var root47 = add_locations(from_svg(`<svg><!></svg>`), Menu[FILENAME], [[24, 0]]);
function Menu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "color", "variation", "ariaLabel"]);
  push($$props, false, Menu);
  let size = prop($$props, "size", 8, "24");
  let color = prop($$props, "color", 8, "currentColor");
  let variation = prop($$props, "variation", 8, "outline");
  let ariaLabel = prop($$props, "ariaLabel", 8, "bars 3");
  let viewBox = mutable_source();
  let svgpath = mutable_source();
  let svgoutline = `<path stroke="${color()}" stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"></path> `;
  let svgsolid = `<path fill="${color()}" clip-rule="evenodd" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path> `;
  legacy_pre_effect(() => deep_read_state(variation()), () => {
    switch (variation()) {
      case "outline":
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
        break;
      case "solid":
        set(svgpath, svgsolid);
        set(viewBox, "0 0 24 24");
        break;
      default:
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
    }
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var svg = root47();
  attribute_effect(svg, () => ({
    xmlns: "http://www.w3.org/2000/svg",
    role: "button",
    tabindex: "0",
    width: size(),
    height: size(),
    class: (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)),
    ...$$restProps,
    "aria-label": ariaLabel(),
    fill: "none",
    viewBox: get(viewBox),
    "stroke-width": "2"
  }));
  var node = child(svg);
  html(node, () => get(svgpath), true);
  reset(svg);
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Menu = hmr(Menu, () => Menu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Menu[HMR].source;
    set(Menu[HMR].source, module.default[HMR].original);
  });
}
var Menu_default = Menu;

// node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte
NavHamburger[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte";
function NavHamburger($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["menuClass", "onClick"]);
  push($$props, false, NavHamburger);
  let menuClass = prop($$props, "menuClass", 8, "h-6 w-6 shrink-0");
  let onClick = prop($$props, "onClick", 24, () => void 0);
  let btnClass = "ms-3 md:hidden";
  let hiddenStore = getContext("navHidden") ?? writable(true);
  const toggle = (ev) => hiddenStore.update((h) => !h);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge(btnClass, $$sanitized_props.class))));
    add_svelte_meta(
      () => ToolbarButton_default(node, spread_props({ name: "Open main menu" }, () => $$restProps, {
        get class() {
          return get($0);
        },
        $$events: {
          click(...$$args) {
            apply(() => onClick() || toggle, this, $$args, NavHamburger, [13, 47]);
          }
        },
        children: wrap_snippet(NavHamburger, ($$anchor2, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          {
            let $02 = derived_safe_equal(() => (deep_read_state(twMerge), deep_read_state(menuClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(menuClass(), $$sanitized_props.classMenu))));
            add_svelte_meta(
              () => Menu_default(node_1, {
                get class() {
                  return get($02);
                }
              }),
              "component",
              NavHamburger,
              14,
              2,
              { componentTag: "Menu" }
            );
          }
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      NavHamburger,
      13,
      0,
      { componentTag: "ToolbarButton" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  NavHamburger = hmr(NavHamburger, () => NavHamburger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavHamburger[HMR].source;
    set(NavHamburger[HMR].source, module.default[HMR].original);
  });
}
var NavHamburger_default = NavHamburger;

// node_modules/flowbite-svelte/dist/navbar/NavLi.svelte
NavLi[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavLi.svelte";
var root48 = add_locations(from_html(`<li><!></li>`), NavLi[FILENAME], [[16, 0]]);
function NavLi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["href", "activeClass", "nonActiveClass"]);
  push($$props, false, NavLi);
  const active = mutable_source();
  const liClass = mutable_source();
  let href = prop($$props, "href", 8, "");
  let activeClass = prop($$props, "activeClass", 24, () => void 0);
  let nonActiveClass = prop($$props, "nonActiveClass", 24, () => void 0);
  const context = getContext("navbarContext") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let navUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value);
  });
  legacy_pre_effect(() => (get(navUrl), deep_read_state(href())), () => {
    set(active, get(navUrl) ? strict_equals(href(), get(navUrl)) : false);
  });
  legacy_pre_effect(
    () => (twMerge, get(active), deep_read_state(activeClass()), deep_read_state(nonActiveClass()), deep_read_state($$sanitized_props)),
    () => {
      set(liClass, twMerge(
        "block py-2 pe-4 ps-3 md:p-0 rounded md:border-0",
        get(active) ? activeClass() ?? context.activeClass : nonActiveClass() ?? context.nonActiveClass,
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root48();
  var node = child(li);
  {
    validate_void_dynamic_element(() => href() ? "a" : "div");
    validate_dynamic_element_tag(() => href() ? "a" : "div");
    element(
      node,
      () => href() ? "a" : "div",
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({
          role: href() ? void 0 : "link",
          href: href(),
          ...$$restProps,
          class: get(liClass)
        }));
        event("blur", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("change", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("click", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focus", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keydown", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keypress", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keyup", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseenter", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseleave", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseover", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        var fragment = comment();
        var node_1 = first_child(fragment);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment);
      },
      void 0,
      [17, 2]
    );
  }
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  NavLi = hmr(NavLi, () => NavLi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavLi[HMR].source;
    set(NavLi[HMR].source, module.default[HMR].original);
  });
}
var NavLi_default = NavLi;

// node_modules/flowbite-svelte/dist/navbar/NavUl.svelte
NavUl[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavUl.svelte";
var root_138 = add_locations(from_html(`<div><!></div>`), NavUl[FILENAME], [[36, 2]]);
var root_320 = add_locations(from_html(`<div><ul><!></ul></div>`), NavUl[FILENAME], [[42, 2, [[43, 4]]]]);
function NavUl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "divClass",
    "ulClass",
    "hidden",
    "slideParams",
    "activeClass",
    "nonActiveClass"
  ]);
  push($$props, false, NavUl);
  const $hiddenStore = () => (validate_store(hiddenStore, "hiddenStore"), store_get(hiddenStore, "$hiddenStore", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let activeUrl = prop($$props, "activeUrl", 8, "");
  let divClass = prop($$props, "divClass", 8, "w-full md:block md:w-auto");
  let ulClass = prop($$props, "ulClass", 8, "flex flex-col p-4 mt-4 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:text-sm md:font-medium");
  let hidden = prop($$props, "hidden", 24, () => void 0);
  let slideParams = prop($$props, "slideParams", 24, () => ({ delay: 250, duration: 500, easing: sineIn }));
  let activeClass = prop($$props, "activeClass", 8, "text-white bg-primary-700 md:bg-transparent md:text-primary-700 md:dark:text-white dark:bg-primary-600 md:dark:bg-transparent");
  let nonActiveClass = prop($$props, "nonActiveClass", 8, "text-gray-700 hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-primary-700 dark:text-gray-400 md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent");
  const activeUrlStore = writable("");
  setContext("navbarContext", { activeClass: activeClass(), nonActiveClass: nonActiveClass() });
  setContext("activeUrl", activeUrlStore);
  let hiddenStore = getContext("navHidden");
  let _hidden = mutable_source();
  let _divClass = mutable_source();
  let _ulClass = mutable_source();
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect(() => (deep_read_state(hidden()), $hiddenStore()), () => {
    set(_hidden, hidden() ?? $hiddenStore() ?? true);
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(_divClass, twMerge(divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(ulClass()), deep_read_state($$sanitized_props)),
    () => {
      set(_ulClass, twMerge(ulClass(), $$sanitized_props.classUl));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_138();
      attribute_effect(div, () => ({
        ...$$restProps,
        class: get(_divClass),
        role: "button",
        tabindex: "0"
      }));
      var node_1 = child(div);
      add_svelte_meta(
        () => Frame_default(node_1, {
          tag: "ul",
          border: true,
          rounded: true,
          color: "navbarUl",
          get class() {
            return get(_ulClass);
          },
          children: wrap_snippet(NavUl, ($$anchor3, $$slotProps) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            slot(node_2, $$props, "default", {}, null);
            append($$anchor3, fragment_1);
          }),
          $$slots: { default: true }
        }),
        "component",
        NavUl,
        37,
        4,
        { componentTag: "Frame" }
      );
      reset(div);
      transition(3, div, () => slide, slideParams);
      event("click", div, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var div_1 = root_320();
      attribute_effect(div_1, () => ({
        ...$$restProps,
        class: get(_divClass),
        hidden: get(_hidden)
      }));
      var ul = child(div_1);
      var node_3 = child(ul);
      slot(node_3, $$props, "default", {}, null);
      reset(ul);
      reset(div_1);
      template_effect(() => set_class(ul, 1, clsx(get(_ulClass))));
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(_hidden)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      NavUl,
      35,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  NavUl = hmr(NavUl, () => NavUl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavUl[HMR].source;
    set(NavUl[HMR].source, module.default[HMR].original);
  });
}
var NavUl_default = NavUl;

// node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte
PaginationItem[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte";
function PaginationItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, PaginationItem);
  let href = prop($$props, "href", 24, () => void 0);
  let active = prop($$props, "active", 8, false);
  let activeClass = prop($$props, "activeClass", 8, "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white");
  let normalClass = prop($$props, "normalClass", 8, "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white");
  let large = prop($$props, "large", 8, false);
  const group = getContext("group");
  const table = getContext("table");
  let defaultClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(large()), deep_read_state(active()), deep_read_state(activeClass()), deep_read_state(normalClass()), deep_read_state($$sanitized_props)),
    () => {
      set(defaultClass, twMerge("flex items-center font-medium", large() ? "h-10 px-4 text-base" : "h-8 px-3 text-sm", group ? "" : table ? "rounded" : "rounded-lg", table ? "" : "border", active() ? activeClass() : normalClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(() => href() ? "a" : "button");
    validate_dynamic_element_tag(() => href() ? "a" : "button");
    element(
      node,
      () => href() ? "a" : "button",
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({
          href: href(),
          class: get(defaultClass),
          role: href() ? "button" : void 0
        }));
        event("blur", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("change", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("click", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("focus", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keydown", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keypress", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("keyup", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseenter", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseleave", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        event("mouseover", $$element, function($$arg) {
          bubble_event.call(this, $$props, $$arg);
        });
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      },
      void 0,
      [23, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationItem = hmr(PaginationItem, () => PaginationItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationItem[HMR].source;
    set(PaginationItem[HMR].source, module.default[HMR].original);
  });
}
var PaginationItem_default = PaginationItem;

// node_modules/flowbite-svelte/dist/pagination/Pagination.svelte
Pagination[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/Pagination.svelte";
var root_321 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[30, 6]]);
var root49 = add_locations(from_html(`<nav><ul><li><!></li> <!> <li><!></li></ul></nav>`), Pagination[FILENAME], [[22, 0, [[23, 2, [[24, 4], [36, 4]]]]]]);
function Pagination($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pagination);
  let pages = prop($$props, "pages", 24, () => []);
  let activeClass = prop($$props, "activeClass", 8, "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white");
  let normalClass = prop($$props, "normalClass", 8, "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white");
  let ulClass = prop($$props, "ulClass", 8, "inline-flex -space-x-px rtl:space-x-reverse items-center");
  let table = prop($$props, "table", 8, false);
  let large = prop($$props, "large", 8, false);
  let ariaLabel = prop($$props, "ariaLabel", 8, "Page navigation");
  const dispatch = createEventDispatcher();
  setContext("group", true);
  setContext("table", table());
  const previous = () => {
    dispatch("previous");
  };
  const next2 = () => {
    dispatch("next");
  };
  var $$exports = { ...legacy_api() };
  init();
  var nav = root49();
  var ul = child(nav);
  var li = child(ul);
  var node = child(li);
  {
    let $0 = derived_safe_equal(() => table() ? "rounded-l" : "rounded-s-lg");
    add_svelte_meta(
      () => PaginationItem_default(node, {
        get large() {
          return large();
        },
        get normalClass() {
          return normalClass();
        },
        get class() {
          return get($0);
        },
        $$events: { click: previous },
        children: wrap_snippet(Pagination, ($$anchor2, $$slotProps) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          slot(node_1, $$props, "prev", {}, ($$anchor3) => {
            var text2 = text("Previous");
            append($$anchor3, text2);
          });
          append($$anchor2, fragment);
        }),
        $$slots: { default: true }
      }),
      "component",
      Pagination,
      25,
      6,
      { componentTag: "PaginationItem" }
    );
  }
  reset(li);
  var node_2 = sibling(li, 2);
  add_svelte_meta(
    () => each(node_2, 1, pages, index, ($$anchor2, $$item) => {
      let name = () => get($$item).name;
      name();
      let href = () => get($$item).href;
      href();
      let active = () => get($$item).active;
      active();
      var li_1 = root_321();
      var node_3 = child(li_1);
      add_svelte_meta(
        () => PaginationItem_default(node_3, {
          get large() {
            return large();
          },
          get active() {
            return active();
          },
          get activeClass() {
            return activeClass();
          },
          get normalClass() {
            return normalClass();
          },
          get href() {
            return href();
          },
          $$events: {
            blur($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            change($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            click($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            focus($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keydown($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keypress($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            keyup($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseenter($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseleave($$arg) {
              bubble_event.call(this, $$props, $$arg);
            },
            mouseover($$arg) {
              bubble_event.call(this, $$props, $$arg);
            }
          },
          children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
            next();
            var text_1 = text();
            template_effect(() => set_text(text_1, name()));
            append($$anchor3, text_1);
          }),
          $$slots: { default: true }
        }),
        "component",
        Pagination,
        31,
        8,
        { componentTag: "PaginationItem" }
      );
      reset(li_1);
      append($$anchor2, li_1);
    }),
    "each",
    Pagination,
    29,
    4
  );
  var li_2 = sibling(node_2, 2);
  var node_4 = child(li_2);
  {
    let $0 = derived_safe_equal(() => table() ? "rounded-r" : "rounded-e-lg");
    add_svelte_meta(
      () => PaginationItem_default(node_4, {
        get large() {
          return large();
        },
        get normalClass() {
          return normalClass();
        },
        get class() {
          return get($0);
        },
        $$events: { click: next2 },
        children: wrap_snippet(Pagination, ($$anchor2, $$slotProps) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          slot(node_5, $$props, "next", {}, ($$anchor3) => {
            var text_2 = text("Next");
            append($$anchor3, text_2);
          });
          append($$anchor2, fragment_2);
        }),
        $$slots: { default: true }
      }),
      "component",
      Pagination,
      37,
      6,
      { componentTag: "PaginationItem" }
    );
  }
  reset(li_2);
  reset(ul);
  reset(nav);
  template_effect(
    ($0) => {
      set_attribute(nav, "aria-label", ariaLabel());
      set_class(ul, 1, $0);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(ulClass()), deep_read_state(table()), deep_read_state($$sanitized_props), untrack(() => twMerge(ulClass(), table() && "divide-x rtl:divide-x-reverse dark divide-gray-700 dark:divide-gray-700", $$sanitized_props.class))))
    ]
  );
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Pagination = hmr(Pagination, () => Pagination[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pagination[HMR].source;
    set(Pagination[HMR].source, module.default[HMR].original);
  });
}
var Pagination_default = Pagination;

// node_modules/flowbite-svelte/dist/popover/Popover.svelte
Popover[FILENAME] = "node_modules/flowbite-svelte/dist/popover/Popover.svelte";
var root_322 = add_locations(from_html(`<h3 class="font-semibold text-gray-900 dark:text-white"> </h3>`), Popover[FILENAME], [[10, 8]]);
var root_221 = add_locations(from_html(`<div class="py-2 px-3 bg-gray-100 rounded-t-md border-b border-gray-200 dark:border-gray-600 dark:bg-gray-700"><!></div>`), Popover[FILENAME], [[8, 4]]);
var root_139 = add_locations(from_html(`<!> <div><!></div>`, 1), Popover[FILENAME], [[14, 2]]);
function Popover($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["title", "defaultClass"]);
  push($$props, false, Popover);
  let title = prop($$props, "title", 8, "");
  let defaultClass = prop($$props, "defaultClass", 8, "py-2 px-3");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Popper_default(node, spread_props(
      {
        activeContent: true,
        border: true,
        shadow: true,
        rounded: true
      },
      () => $$restProps,
      {
        get class() {
          return `dark:!border-gray-600 ${(deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)) ?? ""}`;
        },
        $$events: {
          show($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(Popover, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_139();
          var node_1 = first_child(fragment_1);
          {
            var consequent = ($$anchor3) => {
              var div = root_221();
              var node_2 = child(div);
              slot(node_2, $$props, "title", {}, ($$anchor4) => {
                var h3 = root_322();
                var text2 = child(h3, true);
                reset(h3);
                template_effect(() => set_text(text2, title()));
                append($$anchor4, h3);
              });
              reset(div);
              append($$anchor3, div);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if (deep_read_state(title()), untrack(() => $$slots.title || title())) $$render(consequent);
              }),
              "if",
              Popover,
              7,
              2
            );
          }
          var div_1 = sibling(node_1, 2);
          var node_3 = child(div_1);
          slot(node_3, $$props, "default", {}, null);
          reset(div_1);
          template_effect(() => set_class(div_1, 1, clsx(defaultClass())));
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }
    )),
    "component",
    Popover,
    6,
    0,
    { componentTag: "Popper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Popover = hmr(Popover, () => Popover[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popover[HMR].source;
    set(Popover[HMR].source, module.default[HMR].original);
  });
}
var Popover_default = Popover;

// node_modules/flowbite-svelte/dist/progress/Progressbar.svelte
Progressbar[FILENAME] = "node_modules/flowbite-svelte/dist/progress/Progressbar.svelte";
var root_140 = add_locations(from_html(`<div><span class="text-base font-medium text-blue-700 dark:text-white"> </span> <span class="text-sm font-medium text-blue-700 dark:text-white"> </span></div>`), Progressbar[FILENAME], [[34, 2, [[35, 4], [36, 4]]]]);
var root_222 = add_locations(from_html(`<div> </div>`), Progressbar[FILENAME], [[41, 4]]);
var root_323 = add_locations(from_html(`<div></div>`), Progressbar[FILENAME], [[45, 4]]);
var root50 = add_locations(from_html(`<!> <div><!></div>`, 1), Progressbar[FILENAME], [[39, 0]]);
function Progressbar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "progress",
    "precision",
    "tweenDuration",
    "animate",
    "size",
    "labelInside",
    "labelOutside",
    "easing",
    "color",
    "labelInsideClass",
    "divClass",
    "progressClass"
  ]);
  push($$props, false, Progressbar);
  const $_progress = () => (validate_store(_progress, "_progress"), store_get(_progress, "$_progress", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let progress = prop($$props, "progress", 8, "45");
  let precision = prop($$props, "precision", 8, 0);
  let tweenDuration = prop($$props, "tweenDuration", 8, 400);
  let animate = prop($$props, "animate", 8, false);
  let size = prop($$props, "size", 8, "h-2.5");
  let labelInside = prop($$props, "labelInside", 8, false);
  let labelOutside = prop($$props, "labelOutside", 8, "");
  let easing = prop($$props, "easing", 8, cubicOut);
  let color = prop($$props, "color", 8, "primary");
  let labelInsideClass = prop($$props, "labelInsideClass", 8, "text-primary-100 text-xs font-medium text-center p-0.5 leading-none rounded-full");
  let divClass = prop($$props, "divClass", 8, "w-full bg-gray-200 rounded-full dark:bg-gray-700");
  let progressClass = prop($$props, "progressClass", 8, "");
  const _progress = tweened(0, { duration: animate() ? tweenDuration() : 0, easing: easing() });
  const barColors = {
    primary: "bg-primary-600",
    blue: "bg-blue-600",
    gray: "bg-gray-600 dark:bg-gray-300",
    red: "bg-red-600 dark:bg-red-500",
    green: "bg-green-600 dark:bg-green-500",
    yellow: "bg-yellow-400",
    purple: "bg-purple-600 dark:bg-purple-500",
    indigo: "bg-indigo-600 dark:bg-indigo-500"
  };
  legacy_pre_effect(() => deep_read_state(progress()), () => {
    _progress.set(Number(progress()));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root50();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_140();
      attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
        () => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("flex justify-between mb-1", $$sanitized_props.classLabelOutside)))
      ]);
      var span = child(div);
      var text2 = child(span, true);
      reset(span);
      var span_1 = sibling(span, 2);
      var text_1 = child(span_1);
      reset(span_1);
      reset(div);
      template_effect(() => {
        set_text(text2, labelOutside());
        set_text(text_1, `${progress() ?? ""}%`);
      });
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (labelOutside()) $$render(consequent);
      }),
      "if",
      Progressbar,
      33,
      0
    );
  }
  var div_1 = sibling(node, 2);
  var node_1 = child(div_1);
  {
    var consequent_1 = ($$anchor2) => {
      var div_2 = root_222();
      var text_2 = child(div_2);
      reset(div_2);
      template_effect(
        ($0, $1) => {
          set_class(div_2, 1, $0);
          set_style(div_2, `width: ${$_progress() ?? ""}%`);
          set_text(text_2, `${$1 ?? ""}%`);
        },
        [
          () => clsx((deep_read_state(twMerge), deep_read_state(color()), deep_read_state(labelInsideClass()), untrack(() => twMerge(barColors[color()], labelInsideClass())))),
          () => ($_progress(), deep_read_state(precision()), untrack(() => $_progress().toFixed(precision())))
        ]
      );
      append($$anchor2, div_2);
    };
    var alternate = ($$anchor2) => {
      var div_3 = root_323();
      template_effect(
        ($0) => {
          set_class(div_3, 1, $0);
          set_style(div_3, `width: ${$_progress() ?? ""}%`);
        },
        [
          () => clsx((deep_read_state(twMerge), deep_read_state(color()), deep_read_state(size()), deep_read_state(progressClass()), untrack(() => twMerge(barColors[color()], size(), "rounded-full", progressClass()))))
        ]
      );
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (labelInside()) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Progressbar,
      40,
      2
    );
  }
  reset(div_1);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state(size()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), size(), $$sanitized_props.class))))
  ]);
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Progressbar = hmr(Progressbar, () => Progressbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progressbar[HMR].source;
    set(Progressbar[HMR].source, module.default[HMR].original);
  });
}
var Progressbar_default = Progressbar;

// node_modules/flowbite-svelte/dist/rating/Star.svelte
Star[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Star.svelte";
var root_141 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Star[FILENAME], [[15, 8], [16, 8], [17, 8], [18, 8]]);
var root_223 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Star[FILENAME], [[20, 8], [21, 8]]);
var root51 = add_locations(
  from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><g stroke-width="2"><polygon points="165.000, 185.000, 188.511, 197.361, 184.021, 171.180, 
    203.042, 152.639, 176.756, 148.820, 165.000, 125.000, 
    153.244, 148.820, 126.958, 152.639, 145.979, 171.180,
    141.489, 197.361, 165.000, 185.000"></polygon></g></svg>`),
  Star[FILENAME],
  [[11, 0, [[12, 2, [[13, 4]]], [25, 2, [[26, 4]]]]]]
);
function Star($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Star);
  let fillPercent = prop($$props, "fillPercent", 8, 100);
  let fillColor = prop($$props, "fillColor", 8, "#F5CA14");
  let strokeColor = prop($$props, "strokeColor", 8, "#F5CA14");
  let size = prop($$props, "size", 8, 24);
  let ariaLabel = prop($$props, "ariaLabel", 8, "star");
  let id = prop($$props, "id", 24, generateId_default);
  let role = prop($$props, "role", 8, "img");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root51();
  attribute_effect(svg, () => ({
    width: size(),
    height: size(),
    ...$$restProps,
    class: (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)),
    "aria-label": ariaLabel(),
    viewBox: "100 100 120 120",
    role: role()
  }));
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_141();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_223();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Star,
      14,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var g = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", id());
    set_attribute(g, "fill", `url(#${id() ?? ""})`);
    set_attribute(g, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Star = hmr(Star, () => Star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star[HMR].source;
    set(Star[HMR].source, module.default[HMR].original);
  });
}
var Star_default = Star;

// node_modules/flowbite-svelte/dist/rating/Rating.svelte
Rating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Rating.svelte";
var root_142 = add_locations(from_html(`<!> <p class="ms-2 text-sm font-bold text-gray-900 dark:text-white"> </p> <!>`, 1), Rating[FILENAME], [[24, 4]]);
var root_224 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Rating[FILENAME], []);
var root52 = add_locations(from_html(`<div><!></div>`), Rating[FILENAME], [[21, 0]]);
function Rating($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rating);
  const fullStars = mutable_source();
  const rateDiffence = mutable_source();
  const percentRating = mutable_source();
  const grayStars = mutable_source();
  let divClass = prop($$props, "divClass", 8, "flex items-center");
  let size = prop($$props, "size", 8, 24);
  let total = prop($$props, "total", 8, 5);
  let rating = prop($$props, "rating", 8, 4);
  let partialId = prop($$props, "partialId", 24, () => "partialStar" + generateId_default());
  let icon = prop($$props, "icon", 8, Star_default);
  let count = prop($$props, "count", 8, false);
  let iconFillColor = prop($$props, "iconFillColor", 8, "#F5CA14");
  let iconStrokeColor = prop($$props, "iconStrokeColor", 8, "#F5CA14");
  const fullStarId = generateId_default();
  const grayStarId = generateId_default();
  legacy_pre_effect(() => deep_read_state(rating()), () => {
    set(fullStars, Math.floor(rating()));
  });
  legacy_pre_effect(() => (deep_read_state(rating()), get(fullStars)), () => {
    set(rateDiffence, rating() - get(fullStars));
  });
  legacy_pre_effect(() => get(rateDiffence), () => {
    set(percentRating, Math.round(get(rateDiffence) * 100));
  });
  legacy_pre_effect(
    () => (deep_read_state(total()), get(fullStars), get(rateDiffence)),
    () => {
      set(grayStars, total() - (get(fullStars) + Math.ceil(get(rateDiffence))));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root52();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_142();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => component(node_1, icon, ($$anchor3, $$component) => {
          $$component($$anchor3, {
            get fillColor() {
              return iconFillColor();
            },
            get strokeColor() {
              return iconStrokeColor();
            },
            fillPercent: 100,
            get size() {
              return size();
            }
          });
        }),
        "component",
        Rating,
        23,
        4,
        { componentTag: "svelte:component" }
      );
      var p = sibling(node_1, 2);
      var text2 = child(p, true);
      reset(p);
      var node_2 = sibling(p, 2);
      slot(node_2, $$props, "default", {}, null);
      template_effect(() => set_text(text2, rating()));
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_224();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(
        () => each(node_3, 1, () => (get(fullStars), untrack(() => Array(get(fullStars)))), index, ($$anchor3, star) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(
            () => component(node_4, icon, ($$anchor4, $$component) => {
              $$component($$anchor4, {
                get fillColor() {
                  return iconFillColor();
                },
                get strokeColor() {
                  return iconStrokeColor();
                },
                get size() {
                  return size();
                },
                fillPercent: 100,
                get id() {
                  return fullStarId;
                }
              });
            }),
            "component",
            Rating,
            28,
            6,
            { componentTag: "svelte:component" }
          );
          append($$anchor3, fragment_2);
        }),
        "each",
        Rating,
        27,
        4
      );
      var node_5 = sibling(node_3, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          add_svelte_meta(
            () => component(node_6, icon, ($$anchor4, $$component) => {
              $$component($$anchor4, {
                get fillColor() {
                  return iconFillColor();
                },
                get strokeColor() {
                  return iconStrokeColor();
                },
                get size() {
                  return size();
                },
                get fillPercent() {
                  return get(percentRating);
                },
                get id() {
                  return partialId();
                }
              });
            }),
            "component",
            Rating,
            31,
            6,
            { componentTag: "svelte:component" }
          );
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (get(percentRating)) $$render(consequent_1);
          }),
          "if",
          Rating,
          30,
          4
        );
      }
      var node_7 = sibling(node_5, 2);
      add_svelte_meta(
        () => each(node_7, 1, () => (get(grayStars), untrack(() => Array(get(grayStars)))), index, ($$anchor3, star) => {
          var fragment_4 = comment();
          var node_8 = first_child(fragment_4);
          add_svelte_meta(
            () => component(node_8, icon, ($$anchor4, $$component) => {
              $$component($$anchor4, {
                get fillColor() {
                  return iconFillColor();
                },
                get strokeColor() {
                  return iconStrokeColor();
                },
                get size() {
                  return size();
                },
                fillPercent: 0,
                get id() {
                  return grayStarId;
                }
              });
            }),
            "component",
            Rating,
            34,
            6,
            { componentTag: "svelte:component" }
          );
          append($$anchor3, fragment_4);
        }),
        "each",
        Rating,
        33,
        4
      );
      var node_9 = sibling(node_7, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_10 = first_child(fragment_5);
          slot(node_10, $$props, "text", {}, null);
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(node_9, ($$render) => {
            if (untrack(() => $$slots.text)) $$render(consequent_2);
          }),
          "if",
          Rating,
          36,
          4
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (count()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Rating,
      22,
      2
    );
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Rating = hmr(Rating, () => Rating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rating[HMR].source;
    set(Rating[HMR].source, module.default[HMR].original);
  });
}
var Rating_default = Rating;

// node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte
AdvancedRating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte";
var root_324 = add_locations(from_html(`<div><span> </span> <div><div></div></div> <span> </span></div>`), AdvancedRating[FILENAME], [[23, 2, [[24, 4], [25, 4, [[26, 6]]], [28, 4]]]]);
var root53 = add_locations(from_html(`<!> <!> <!>`, 1), AdvancedRating[FILENAME], []);
function AdvancedRating($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, AdvancedRating);
  let ratings = prop($$props, "ratings", 24, () => []);
  let divClass = prop($$props, "divClass", 8, "flex items-center mt-4");
  let labelClass2 = prop($$props, "labelClass", 8, "text-sm font-medium text-gray-600 dark:text-gray-500");
  let ratingDivClass = prop($$props, "ratingDivClass", 8, "mx-4 w-2/4 h-5 bg-gray-200 rounded dark:bg-gray-700");
  let ratingClass = prop($$props, "ratingClass", 8, "h-5 bg-yellow-400 rounded");
  let rightLabelClass = prop($$props, "rightLabelClass", 8, "text-sm font-medium text-gray-600 dark:text-gray-500");
  let unit = prop($$props, "unit", 8, "%");
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let labelCls = twMerge(labelClass2(), $$sanitized_props.classLabel);
  let ratingDivCls = twMerge(ratingDivClass(), $$sanitized_props.classRatingDiv);
  let ratingCls = twMerge(ratingClass(), $$sanitized_props.classRating);
  let rightLabelCls = twMerge(rightLabelClass(), $$sanitized_props.classRightLabel);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root53();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      slot(node_1, $$props, "rating", {}, null);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (untrack(() => $$slots.rating)) $$render(consequent);
      }),
      "if",
      AdvancedRating,
      16,
      0
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      slot(node_3, $$props, "globalText", {}, null);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (untrack(() => $$slots.globalText)) $$render(consequent_1);
      }),
      "if",
      AdvancedRating,
      19,
      0
    );
  }
  var node_4 = sibling(node_2, 2);
  add_svelte_meta(
    () => each(node_4, 1, ratings, index, ($$anchor2, $$item) => {
      let label = () => get($$item).label;
      label();
      let rating = () => get($$item).rating;
      rating();
      var div = root_324();
      var span = child(div);
      var text2 = child(span, true);
      reset(span);
      var div_1 = sibling(span, 2);
      var div_2 = child(div_1);
      reset(div_1);
      var span_1 = sibling(div_1, 2);
      var text_1 = child(span_1);
      reset(span_1);
      reset(div);
      template_effect(() => {
        set_class(div, 1, clsx(divCls));
        set_class(span, 1, clsx(labelCls));
        set_text(text2, label());
        set_class(div_1, 1, clsx(ratingDivCls));
        set_class(div_2, 1, clsx(ratingCls));
        set_style(div_2, `width: ${rating() ?? ""}%`);
        set_class(span_1, 1, clsx(rightLabelCls));
        set_text(text_1, `${rating() ?? ""}${unit() ?? ""}`);
      });
      append($$anchor2, div);
    }),
    "each",
    AdvancedRating,
    22,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  AdvancedRating = hmr(AdvancedRating, () => AdvancedRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AdvancedRating[HMR].source;
    set(AdvancedRating[HMR].source, module.default[HMR].original);
  });
}
var AdvancedRating_default = AdvancedRating;

// node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte
ScoreRating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte";
var root_143 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[14, 4]]);
var root_225 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[17, 4]]);
var root_325 = add_locations(from_html(`<span></span> <p> </p>`, 1), ScoreRating[FILENAME], [[20, 4], [21, 4]]);
var root_412 = add_locations(from_html(`<a> </a>`), ScoreRating[FILENAME], [[24, 4]]);
var root_56 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="flex items-center mb-3"><div class="w-full bg-gray-200 rounded h-2.5 dark:bg-gray-700 me-2"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [30, 6, [[31, 8], [32, 8, [[33, 10, [[34, 12]]], [36, 10]]]]]
]);
var root_63 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="flex items-center mb-3"><div class="w-full bg-gray-200 rounded h-2.5 dark:bg-gray-700 me-2"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [43, 6, [[44, 8], [45, 8, [[46, 10, [[47, 12]]], [49, 10]]]]]
]);
var root54 = add_locations(from_html(`<div class="flex items-center mb-5"><!> <!> <!> <!></div> <div class="gap-8 sm:grid sm:grid-cols-2"><div></div> <div></div></div>`, 1), ScoreRating[FILENAME], [[12, 0], [27, 0, [[28, 2], [41, 2]]]]);
function ScoreRating($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ScoreRating);
  let ratings = prop($$props, "ratings", 24, () => []);
  let ratings2 = prop($$props, "ratings2", 24, () => []);
  let headerLabel = prop($$props, "headerLabel", 8);
  let desc1Class = prop($$props, "desc1Class", 8, "bg-primary-100 w-8 text-primary-800 text-sm font-semibold inline-flex items-center p-1.5 rounded dark:bg-primary-200 dark:text-primary-800");
  let desc2Class = prop($$props, "desc2Class", 8, "ms-2 w-24 font-medium text-gray-900 dark:text-white");
  let desc3spanClass = prop($$props, "desc3spanClass", 8, "mx-2 w-1 h-1 bg-gray-900 rounded-full dark:bg-gray-500");
  let desc3pClass = prop($$props, "desc3pClass", 8, "text-sm  w-24 font-medium text-gray-500 dark:text-gray-400");
  let linkClass = prop($$props, "linkClass", 8, "ms-auto w-32 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500");
  let barColor = prop($$props, "barColor", 8, "bg-primary-600 h-2.5 rounded dark:bg-primary-500");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root54();
  var div = first_child(fragment);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var p = root_143();
      var text2 = child(p, true);
      reset(p);
      template_effect(() => {
        set_class(p, 1, clsx(desc1Class()));
        set_text(text2, (deep_read_state(headerLabel()), untrack(() => headerLabel().desc1)));
      });
      append($$anchor2, p);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state(headerLabel()), untrack(() => headerLabel().desc1)) $$render(consequent);
      }),
      "if",
      ScoreRating,
      13,
      2
    );
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var p_1 = root_225();
      var text_1 = child(p_1, true);
      reset(p_1);
      template_effect(() => {
        set_class(p_1, 1, clsx(desc2Class()));
        set_text(text_1, (deep_read_state(headerLabel()), untrack(() => headerLabel().desc2)));
      });
      append($$anchor2, p_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (deep_read_state(headerLabel()), untrack(() => headerLabel().desc2)) $$render(consequent_1);
      }),
      "if",
      ScoreRating,
      16,
      2
    );
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = root_325();
      var span = first_child(fragment_1);
      var p_2 = sibling(span, 2);
      var text_2 = child(p_2, true);
      reset(p_2);
      template_effect(() => {
        set_class(span, 1, clsx(desc3spanClass()));
        set_class(p_2, 1, clsx(desc3pClass()));
        set_text(text_2, (deep_read_state(headerLabel()), untrack(() => headerLabel().desc3)));
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (deep_read_state(headerLabel()), untrack(() => headerLabel().desc3)) $$render(consequent_2);
      }),
      "if",
      ScoreRating,
      19,
      2
    );
  }
  var node_3 = sibling(node_2, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var a = root_412();
      var text_3 = child(a, true);
      reset(a);
      template_effect(() => {
        set_attribute(a, "href", (deep_read_state(headerLabel()), untrack(() => headerLabel().link.url)));
        set_class(a, 1, clsx(linkClass()));
        set_text(text_3, (deep_read_state(headerLabel()), untrack(() => headerLabel().link.label)));
      });
      append($$anchor2, a);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (deep_read_state(headerLabel()), untrack(() => headerLabel().link)) $$render(consequent_3);
      }),
      "if",
      ScoreRating,
      23,
      2
    );
  }
  reset(div);
  var div_1 = sibling(div, 2);
  var div_2 = child(div_1);
  add_svelte_meta(
    () => each(div_2, 5, ratings, index, ($$anchor2, $$item) => {
      let label = () => get($$item).label;
      label();
      let rating = () => get($$item).rating;
      rating();
      var dl = root_56();
      var dt = child(dl);
      var text_4 = child(dt, true);
      reset(dt);
      var dd = sibling(dt, 2);
      var div_3 = child(dd);
      var div_4 = child(div_3);
      reset(div_3);
      var span_1 = sibling(div_3, 2);
      var text_5 = child(span_1, true);
      reset(span_1);
      reset(dd);
      reset(dl);
      template_effect(() => {
        set_text(text_4, label());
        set_class(div_4, 1, clsx(barColor()));
        set_style(div_4, `width: ${rating() * 10}%`);
        set_text(text_5, rating());
      });
      append($$anchor2, dl);
    }),
    "each",
    ScoreRating,
    29,
    4
  );
  reset(div_2);
  var div_5 = sibling(div_2, 2);
  add_svelte_meta(
    () => each(div_5, 5, ratings2, index, ($$anchor2, $$item) => {
      let label = () => get($$item).label;
      label();
      let rating = () => get($$item).rating;
      rating();
      var dl_1 = root_63();
      var dt_1 = child(dl_1);
      var text_6 = child(dt_1, true);
      reset(dt_1);
      var dd_1 = sibling(dt_1, 2);
      var div_6 = child(dd_1);
      var div_7 = child(div_6);
      reset(div_6);
      var span_2 = sibling(div_6, 2);
      var text_7 = child(span_2, true);
      reset(span_2);
      reset(dd_1);
      reset(dl_1);
      template_effect(() => {
        set_text(text_6, label());
        set_class(div_7, 1, clsx(barColor()));
        set_style(div_7, `width: ${rating() * 10}%`);
        set_text(text_7, rating());
      });
      append($$anchor2, dl_1);
    }),
    "each",
    ScoreRating,
    42,
    4
  );
  reset(div_5);
  reset(div_1);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ScoreRating = hmr(ScoreRating, () => ScoreRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ScoreRating[HMR].source;
    set(ScoreRating[HMR].source, module.default[HMR].original);
  });
}
var ScoreRating_default = ScoreRating;

// node_modules/flowbite-svelte/dist/rating/RatingComment.svelte
RatingComment[FILENAME] = "node_modules/flowbite-svelte/dist/rating/RatingComment.svelte";
var root_144 = add_locations(from_html(`<p slot="text" class="ms-2 text-sm font-medium text-gray-500 dark:text-gray-400"> </p>`), RatingComment[FILENAME], [[22, 6]]);
var root_226 = add_locations(from_html(`<h3 class="ms-2 text-sm font-semibold text-gray-900 dark:text-white"> </h3>`), RatingComment[FILENAME], [[27, 6]]);
var root_326 = add_locations(from_html(`<footer class="mb-5 text-sm text-gray-500 dark:text-gray-400"><p> </p></footer>`), RatingComment[FILENAME], [[33, 4, [[34, 6]]]]);
var root_73 = add_locations(from_html(`<a class="ps-4 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500">Report abuse</a>`), RatingComment[FILENAME], [[48, 10]]);
var root_413 = add_locations(from_html(`<div class="flex items-center mt-3 space-x-3 rtl:space-x-reverse divide-x rtl:divide-x-reverse divide-gray-200 dark:divide-gray-600"><!> <!></div>`), RatingComment[FILENAME], [[43, 6]]);
var root55 = add_locations(from_html(`<article><div class="flex items-center mb-4 space-x-4 rtl:space-x-reverse"><img class="w-10 h-10 rounded-full"/> <div class="space-y-1 font-medium dark:text-white"><p> <time datetime="2014-08-16 19:00" class="block text-sm text-gray-500 dark:text-gray-400"> </time></p></div></div> <div class="flex items-center mb-1"><!> <!></div> <!> <!> <aside><p class="mt-1 text-xs text-gray-500 dark:text-gray-400"><!></p> <!></aside></article>`), RatingComment[FILENAME], [
  [
    8,
    0,
    [
      [9, 2, [[10, 4], [11, 4, [[12, 6, [[14, 8]]]]]]],
      [20, 2],
      [38, 2, [[39, 4]]]
    ]
  ]
]);
function RatingComment($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RatingComment);
  let helpfullink = prop($$props, "helpfullink", 8, "");
  let abuselink = prop($$props, "abuselink", 8, "");
  let comment2 = prop($$props, "comment", 8);
  var $$exports = { ...legacy_api() };
  init();
  var article = root55();
  var div = child(article);
  var img = child(div);
  var div_1 = sibling(img, 2);
  var p = child(div_1);
  var text2 = child(p);
  var time = sibling(text2);
  var text_1 = child(time, true);
  reset(time);
  reset(p);
  reset(div_1);
  reset(div);
  var div_2 = sibling(div, 2);
  var node = child(div_2);
  add_svelte_meta(
    () => Rating_default(node, {
      get total() {
        return deep_read_state(comment2()), untrack(() => comment2().total);
      },
      get rating() {
        return deep_read_state(comment2()), untrack(() => comment2().rating);
      },
      $$slots: {
        text: ($$anchor2, $$slotProps) => {
          var p_1 = root_144();
          var text_2 = child(p_1);
          reset(p_1);
          template_effect(() => set_text(text_2, `${(deep_read_state(comment2()), untrack(() => comment2().rating)) ?? ""} out of ${(deep_read_state(comment2()), untrack(() => comment2().total)) ?? ""}`));
          append($$anchor2, p_1);
        }
      }
    }),
    "component",
    RatingComment,
    21,
    4,
    { componentTag: "Rating" }
  );
  var node_1 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_226();
      var text_3 = child(h3, true);
      reset(h3);
      template_effect(() => set_text(text_3, (deep_read_state(comment2()), untrack(() => comment2().heading))));
      append($$anchor2, h3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (deep_read_state(comment2()), untrack(() => comment2().heading)) $$render(consequent);
      }),
      "if",
      RatingComment,
      26,
      4
    );
  }
  reset(div_2);
  var node_2 = sibling(div_2, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var footer = root_326();
      var p_2 = child(footer);
      var text_4 = child(p_2);
      reset(p_2);
      reset(footer);
      template_effect(() => set_text(text_4, `Reviewed in ${(deep_read_state(comment2()), untrack(() => comment2().address)) ?? ""} on ${(deep_read_state(comment2()), untrack(() => comment2().datetime)) ?? ""}`));
      append($$anchor2, footer);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (deep_read_state(comment2()), untrack(() => comment2().address || comment2().datetime)) $$render(consequent_1);
      }),
      "if",
      RatingComment,
      32,
      2
    );
  }
  var node_3 = sibling(node_2, 2);
  slot(node_3, $$props, "default", {}, null);
  var aside = sibling(node_3, 2);
  var p_3 = child(aside);
  var node_4 = child(p_3);
  slot(node_4, $$props, "evaluation", {}, null);
  reset(p_3);
  var node_5 = sibling(p_3, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var div_3 = root_413();
      var node_6 = child(div_3);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment = comment();
          var node_7 = first_child(fragment);
          add_svelte_meta(
            () => Button_default(node_7, {
              size: "xs",
              get href() {
                return helpfullink();
              },
              color: "dark",
              children: wrap_snippet(RatingComment, ($$anchor4, $$slotProps) => {
                next();
                var text_5 = text("Helpful");
                append($$anchor4, text_5);
              }),
              $$slots: { default: true }
            }),
            "component",
            RatingComment,
            45,
            10,
            { componentTag: "Button" }
          );
          append($$anchor3, fragment);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if (helpfullink()) $$render(consequent_2);
          }),
          "if",
          RatingComment,
          44,
          8
        );
      }
      var node_8 = sibling(node_6, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a = root_73();
          template_effect(() => set_attribute(a, "href", abuselink()));
          append($$anchor3, a);
        };
        add_svelte_meta(
          () => if_block(node_8, ($$render) => {
            if (abuselink()) $$render(consequent_3);
          }),
          "if",
          RatingComment,
          47,
          8
        );
      }
      reset(div_3);
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if (helpfullink() || abuselink()) $$render(consequent_4);
      }),
      "if",
      RatingComment,
      42,
      4
    );
  }
  reset(aside);
  reset(article);
  template_effect(() => {
    set_attribute(img, "src", (deep_read_state(comment2()), untrack(() => comment2().user.img.src)));
    set_attribute(img, "alt", (deep_read_state(comment2()), untrack(() => comment2().user.img.alt)));
    set_text(text2, `${(deep_read_state(comment2()), untrack(() => comment2().user.name)) ?? ""} `);
    set_text(text_1, (deep_read_state(comment2()), untrack(() => comment2().user.joined)));
  });
  append($$anchor, article);
  return pop($$exports);
}
if (import.meta.hot) {
  RatingComment = hmr(RatingComment, () => RatingComment[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RatingComment[HMR].source;
    set(RatingComment[HMR].source, module.default[HMR].original);
  });
}
var RatingComment_default = RatingComment;

// node_modules/flowbite-svelte/dist/rating/Review.svelte
Review[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Review.svelte";
var root_145 = add_locations(from_html(`<div class="flex items-center text-sm text-gray-500 dark:text-gray-400"><!></div>`), Review[FILENAME], [[17, 10]]);
var root_327 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[26, 10]]);
var root_414 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[31, 10]]);
var root_57 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[36, 10]]);
var root_227 = add_locations(from_html(`<ul><!> <!> <!></ul>`), Review[FILENAME], [[24, 6]]);
var root_64 = add_locations(from_html(`<footer><p class="mb-2 text-sm text-gray-500 dark:text-gray-400"> </p></footer>`), Review[FILENAME], [[47, 10, [[48, 12]]]]);
var root56 = add_locations(from_html(`<article><div><div><img/> <div class="space-y-1 font-medium dark:text-white"><p> </p> <!></div></div> <!></div> <div class="col-span-2 mt-6 md:mt-0"><div class="flex items-start mb-5"><div class="pe-4"><!> <h4 class="text-xl font-bold text-gray-900 dark:text-white"> </h4></div> <p class="bg-primary-700 text-white text-sm font-semibold inline-flex items-center p-1.5 rounded"> </p></div> <!></div></article>`), Review[FILENAME], [
  [
    10,
    0,
    [
      [11, 2, [[12, 4, [[13, 6], [14, 6, [[15, 8]]]]]]],
      [43, 2, [[44, 4, [[45, 6, [[53, 8]]], [57, 6]]]]]
    ]
  ]
]);
function Review($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Review);
  let review = prop($$props, "review", 8);
  let articleClass = prop($$props, "articleClass", 8, "md:gap-8 md:grid md:grid-cols-3");
  let divClass = prop($$props, "divClass", 8, "flex items-center mb-6 space-x-4 rtl:space-x-reverse");
  let imgClass = prop($$props, "imgClass", 8, "w-10 h-10 rounded-full");
  let ulClass = prop($$props, "ulClass", 8, "space-y-4 text-sm text-gray-500 dark:text-gray-400");
  let liClass = prop($$props, "liClass", 8, "flex items-center");
  var $$exports = { ...legacy_api() };
  init();
  var article = root56();
  var div = child(article);
  var div_1 = child(div);
  var img = child(div_1);
  var div_2 = sibling(img, 2);
  var p = child(div_2);
  var text2 = child(p, true);
  reset(p);
  var node = sibling(p, 2);
  {
    var consequent = ($$anchor2) => {
      var div_3 = root_145();
      var node_1 = child(div_3);
      slot(node_1, $$props, "address", {}, null);
      reset(div_3);
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state(review()), untrack(() => review().address)) $$render(consequent);
      }),
      "if",
      Review,
      16,
      8
    );
  }
  reset(div_2);
  reset(div_1);
  var node_2 = sibling(div_1, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var ul = root_227();
      var node_3 = child(ul);
      {
        var consequent_1 = ($$anchor3) => {
          var li = root_327();
          var node_4 = child(li);
          slot(node_4, $$props, "item1", {}, null);
          reset(li);
          template_effect(($0) => set_class(li, 1, $0), [
            () => clsx((deep_read_state(twMerge), deep_read_state(liClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(liClass(), $$sanitized_props.classLi))))
          ]);
          append($$anchor3, li);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (untrack(() => $$slots.item1)) $$render(consequent_1);
          }),
          "if",
          Review,
          25,
          8
        );
      }
      var node_5 = sibling(node_3, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var li_1 = root_414();
          var node_6 = child(li_1);
          slot(node_6, $$props, "item2", {}, null);
          reset(li_1);
          template_effect(($0) => set_class(li_1, 1, $0), [
            () => clsx((deep_read_state(twMerge), deep_read_state(liClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(liClass(), $$sanitized_props.classLi))))
          ]);
          append($$anchor3, li_1);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (untrack(() => $$slots.item2)) $$render(consequent_2);
          }),
          "if",
          Review,
          30,
          8
        );
      }
      var node_7 = sibling(node_5, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var li_2 = root_57();
          var node_8 = child(li_2);
          slot(node_8, $$props, "item3", {}, null);
          reset(li_2);
          template_effect(($0) => set_class(li_2, 1, $0), [
            () => clsx((deep_read_state(twMerge), deep_read_state(liClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(liClass(), $$sanitized_props.classLi))))
          ]);
          append($$anchor3, li_2);
        };
        add_svelte_meta(
          () => if_block(node_7, ($$render) => {
            if (untrack(() => $$slots.item3)) $$render(consequent_3);
          }),
          "if",
          Review,
          35,
          8
        );
      }
      reset(ul);
      template_effect(($0) => set_class(ul, 1, $0), [
        () => clsx((deep_read_state(twMerge), deep_read_state(ulClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(ulClass(), $$sanitized_props.classUl))))
      ]);
      append($$anchor2, ul);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (untrack(() => $$slots.item1 || $$slots.item2 || $$slots.item3)) $$render(consequent_4);
      }),
      "if",
      Review,
      23,
      4
    );
  }
  reset(div);
  var div_4 = sibling(div, 2);
  var div_5 = child(div_4);
  var div_6 = child(div_5);
  var node_9 = child(div_6);
  {
    var consequent_5 = ($$anchor2) => {
      var footer = root_64();
      var p_1 = child(footer);
      var text_1 = child(p_1);
      reset(p_1);
      reset(footer);
      template_effect(() => set_text(text_1, `Reviewed: ${(deep_read_state(review()), untrack(() => review().reviewDate)) ?? ""}`));
      append($$anchor2, footer);
    };
    add_svelte_meta(
      () => if_block(node_9, ($$render) => {
        if (deep_read_state(review()), untrack(() => review().reviewDate)) $$render(consequent_5);
      }),
      "if",
      Review,
      46,
      8
    );
  }
  var h4 = sibling(node_9, 2);
  var text_2 = child(h4, true);
  reset(h4);
  reset(div_6);
  var p_2 = sibling(div_6, 2);
  var text_3 = child(p_2, true);
  reset(p_2);
  reset(div_5);
  var node_10 = sibling(div_5, 2);
  slot(node_10, $$props, "default", {}, null);
  reset(div_4);
  reset(article);
  template_effect(
    ($0, $1, $2) => {
      set_class(article, 1, $0);
      set_class(div_1, 1, $1);
      set_class(img, 1, $2);
      set_attribute(img, "src", (deep_read_state(review()), untrack(() => review().imgSrc)));
      set_attribute(img, "alt", (deep_read_state(review()), untrack(() => review().imgAlt)));
      set_text(text2, (deep_read_state(review()), untrack(() => review().name)));
      set_text(text_2, (deep_read_state(review()), untrack(() => review().title)));
      set_text(text_3, (deep_read_state(review()), untrack(() => review().rating)));
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(articleClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(articleClass(), $$sanitized_props.classArticle)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.classDiv)))),
      () => clsx((deep_read_state(twMerge), deep_read_state(imgClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(imgClass(), $$sanitized_props.classImg))))
    ]
  );
  append($$anchor, article);
  return pop($$exports);
}
if (import.meta.hot) {
  Review = hmr(Review, () => Review[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Review[HMR].source;
    set(Review[HMR].source, module.default[HMR].original);
  });
}
var Review_default = Review;

// node_modules/flowbite-svelte/dist/rating/Heart.svelte
Heart[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Heart.svelte";
var root_146 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Heart[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_228 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Heart[FILENAME], [[19, 8], [20, 8]]);
var root57 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"></path></svg>`), Heart[FILENAME], [[10, 0, [[11, 2, [[12, 4]]], [24, 2]]]]);
function Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Heart);
  let fillPercent = prop($$props, "fillPercent", 8, 100);
  let fillColor = prop($$props, "fillColor", 8, "#ff0000");
  let strokeColor = prop($$props, "strokeColor", 8, "#ff0000");
  let size = prop($$props, "size", 8, 24);
  let ariaLabel = prop($$props, "ariaLabel", 8, "heart");
  let id = prop($$props, "id", 8, "heart");
  let role = prop($$props, "role", 8, "img");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root57();
  attribute_effect(svg, () => ({
    width: size(),
    height: size(),
    class: (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)),
    ...$$restProps,
    "aria-label": ariaLabel(),
    viewBox: "0 0 24 24",
    role: role(),
    "stroke-width": "1.5",
    stroke: "currentColor",
    fill: "none"
  }));
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_146();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_228();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Heart,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", id());
    set_attribute(path, "fill", `url(#${id() ?? ""})`);
    set_attribute(path, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Heart = hmr(Heart, () => Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart[HMR].source;
    set(Heart[HMR].source, module.default[HMR].original);
  });
}
var Heart_default = Heart;

// node_modules/flowbite-svelte/dist/rating/Thumbup.svelte
Thumbup[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Thumbup.svelte";
var root_147 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Thumbup[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_229 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Thumbup[FILENAME], [[19, 8], [20, 8]]);
var root58 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00.322-1.672V3a.75.75 0 01.75-.75A2.25 2.25 0 0116.5 4.5c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 01-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 00-1.423-.23H5.904M14.25 9h2.25M5.904 18.75c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 01-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 10.203 4.167 9.75 5 9.75h1.053c.472 0 .745.556.5.96a8.958 8.958 0 00-1.302 4.665c0 1.194.232 2.333.654 3.375z"></path></svg>`), Thumbup[FILENAME], [[10, 0, [[11, 2, [[12, 4]]], [24, 2]]]]);
function Thumbup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "fillPercent",
    "fillColor",
    "strokeColor",
    "size",
    "ariaLabel",
    "id",
    "role"
  ]);
  push($$props, false, Thumbup);
  let fillPercent = prop($$props, "fillPercent", 8, 100);
  let fillColor = prop($$props, "fillColor", 8, "#00b500");
  let strokeColor = prop($$props, "strokeColor", 8, "#00b500");
  let size = prop($$props, "size", 8, 24);
  let ariaLabel = prop($$props, "ariaLabel", 8, "thumbup");
  let id = prop($$props, "id", 8, "thumbup");
  let role = prop($$props, "role", 8, "img");
  var $$exports = { ...legacy_api() };
  init();
  var svg = root58();
  attribute_effect(svg, () => ({
    width: size(),
    height: size(),
    ...$$restProps,
    class: (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)),
    "aria-label": ariaLabel(),
    viewBox: "0 0 24 24",
    role: role(),
    "stroke-width": "1.5",
    stroke: "currentColor",
    fill: "none"
  }));
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_147();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_229();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Thumbup,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", id());
    set_attribute(path, "fill", `url(#${id() ?? ""})`);
    set_attribute(path, "stroke", strokeColor());
  });
  event("click", svg, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbup = hmr(Thumbup, () => Thumbup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbup[HMR].source;
    set(Thumbup[HMR].source, module.default[HMR].original);
  });
}
var Thumbup_default = Thumbup;

// node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte
Sidebar[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte";
var root59 = add_locations(from_html(`<aside><!></aside>`), Sidebar[FILENAME], [[19, 0]]);
function Sidebar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "activeUrl",
    "asideClass",
    "nonActiveClass",
    "activeClass",
    "ariaLabel"
  ]);
  push($$props, false, Sidebar);
  let activeUrl = prop($$props, "activeUrl", 8, "");
  let asideClass = prop($$props, "asideClass", 8, "w-64");
  let nonActiveClass = prop($$props, "nonActiveClass", 8, "flex items-center p-2 text-base font-normal text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let activeClass = prop($$props, "activeClass", 8, "flex items-center p-2 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let ariaLabel = prop($$props, "ariaLabel", 8, "Sidebar");
  const activeUrlStore = writable("");
  setContext("sidebarContext", { activeClass: activeClass(), nonActiveClass: nonActiveClass() });
  setContext("activeUrl", activeUrlStore);
  legacy_pre_effect(() => deep_read_state(activeUrl()), () => {
    activeUrlStore.set(activeUrl());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var aside = root59();
  attribute_effect(aside, ($0) => ({ ...$$restProps, class: $0, "aria-label": ariaLabel() }), [
    () => (deep_read_state(twMerge), deep_read_state(asideClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(asideClass(), $$sanitized_props.class)))
  ]);
  var node = child(aside);
  slot(node, $$props, "default", {}, null);
  reset(aside);
  append($$anchor, aside);
  return pop($$exports);
}
if (import.meta.hot) {
  Sidebar = hmr(Sidebar, () => Sidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sidebar[HMR].source;
    set(Sidebar[HMR].source, module.default[HMR].original);
  });
}
var Sidebar_default = Sidebar;

// node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte
SidebarItem[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte";
var root60 = add_locations(from_html(`<li><a><!> <span> </span> <!></a></li>`), SidebarItem[FILENAME], [[21, 0, [[22, 2, [[24, 4]]]]]]);
function SidebarItem($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "action",
    "params",
    "href",
    "label",
    "spanClass",
    "activeClass",
    "nonActiveClass"
  ]);
  push($$props, false, SidebarItem);
  const active = mutable_source();
  const aClass = mutable_source();
  let action2 = prop($$props, "action", 8, () => {
  });
  let params = prop($$props, "params", 24, () => ({}));
  let href = prop($$props, "href", 8, "");
  let label = prop($$props, "label", 8, "");
  let spanClass = prop($$props, "spanClass", 8, "ms-3");
  let activeClass = prop($$props, "activeClass", 24, () => void 0);
  let nonActiveClass = prop($$props, "nonActiveClass", 24, () => void 0);
  const context = getContext("sidebarContext") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = mutable_source("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value);
  });
  legacy_pre_effect(() => (get(sidebarUrl), deep_read_state(href())), () => {
    set(active, get(sidebarUrl) ? strict_equals(href(), get(sidebarUrl)) : false);
  });
  legacy_pre_effect(
    () => (twMerge, get(active), deep_read_state(activeClass()), deep_read_state(nonActiveClass()), deep_read_state($$sanitized_props)),
    () => {
      set(aClass, twMerge(
        get(active) ? activeClass() ?? context.activeClass : nonActiveClass() ?? context.nonActiveClass,
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root60();
  var a = child(li);
  attribute_effect(a, () => ({ ...$$restProps, href: href(), class: get(aClass) }));
  var node = child(a);
  slot(node, $$props, "icon", {}, null);
  var span = sibling(node, 2);
  var text2 = child(span, true);
  reset(span);
  var node_1 = sibling(span, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(node_2, $$props, "subtext", {}, null);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (untrack(() => $$slots.subtext)) $$render(consequent);
      }),
      "if",
      SidebarItem,
      25,
      4
    );
  }
  reset(a);
  action(a, ($$node, $$action_arg) => {
    var _a;
    return (_a = action2()) == null ? void 0 : _a($$node, $$action_arg);
  }, params);
  effect(() => event("blur", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("focus", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("keydown", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("keypress", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("keyup", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("mouseenter", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("mouseleave", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  effect(() => event("mouseover", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  reset(li);
  template_effect(() => {
    set_class(span, 1, clsx(spanClass()));
    set_text(text2, label());
  });
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarItem = hmr(SidebarItem, () => SidebarItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarItem[HMR].source;
    set(SidebarItem[HMR].source, module.default[HMR].original);
  });
}
var SidebarItem_default = SidebarItem;

// node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte
SidebarBrand[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte";
var root61 = add_locations(from_html(`<a><img/> <span> </span></a>`), SidebarBrand[FILENAME], [[8, 0, [[9, 2], [10, 2]]]]);
function SidebarBrand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["site", "aClass", "imgClass", "spanClass"]);
  push($$props, false, SidebarBrand);
  let site = prop($$props, "site", 8);
  let aClass = prop($$props, "aClass", 8, "flex items-center ps-2.5 mb-5");
  let imgClass = prop($$props, "imgClass", 8, "h-6 me-3 sm:h-7");
  let spanClass = prop($$props, "spanClass", 8, "self-center text-xl font-semibold whitespace-nowrap dark:text-white");
  var $$exports = { ...legacy_api() };
  init();
  var a = root61();
  attribute_effect(
    a,
    ($0) => ({
      ...$$restProps,
      href: (deep_read_state(site()), untrack(() => site().href)),
      class: $0
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(aClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(aClass(), $$sanitized_props.class)))
    ]
  );
  var img = child(a);
  var span = sibling(img, 2);
  var text2 = child(span, true);
  reset(span);
  reset(a);
  template_effect(() => {
    set_attribute(img, "src", (deep_read_state(site()), untrack(() => site().img)));
    set_class(img, 1, clsx(imgClass()));
    set_attribute(img, "alt", (deep_read_state(site()), untrack(() => site().name)));
    set_class(span, 1, clsx(spanClass()));
    set_text(text2, (deep_read_state(site()), untrack(() => site().name)));
  });
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarBrand = hmr(SidebarBrand, () => SidebarBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarBrand[HMR].source;
    set(SidebarBrand[HMR].source, module.default[HMR].original);
  });
}
var SidebarBrand_default = SidebarBrand;

// node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte
SidebarCta[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte";
var root62 = add_locations(from_html(`<div><div><span> </span> <!></div> <!></div>`), SidebarCta[FILENAME], [[8, 0, [[9, 2, [[10, 4]]]]]]);
function SidebarCta($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divWrapperClass", "divClass", "spanClass", "label"]);
  push($$props, false, SidebarCta);
  let divWrapperClass = prop($$props, "divWrapperClass", 8, "p-4 mt-6 bg-primary-50 rounded-lg dark:bg-primary-900");
  let divClass = prop($$props, "divClass", 8, "flex items-center mb-3");
  let spanClass = prop($$props, "spanClass", 8, "bg-primary-100 text-primary-800 text-sm font-semibold me-2 px-2.5 py-0.5 rounded dark:bg-primary-200 dark:text-primary-900");
  let label = prop($$props, "label", 8, "");
  var $$exports = { ...legacy_api() };
  init();
  var div = root62();
  attribute_effect(div, ($0) => ({ ...$$restProps, id: "dropdown-cta", class: $0, role: "alert" }), [
    () => (deep_read_state(twMerge), deep_read_state(divWrapperClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divWrapperClass(), $$sanitized_props.class)))
  ]);
  var div_1 = child(div);
  var span = child(div_1);
  var text2 = child(span, true);
  reset(span);
  var node = sibling(span, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, $$props, "icon", {}, null);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (untrack(() => $$slots.icon)) $$render(consequent);
      }),
      "if",
      SidebarCta,
      11,
      4
    );
  }
  reset(div_1);
  var node_2 = sibling(div_1, 2);
  slot(node_2, $$props, "default", {}, null);
  reset(div);
  template_effect(() => {
    set_class(div_1, 1, clsx(divClass()));
    set_class(span, 1, clsx(spanClass()));
    set_text(text2, label());
  });
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarCta = hmr(SidebarCta, () => SidebarCta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarCta[HMR].source;
    set(SidebarCta[HMR].source, module.default[HMR].original);
  });
}
var SidebarCta_default = SidebarCta;

// node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownItem.svelte
SidebarDropdownItem[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownItem.svelte";
var root63 = add_locations(from_html(`<li><a> </a></li>`), SidebarDropdownItem[FILENAME], [[9, 0, [[10, 2]]]]);
function SidebarDropdownItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["aClass", "href", "label", "activeClass", "active"]);
  push($$props, false, SidebarDropdownItem);
  let aClass = prop($$props, "aClass", 8, "flex items-center p-2 ps-11 w-full text-base font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700");
  let href = prop($$props, "href", 8, "");
  let label = prop($$props, "label", 8, "");
  let activeClass = prop($$props, "activeClass", 8, "flex items-center p-2 ps-11 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700");
  let active = prop($$props, "active", 8, false);
  var $$exports = { ...legacy_api() };
  init();
  var li = root63();
  var a = child(li);
  attribute_effect(a, ($0) => ({ ...$$restProps, href: href(), class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(active()), deep_read_state(activeClass()), deep_read_state(aClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(active() ? activeClass() : aClass(), $$sanitized_props.class)))
  ]);
  var text2 = child(a, true);
  reset(a);
  reset(li);
  template_effect(() => set_text(text2, label()));
  event("blur", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarDropdownItem = hmr(SidebarDropdownItem, () => SidebarDropdownItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarDropdownItem[HMR].source;
    set(SidebarDropdownItem[HMR].source, module.default[HMR].original);
  });
}
var SidebarDropdownItem_default = SidebarDropdownItem;

// node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte
SidebarDropdownWrapper[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte";
var root_328 = add_locations(from_svg(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[35, 8, [[36, 10]]]]);
var root_65 = add_locations(from_svg(`<svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[42, 6, [[43, 8]]]]);
var root_74 = add_locations(from_html(`<ul><!></ul>`), SidebarDropdownWrapper[FILENAME], [[48, 4]]);
var root64 = add_locations(from_html(`<li><button><!> <span> </span> <!></button> <!></li>`), SidebarDropdownWrapper[FILENAME], [[27, 0, [[28, 2, [[30, 4]]]]]]);
function SidebarDropdownWrapper($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnClass",
    "label",
    "spanClass",
    "ulClass",
    "transitionType",
    "transitionParams",
    "isOpen"
  ]);
  push($$props, false, SidebarDropdownWrapper);
  let btnClass = prop($$props, "btnClass", 8, "flex items-center p-2 w-full text-base font-normal text-gray-900 rounded-lg transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700");
  let label = prop($$props, "label", 8, "");
  let spanClass = prop($$props, "spanClass", 8, "flex-1 ms-3 text-left whitespace-nowrap");
  let ulClass = prop($$props, "ulClass", 8, "py-2 space-y-2");
  let transitionType = prop($$props, "transitionType", 8, "slide");
  let transitionParams = prop($$props, "transitionParams", 24, () => ({}));
  let isOpen = prop($$props, "isOpen", 12, false);
  const multiple = (node, params) => {
    switch (transitionType()) {
      case "blur":
        return blur(node, params);
      case "fly":
        return fly(node, params);
      case "fade":
        return fade(node, params);
      default:
        return slide(node, params);
    }
  };
  const handleDropdown = () => {
    isOpen(!isOpen());
  };
  var $$exports = { ...legacy_api() };
  init();
  var li = root64();
  var button = child(li);
  attribute_effect(
    button,
    ($0) => ({
      ...$$restProps,
      type: "button",
      class: $0,
      "aria-controls": "sidebar-dropdown"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(btnClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(btnClass(), $$sanitized_props.class)))
    ]
  );
  var node_1 = child(button);
  slot(node_1, $$props, "icon", {}, null);
  var span = sibling(node_1, 2);
  var text2 = child(span, true);
  reset(span);
  var node_2 = sibling(span, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_3 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          slot(node_4, $$props, "arrowup", {}, null);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var svg = root_328();
          append($$anchor3, svg);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (untrack(() => $$slots.arrowup)) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          SidebarDropdownWrapper,
          32,
          6
        );
      }
      append($$anchor2, fragment);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          slot(node_6, $$props, "arrowdown", {}, null);
          append($$anchor3, fragment_3);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_1 = root_65();
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(
            node_5,
            ($$render) => {
              if (untrack(() => $$slots.arrowdown)) $$render(consequent_2);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          SidebarDropdownWrapper,
          39,
          4
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (isOpen()) $$render(consequent_1);
        else $$render(alternate_2, false);
      }),
      "if",
      SidebarDropdownWrapper,
      31,
      4
    );
  }
  reset(button);
  var node_7 = sibling(button, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var ul = root_74();
      var node_8 = child(ul);
      slot(node_8, $$props, "default", {}, null);
      reset(ul);
      template_effect(() => set_class(ul, 1, clsx(ulClass())));
      transition(3, ul, () => multiple, transitionParams);
      append($$anchor2, ul);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if (isOpen()) $$render(consequent_3);
      }),
      "if",
      SidebarDropdownWrapper,
      47,
      2
    );
  }
  reset(li);
  template_effect(() => {
    set_class(span, 1, clsx(spanClass()));
    set_text(text2, label());
  });
  event("click", button, () => handleDropdown());
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarDropdownWrapper = hmr(SidebarDropdownWrapper, () => SidebarDropdownWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarDropdownWrapper[HMR].source;
    set(SidebarDropdownWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarDropdownWrapper_default = SidebarDropdownWrapper;

// node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte
SidebarGroup[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte";
var root65 = add_locations(from_html(`<ul><!></ul>`), SidebarGroup[FILENAME], [[10, 0]]);
function SidebarGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["ulClass", "borderClass", "border"]);
  push($$props, false, SidebarGroup);
  let ulClass = prop($$props, "ulClass", 12, "space-y-2");
  let borderClass = prop($$props, "borderClass", 8, "pt-4 mt-4 border-t border-gray-200 dark:border-gray-700");
  let border = prop($$props, "border", 8, false);
  if (border()) {
    ulClass(ulClass() + (" " + borderClass()));
  }
  var $$exports = { ...legacy_api() };
  init();
  var ul = root65();
  attribute_effect(ul, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(ulClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(ulClass(), $$sanitized_props.class)))
  ]);
  var node = child(ul);
  slot(node, $$props, "default", {}, null);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarGroup = hmr(SidebarGroup, () => SidebarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarGroup[HMR].source;
    set(SidebarGroup[HMR].source, module.default[HMR].original);
  });
}
var SidebarGroup_default = SidebarGroup;

// node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte
SidebarWrapper[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte";
var root66 = add_locations(from_html(`<div><!></div>`), SidebarWrapper[FILENAME], [[5, 0]]);
function SidebarWrapper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass"]);
  push($$props, false, SidebarWrapper);
  let divClass = prop($$props, "divClass", 8, "overflow-y-auto py-4 px-3 bg-gray-50 rounded dark:bg-gray-800");
  var $$exports = { ...legacy_api() };
  init();
  var div = root66();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class)))
  ]);
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarWrapper = hmr(SidebarWrapper, () => SidebarWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarWrapper[HMR].source;
    set(SidebarWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarWrapper_default = SidebarWrapper;

// node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte
CardPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte";
var root67 = add_locations(from_html(`<div role="status"><div class="flex justify-center items-center mb-4 h-48 bg-gray-300 rounded dark:bg-gray-700"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div> <div class="flex items-center mt-4 space-x-3 rtl:space-x-reverse"><svg class="w-14 h-14 text-gray-200 dark:text-gray-700" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32 mb-2"></div> <div class="w-48 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div></div> <span class="sr-only">Loading...</span></div>`), CardPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [15, 2, [[16, 4, [[17, 6]]]]],
      [20, 2],
      [21, 2],
      [22, 2],
      [23, 2],
      [24, 2, [[25, 4, [[26, 6]]], [28, 4, [[29, 6], [30, 6]]]]],
      [33, 2]
    ]
  ]
]);
function CardPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, CardPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 8, "p-4 rounded border border-gray-200 shadow animate-pulse md:p-6 dark:border-gray-700");
  let size = prop($$props, "size", 8, "sm");
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root67();
  template_effect(() => set_class(div, 1, clsx(get(outDivclass))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardPlaceholder = hmr(CardPlaceholder, () => CardPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardPlaceholder[HMR].source;
    set(CardPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var CardPlaceholder_default = CardPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte
ImagePlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte";
var root_148 = add_locations(from_html(`<div class="w-full"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-10/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-11/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12"></div></div>`), ImagePlaceholder[FILENAME], [
  [
    15,
    4,
    [
      [16, 6],
      [17, 6],
      [18, 6],
      [19, 6],
      [20, 6],
      [21, 6],
      [22, 6]
    ]
  ]
]);
var root68 = add_locations(from_html(`<div role="status"><div><svg width="48" height="48" class="text-gray-200" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <!> <span class="sr-only">Loading...</span></div>`), ImagePlaceholder[FILENAME], [[8, 0, [[9, 2, [[10, 4, [[11, 6]]]]], [25, 2]]]]);
function ImagePlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ImagePlaceholder);
  const imgOnlyClass = mutable_source();
  let divClass = prop($$props, "divClass", 8, "space-y-8 animate-pulse md:space-y-0 md:space-x-8 rtl:space-x-reverse md:flex md:items-center");
  let imgHeight = prop($$props, "imgHeight", 8, "48");
  let imgOnly = prop($$props, "imgOnly", 8, false);
  legacy_pre_effect(() => deep_read_state(imgOnly()), () => {
    set(imgOnlyClass, imgOnly() ? "max-w-60" : "");
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root68();
  var div_1 = child(div);
  var node = sibling(div_1, 2);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_148();
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!imgOnly()) $$render(consequent);
      }),
      "if",
      ImagePlaceholder,
      14,
      2
    );
  }
  next(2);
  reset(div);
  template_effect(
    ($0) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, `flex justify-center items-center w-full h-${imgHeight() ?? ""} bg-gray-300 rounded sm:w-96 ${get(imgOnlyClass) ?? ""} dark:bg-gray-700`);
    },
    [
      () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), get(imgOnlyClass), untrack(() => twMerge(divClass(), $$sanitized_props.class, get(imgOnlyClass)))))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ImagePlaceholder = hmr(ImagePlaceholder, () => ImagePlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImagePlaceholder[HMR].source;
    set(ImagePlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ImagePlaceholder_default = ImagePlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte
ListPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte";
var root69 = add_locations(from_html(`<div role="status"><div class="flex justify-between items-center"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <div class="flex justify-between items-center pt-4"><div><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24 mb-2.5"></div> <div class="w-32 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 w-12"></div></div> <span class="sr-only">Loading...</span></div>`), ListPlaceholder[FILENAME], [
  [
    5,
    0,
    [
      [6, 2, [[7, 4, [[8, 6], [9, 6]]], [11, 4]]],
      [13, 2, [[14, 4, [[15, 6], [16, 6]]], [18, 4]]],
      [20, 2, [[21, 4, [[22, 6], [23, 6]]], [25, 4]]],
      [27, 2, [[28, 4, [[29, 6], [30, 6]]], [32, 4]]],
      [34, 2, [[35, 4, [[36, 6], [37, 6]]], [39, 4]]],
      [41, 2]
    ]
  ]
]);
function ListPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ListPlaceholder);
  let divClass = prop($$props, "divClass", 8, "p-4 space-y-4 max-w-md rounded border border-gray-200 divide-y divide-gray-200 shadow animate-pulse dark:divide-gray-700 md:p-6 dark:border-gray-700");
  var $$exports = { ...legacy_api() };
  init();
  var div = root69();
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ListPlaceholder = hmr(ListPlaceholder, () => ListPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListPlaceholder[HMR].source;
    set(ListPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ListPlaceholder_default = ListPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte
Skeleton[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte";
var root70 = add_locations(from_html(`<div role="status"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-1/2 mb-4"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-10/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-11/12 mb-2.5"></div> <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-9/12"></div> <span class="sr-only">Loading...</span></div>`), Skeleton[FILENAME], [
  [
    14,
    0,
    [
      [15, 2],
      [16, 2],
      [17, 2],
      [18, 2],
      [19, 2],
      [20, 2],
      [21, 2],
      [22, 2]
    ]
  ]
]);
function Skeleton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Skeleton);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 8, "animate-pulse");
  let size = prop($$props, "size", 8, "sm");
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root70();
  template_effect(() => set_class(div, 1, clsx(get(outDivclass))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Skeleton = hmr(Skeleton, () => Skeleton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skeleton[HMR].source;
    set(Skeleton[HMR].source, module.default[HMR].original);
  });
}
var Skeleton_default = Skeleton;

// node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte
TestimonialPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte";
var root71 = add_locations(from_html(`<div role="status"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-700 max-w-[640px] mb-2.5 mx-auto"></div> <div class="h-2.5 mx-auto bg-gray-300 rounded-full dark:bg-gray-700 max-w-[540px]"></div> <div class="flex justify-center items-center mt-4"><svg class="me-2 w-10 h-10 text-gray-200 dark:text-gray-700" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div class="w-20 h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 me-3"></div> <div class="w-24 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div></div> <span class="sr-only">Loading...</span></div>`), TestimonialPlaceholder[FILENAME], [
  [
    5,
    0,
    [
      [6, 2],
      [7, 2],
      [8, 2, [[9, 4, [[10, 6]]], [12, 4], [13, 4]]],
      [15, 2]
    ]
  ]
]);
function TestimonialPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, TestimonialPlaceholder);
  let divClass = prop($$props, "divClass", 8, "animate-pulse");
  var $$exports = { ...legacy_api() };
  init();
  var div = root71();
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TestimonialPlaceholder = hmr(TestimonialPlaceholder, () => TestimonialPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TestimonialPlaceholder[HMR].source;
    set(TestimonialPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TestimonialPlaceholder_default = TestimonialPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte
TextPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte";
var root72 = add_locations(from_html(`<div role="status"><div class="flex items-center space-x-2 rtl:space-x-reverse w-full"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-11/12"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-9/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-80"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-11/12"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-10/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-32"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-24"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full"></div></div> <div class="flex items-center space-x-2 rtl:space-x-reverse w-8/12"><div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div> <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-80"></div> <div class="h-2.5 bg-gray-300 rounded-full dark:bg-gray-600 w-full"></div></div> <span class="sr-only">Loading...</span></div>`), TextPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [15, 2, [[16, 4], [17, 4], [18, 4]]],
      [20, 2, [[21, 4], [22, 4], [23, 4]]],
      [25, 2, [[26, 4], [27, 4], [28, 4]]],
      [30, 2, [[31, 4], [32, 4], [33, 4]]],
      [35, 2, [[36, 4], [37, 4], [38, 4]]],
      [40, 2, [[41, 4], [42, 4], [43, 4]]],
      [45, 2]
    ]
  ]
]);
function TextPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, TextPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 8, "space-y-2.5 animate-pulse");
  let size = prop($$props, "size", 8, "sm");
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root72();
  template_effect(() => set_class(div, 1, clsx(get(outDivclass))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TextPlaceholder = hmr(TextPlaceholder, () => TextPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextPlaceholder[HMR].source;
    set(TextPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TextPlaceholder_default = TextPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte
VideoPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte";
var root73 = add_locations(from_html(`<div role="status"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 384 512"><path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"></path></svg> <span class="sr-only">Loading...</span></div>`), VideoPlaceholder[FILENAME], [[14, 0, [[15, 2, [[16, 4]]], [18, 2]]]]);
function VideoPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, VideoPlaceholder);
  const outDivclass = mutable_source();
  const sizes = {
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    xxl: "max-w-2xl"
  };
  let divClass = prop($$props, "divClass", 8, "flex justify-center items-center h-56 bg-gray-300 rounded-lg animate-pulse dark:bg-gray-700");
  let size = prop($$props, "size", 8, "sm");
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(divClass()), deep_read_state($$sanitized_props)),
    () => {
      set(outDivclass, twMerge(sizes[size()], divClass(), $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root73();
  template_effect(() => set_class(div, 1, clsx(get(outDivclass))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  VideoPlaceholder = hmr(VideoPlaceholder, () => VideoPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VideoPlaceholder[HMR].source;
    set(VideoPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var VideoPlaceholder_default = VideoPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte
WidgetPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte";
var root74 = add_locations(from_html(`<div role="status"><div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32 mb-2.5"></div> <div class="mb-10 w-48 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div> <div class="flex items-baseline mt-4 space-x-6 rtl:space-x-reverse"><div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-56 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-64 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-80 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-72 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div> <div class="w-full h-80 bg-gray-200 rounded-t-lg dark:bg-gray-700"></div></div> <span class="sr-only">Loading...</span></div>`), WidgetPlaceholder[FILENAME], [
  [
    5,
    0,
    [
      [6, 2],
      [7, 2],
      [
        8,
        2,
        [[9, 4], [10, 4], [11, 4], [12, 4], [13, 4], [14, 4], [15, 4]]
      ],
      [17, 2]
    ]
  ]
]);
function WidgetPlaceholder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, WidgetPlaceholder);
  let divClass = prop($$props, "divClass", 8, "p-4 max-w-sm rounded border border-gray-200 shadow animate-pulse md:p-6 dark:border-gray-700");
  var $$exports = { ...legacy_api() };
  init();
  var div = root74();
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  WidgetPlaceholder = hmr(WidgetPlaceholder, () => WidgetPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WidgetPlaceholder[HMR].source;
    set(WidgetPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var WidgetPlaceholder_default = WidgetPlaceholder;

// node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte
SpeedDial[FILENAME] = "node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte";
var root_415 = add_locations(from_svg(`<svg aria-hidden="true" class="w-8 h-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`), SpeedDial[FILENAME], [[33, 10, [[34, 12]]]]);
var root_329 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDial[FILENAME], [[37, 8]]);
var root_75 = add_locations(from_svg(`<svg aria-hidden="true" class="w-8 h-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`), SpeedDial[FILENAME], [[42, 10, [[43, 12]]]]);
var root_66 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDial[FILENAME], [[46, 8]]);
var root75 = add_locations(from_html(`<div><!> <!></div>`), SpeedDial[FILENAME], [[28, 0]]);
function SpeedDial($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "defaultClass",
    "popperDefaultClass",
    "placement",
    "pill",
    "tooltip",
    "trigger",
    "textOutside",
    "id",
    "name",
    "gradient",
    "open"
  ]);
  push($$props, false, SpeedDial);
  var $$ownership_validator = create_ownership_validator($$props);
  let defaultClass = prop($$props, "defaultClass", 8, "fixed end-6 bottom-6");
  let popperDefaultClass = prop($$props, "popperDefaultClass", 8, "flex items-center mb-4 gap-2");
  let placement = prop($$props, "placement", 8, "top");
  let pill = prop($$props, "pill", 8, true);
  let tooltip = prop($$props, "tooltip", 8, "left");
  let trigger = prop($$props, "trigger", 8, "hover");
  let textOutside = prop($$props, "textOutside", 8, false);
  let id = prop($$props, "id", 24, generateId_default);
  let name = prop($$props, "name", 8, "Open actions menu");
  let gradient = prop($$props, "gradient", 8, false);
  let open = prop($$props, "open", 12, false);
  setContext("speed-dial", { pill: pill(), tooltip: tooltip(), textOutside: textOutside() });
  let divClass = mutable_source();
  let poperClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge(defaultClass(), "group", $$sanitized_props.class));
    }
  );
  legacy_pre_effect(
    () => (twMerge, deep_read_state(popperDefaultClass()), deep_read_state(placement())),
    () => {
      set(poperClass, twMerge(popperDefaultClass(), ["top", "bottom"].includes(placement().split("-")[0]) && "flex-col"));
    }
  );
  legacy_pre_effect(() => deep_read_state($$restProps), () => {
    console.log(...log_if_contains_state("log", typeof $$restProps, Object.keys($$restProps)));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root75();
  var node = child(div);
  slot(node, $$props, "button", {}, ($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        add_svelte_meta(
          () => GradientButton_default(node_2, spread_props(
            {
              get pill() {
                return pill();
              },
              get name() {
                return name();
              },
              get "aria-controls"() {
                return id();
              },
              get "aria-expanded"() {
                return open();
              }
            },
            () => $$restProps,
            {
              class: "!p-3",
              children: wrap_snippet(SpeedDial, ($$anchor4, $$slotProps) => {
                var fragment_2 = root_329();
                var node_3 = first_child(fragment_2);
                slot(node_3, $$props, "icon", {}, ($$anchor5) => {
                  var svg = root_415();
                  append($$anchor5, svg);
                });
                var span = sibling(node_3, 2);
                var text2 = child(span, true);
                reset(span);
                template_effect(() => set_text(text2, name()));
                append($$anchor4, fragment_2);
              }),
              $$slots: { default: true }
            }
          )),
          "component",
          SpeedDial,
          31,
          6,
          { componentTag: "GradientButton" }
        );
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_3 = comment();
        var node_4 = first_child(fragment_3);
        add_svelte_meta(
          () => Button_default(node_4, spread_props(
            {
              get pill() {
                return pill();
              },
              get name() {
                return name();
              },
              get "aria-controls"() {
                return id();
              },
              get "aria-expanded"() {
                return open();
              }
            },
            () => $$restProps,
            {
              class: "!p-3",
              children: wrap_snippet(SpeedDial, ($$anchor4, $$slotProps) => {
                var fragment_4 = root_66();
                var node_5 = first_child(fragment_4);
                slot(node_5, $$props, "icon", {}, ($$anchor5) => {
                  var svg_1 = root_75();
                  append($$anchor5, svg_1);
                });
                var span_1 = sibling(node_5, 2);
                var text_1 = child(span_1, true);
                reset(span_1);
                template_effect(() => set_text(text_1, name()));
                append($$anchor4, fragment_4);
              }),
              $$slots: { default: true }
            }
          )),
          "component",
          SpeedDial,
          40,
          6,
          { componentTag: "Button" }
        );
        append($$anchor3, fragment_3);
      };
      add_svelte_meta(
        () => if_block(node_1, ($$render) => {
          if (gradient()) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        SpeedDial,
        30,
        4
      );
    }
    append($$anchor2, fragment);
  });
  var node_6 = sibling(node, 2);
  {
    $$ownership_validator.binding("open", Popper_default, open);
    add_svelte_meta(
      () => Popper_default(node_6, {
        get id() {
          return id();
        },
        get trigger() {
          return trigger();
        },
        arrow: false,
        color: "none",
        activeContent: true,
        get placement() {
          return placement();
        },
        get class() {
          return get(poperClass);
        },
        get open() {
          return open();
        },
        set open($$value) {
          open($$value);
        },
        children: wrap_snippet(SpeedDial, ($$anchor2, $$slotProps) => {
          var fragment_5 = comment();
          var node_7 = first_child(fragment_5);
          slot(node_7, $$props, "default", {}, null);
          append($$anchor2, fragment_5);
        }),
        $$slots: { default: true },
        $$legacy: true
      }),
      "component",
      SpeedDial,
      50,
      2,
      { componentTag: "Popper" }
    );
  }
  reset(div);
  template_effect(() => set_class(div, 1, clsx(get(divClass))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  SpeedDial = hmr(SpeedDial, () => SpeedDial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDial[HMR].source;
    set(SpeedDial[HMR].source, module.default[HMR].original);
  });
}
var SpeedDial_default = SpeedDial;

// node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte
Tooltip[FILENAME] = "node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte";
function Tooltip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["type", "defaultClass"]);
  push($$props, false, Tooltip);
  let type = prop($$props, "type", 12, "dark");
  let defaultClass = prop($$props, "defaultClass", 8, "py-2 px-3 text-sm font-medium");
  const types = {
    dark: "bg-gray-900 text-white dark:bg-gray-700",
    light: "border-gray-200 bg-white text-gray-900",
    auto: " bg-white text-gray-900 dark:bg-gray-700 dark:text-white border-gray-200 dark:border-gray-700",
    custom: ""
  };
  let toolTipClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state($$restProps), deep_read_state(type()), twMerge, deep_read_state(defaultClass()), deep_read_state($$sanitized_props)),
    () => {
      if ($$restProps.color) type("custom");
      else $$restProps.color = "none";
      if (["light", "auto"].includes(type())) $$restProps.border = true;
      set(toolTipClass, twMerge("tooltip", defaultClass(), types[type()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Popper_default(node, spread_props({ rounded: true, shadow: true }, () => $$restProps, {
      get class() {
        return get(toolTipClass);
      },
      $$events: {
        show($$arg) {
          bubble_event.call(this, $$props, $$arg);
        }
      },
      children: wrap_snippet(Tooltip, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tooltip,
    20,
    0,
    { componentTag: "Popper" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tooltip = hmr(Tooltip, () => Tooltip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tooltip[HMR].source;
    set(Tooltip[HMR].source, module.default[HMR].original);
  });
}
var Tooltip_default = Tooltip;

// node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte
SpeedDialButton[FILENAME] = "node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte";
var root_230 = add_locations(from_html(`<span class="sr-only"> </span>`), SpeedDialButton[FILENAME], [[20, 4]]);
var root_416 = add_locations(from_html(`<span> </span>`), SpeedDialButton[FILENAME], [[22, 4]]);
var root_58 = add_locations(from_html(`<span> </span>`), SpeedDialButton[FILENAME], [[24, 4]]);
var root_149 = add_locations(from_html(`<!> <!>`, 1), SpeedDialButton[FILENAME], []);
var root76 = add_locations(from_html(`<!> <!>`, 1), SpeedDialButton[FILENAME], []);
function SpeedDialButton($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "btnDefaultClass",
    "name",
    "tooltip",
    "pill",
    "textOutside",
    "textOutsideClass",
    "textDefaultClass"
  ]);
  push($$props, false, SpeedDialButton);
  const context = getContext("speed-dial");
  let btnDefaultClass = prop($$props, "btnDefaultClass", 8, "w-[52px] h-[52px] shadow-sm !p-2");
  let name = prop($$props, "name", 8, "");
  let tooltip = prop($$props, "tooltip", 24, () => context.tooltip);
  let pill = prop($$props, "pill", 24, () => context.pill);
  let textOutside = prop($$props, "textOutside", 24, () => context.textOutside);
  let textOutsideClass = prop($$props, "textOutsideClass", 8, "block absolute -start-14 top-1/2 mb-px text-sm font-medium -translate-y-1/2");
  let textDefaultClass = prop($$props, "textDefaultClass", 8, "block mb-px text-xs font-medium");
  let btnClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(btnDefaultClass()), deep_read_state(tooltip()), deep_read_state(textOutside()), deep_read_state($$sanitized_props)),
    () => {
      set(btnClass, twMerge(btnDefaultClass(), strict_equals(tooltip(), "none") && "flex-col", textOutside() && "relative", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root76();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Button_default(node, spread_props(
      {
        get pill() {
          return pill();
        },
        outline: true,
        color: "light"
      },
      () => $$restProps,
      {
        get class() {
          return get(btnClass);
        },
        $$events: {
          click($$arg) {
            bubble_event.call(this, $$props, $$arg);
          }
        },
        children: wrap_snippet(SpeedDialButton, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_149();
          var node_1 = first_child(fragment_1);
          slot(node_1, $$props, "default", {}, null);
          var node_2 = sibling(node_1, 2);
          {
            var consequent = ($$anchor3) => {
              var span = root_230();
              var text2 = child(span, true);
              reset(span);
              template_effect(() => set_text(text2, name()));
              append($$anchor3, span);
            };
            var alternate_1 = ($$anchor3) => {
              var fragment_2 = comment();
              var node_3 = first_child(fragment_2);
              {
                var consequent_1 = ($$anchor4) => {
                  var span_1 = root_416();
                  var text_1 = child(span_1, true);
                  reset(span_1);
                  template_effect(() => {
                    set_class(span_1, 1, clsx(textOutsideClass()));
                    set_text(text_1, name());
                  });
                  append($$anchor4, span_1);
                };
                var alternate = ($$anchor4) => {
                  var span_2 = root_58();
                  var text_2 = child(span_2, true);
                  reset(span_2);
                  template_effect(() => {
                    set_class(span_2, 1, clsx(textDefaultClass()));
                    set_text(text_2, name());
                  });
                  append($$anchor4, span_2);
                };
                add_svelte_meta(
                  () => if_block(
                    node_3,
                    ($$render) => {
                      if (textOutside()) $$render(consequent_1);
                      else $$render(alternate, false);
                    },
                    true
                  ),
                  "if",
                  SpeedDialButton,
                  21,
                  2
                );
              }
              append($$anchor3, fragment_2);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if (strict_equals(tooltip(), "none", false)) $$render(consequent);
                else $$render(alternate_1, false);
              }),
              "if",
              SpeedDialButton,
              19,
              2
            );
          }
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }
    )),
    "component",
    SpeedDialButton,
    17,
    0,
    { componentTag: "Button" }
  );
  var node_4 = sibling(node, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      add_svelte_meta(
        () => Tooltip_default(node_5, {
          get placement() {
            return tooltip();
          },
          style: "dark",
          children: wrap_snippet(SpeedDialButton, ($$anchor3, $$slotProps) => {
            next();
            var text_3 = text();
            template_effect(() => set_text(text_3, name()));
            append($$anchor3, text_3);
          }),
          $$slots: { default: true }
        }),
        "component",
        SpeedDialButton,
        29,
        2,
        { componentTag: "Tooltip" }
      );
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (strict_equals(tooltip(), "none", false)) $$render(consequent_2);
      }),
      "if",
      SpeedDialButton,
      28,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  SpeedDialButton = hmr(SpeedDialButton, () => SpeedDialButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDialButton[HMR].source;
    set(SpeedDialButton[HMR].source, module.default[HMR].original);
  });
}
var SpeedDialButton_default = SpeedDialButton;

// node_modules/flowbite-svelte/dist/spinner/Spinner.svelte
Spinner[FILENAME] = "node_modules/flowbite-svelte/dist/spinner/Spinner.svelte";
var root77 = add_locations(from_svg(`<svg><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"></path><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"></path></svg>`), Spinner[FILENAME], [[27, 0, [[28, 2], [29, 2]]]]);
function Spinner($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "bg",
    "customColor",
    "size",
    "currentFill",
    "currentColor"
  ]);
  push($$props, false, Spinner);
  let color = prop($$props, "color", 12, "primary");
  let bg = prop($$props, "bg", 8, "text-gray-300");
  let customColor = prop($$props, "customColor", 8, "");
  let size = prop($$props, "size", 8, "8");
  let currentFill = prop($$props, "currentFill", 8, "currentFill");
  let currentColor = prop($$props, "currentColor", 8, "currentColor");
  let iconsize = `w-${size()} h-${size()}`;
  if (strict_equals(currentFill(), "currentFill", false)) {
    color(void 0);
  }
  const fillColorClasses = {
    primary: "fill-primary-600",
    blue: "fill-blue-600",
    gray: "fill-gray-600 dark:fill-gray-300",
    green: "fill-green-500",
    red: "fill-red-600",
    yellow: "fill-yellow-400",
    pink: "fill-pink-600",
    purple: "fill-purple-600",
    white: "fill-white",
    custom: customColor()
  };
  let fillColorClass = strict_equals(color(), void 0) ? "" : fillColorClasses[color()] ?? fillColorClasses.blue;
  var $$exports = { ...legacy_api() };
  init();
  var svg = root77();
  attribute_effect(
    svg,
    ($0) => ({
      ...$$restProps,
      role: "status",
      class: $0,
      viewBox: "0 0 100 101",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }),
    [
      () => (deep_read_state(twMerge), deep_read_state(bg()), deep_read_state($$sanitized_props), untrack(() => twMerge("inline -mt-px animate-spin dark:text-gray-600", iconsize, bg(), fillColorClass, $$sanitized_props.class)))
    ]
  );
  var path = child(svg);
  var path_1 = sibling(path);
  reset(svg);
  template_effect(() => {
    set_attribute(path, "fill", currentColor());
    set_attribute(path_1, "fill", currentFill());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Spinner = hmr(Spinner, () => Spinner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spinner[HMR].source;
    set(Spinner[HMR].source, module.default[HMR].original);
  });
}
var Spinner_default = Spinner;

// node_modules/flowbite-svelte/dist/steps/StepIndicator.svelte
StepIndicator[FILENAME] = "node_modules/flowbite-svelte/dist/steps/StepIndicator.svelte";
var root_150 = add_locations(from_html(`<h3 class="text-base font-semibold"> </h3>`), StepIndicator[FILENAME], [[40, 4]]);
var root_417 = add_locations(from_html(`<div></div>`), StepIndicator[FILENAME], [[48, 12]]);
var root_330 = add_locations(from_html(`<div class="relative w-full h-full"><div></div> <!></div>`), StepIndicator[FILENAME], [[45, 8, [[46, 10]]]]);
var root_67 = add_locations(from_html(`<div></div>`), StepIndicator[FILENAME], [[52, 8]]);
var root_76 = add_locations(from_html(`<div class="w-full h-full rounded-sm bg-gray-200 dark:bg-gray-700"></div>`), StepIndicator[FILENAME], [[54, 8]]);
var root78 = add_locations(from_html(`<div><!> <div></div></div>`), StepIndicator[FILENAME], [[38, 0, [[42, 2]]]]);
function StepIndicator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "steps",
    "currentStep",
    "size",
    "color",
    "glow",
    "hideLabel",
    "completedCustom",
    "currentCustom"
  ]);
  push($$props, false, StepIndicator);
  let steps = prop($$props, "steps", 24, () => ["Step 1", "Step 2", "Step 3", "Step 4", "Step 5"]);
  let currentStep = prop($$props, "currentStep", 8, 1);
  let size = prop($$props, "size", 8, "h-2.5");
  let color = prop($$props, "color", 8, "primary");
  let glow = prop($$props, "glow", 8, false);
  let hideLabel = prop($$props, "hideLabel", 8, false);
  let completedCustom = prop($$props, "completedCustom", 8, "");
  let currentCustom = prop($$props, "currentCustom", 8, "");
  const completedStepColors = {
    primary: "bg-primary-500 dark:bg-primary-900",
    secondary: "bg-secondary-500 dark:bg-secondary-900",
    gray: "bg-gray-400 dark:bg-gray-500",
    red: "bg-red-600 dark:bg-red-900",
    yellow: "bg-yellow-400 dark:bg-yellow-600",
    green: "bg-green-500 dark:bg-green-900",
    indigo: "bg-indigo-500 dark:bg-indigo-900",
    purple: "bg-purple-500 dark:bg-purple-900",
    pink: "bg-pink-500 dark:bg-pink-900",
    blue: "bg-blue-500 dark:bg-blue-900",
    custom: completedCustom()
  };
  const currentStepColors = {
    primary: "bg-primary-800 dark:bg-primary-400",
    secondary: "bg-secondary-800 dark:bg-secondary-400",
    gray: "bg-gray-700 dark:bg-gray-200",
    red: "bg-red-900 dark:bg-red-500",
    yellow: "bg-yellow-600 dark:bg-yellow-400",
    green: "bg-green-800 dark:bg-green-400",
    indigo: "bg-indigo-800 dark:bg-indigo-400",
    purple: "bg-purple-800 dark:bg-purple-400",
    pink: "bg-pink-800 dark:bg-pink-400",
    blue: "bg-blue-800 dark:bg-blue-400",
    custom: currentCustom()
  };
  var $$exports = { ...legacy_api() };
  init();
  var div = root78();
  attribute_effect(div, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("space-y-2 dark:text-white", $$sanitized_props.class)))
  ]);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_150();
      var text2 = child(h3, true);
      reset(h3);
      template_effect(() => set_text(text2, (deep_read_state(steps()), deep_read_state(currentStep()), untrack(() => steps()[currentStep() - 1]))));
      append($$anchor2, h3);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!hideLabel()) $$render(consequent);
      }),
      "if",
      StepIndicator,
      39,
      2
    );
  }
  var div_1 = sibling(node, 2);
  add_svelte_meta(
    () => each(div_1, 5, steps, index, ($$anchor2, step, i) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent_2 = ($$anchor3) => {
          var div_2 = root_330();
          var div_3 = child(div_2);
          var node_2 = sibling(div_3, 2);
          {
            var consequent_1 = ($$anchor4) => {
              var div_4 = root_417();
              template_effect(($0) => set_class(div_4, 1, $0), [
                () => clsx((deep_read_state(twJoin), deep_read_state(color()), untrack(() => twJoin("absolute -inset-1 rounded-sm blur opacity-30 dark:opacity-25", currentStepColors[color()]))))
              ]);
              append($$anchor4, div_4);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if (glow()) $$render(consequent_1);
              }),
              "if",
              StepIndicator,
              47,
              10
            );
          }
          reset(div_2);
          template_effect(($0) => set_class(div_3, 1, $0), [
            () => clsx((deep_read_state(twJoin), deep_read_state(color()), untrack(() => twJoin("relative w-full h-full rounded-sm", currentStepColors[color()]))))
          ]);
          append($$anchor3, div_2);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          {
            var consequent_3 = ($$anchor4) => {
              var div_5 = root_67();
              template_effect(($0) => set_class(div_5, 1, $0), [
                () => clsx((deep_read_state(twJoin), deep_read_state(color()), untrack(() => twJoin("w-full h-full rounded-sm", completedStepColors[color()]))))
              ]);
              append($$anchor4, div_5);
            };
            var alternate = ($$anchor4) => {
              var div_6 = root_76();
              append($$anchor4, div_6);
            };
            add_svelte_meta(
              () => if_block(
                node_3,
                ($$render) => {
                  if (i < currentStep() - 1) $$render(consequent_3);
                  else $$render(alternate, false);
                },
                true
              ),
              "if",
              StepIndicator,
              51,
              6
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (strict_equals(i, currentStep() - 1)) $$render(consequent_2);
            else $$render(alternate_1, false);
          }),
          "if",
          StepIndicator,
          44,
          6
        );
      }
      append($$anchor2, fragment);
    }),
    "each",
    StepIndicator,
    43,
    4
  );
  reset(div_1);
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx((deep_read_state(twJoin), deep_read_state(size()), untrack(() => twJoin("flex justify-between gap-2 w-full", size()))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  StepIndicator = hmr(StepIndicator, () => StepIndicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StepIndicator[HMR].source;
    set(StepIndicator[HMR].source, module.default[HMR].original);
  });
}
var StepIndicator_default = StepIndicator;

// node_modules/flowbite-svelte/dist/table/Table.svelte
Table[FILENAME] = "node_modules/flowbite-svelte/dist/table/Table.svelte";
var root_331 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>`), Table[FILENAME], [[57, 14, [[58, 16]]]]);
var root_231 = add_locations(from_html(`<div><label for="table-search" class="sr-only">Search</label> <div><div><!></div> <input type="text" id="table-search"/></div> <!></div>`), Table[FILENAME], [[52, 6, [[53, 8], [54, 8, [[55, 10], [62, 10]]]]]]);
var root79 = add_locations(from_html(`<div><!> <table><!></table></div>`), Table[FILENAME], [[49, 0, [[68, 2]]]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "divClass",
    "striped",
    "hoverable",
    "noborder",
    "shadow",
    "color",
    "customeColor",
    "items",
    "filter",
    "placeholder",
    "innerDivClass",
    "searchClass",
    "svgDivClass",
    "svgClass",
    "inputClass"
  ]);
  push($$props, false, Table);
  let divClass = prop($$props, "divClass", 8, "relative overflow-x-auto");
  let striped = prop($$props, "striped", 8, false);
  let hoverable = prop($$props, "hoverable", 8, false);
  let noborder = prop($$props, "noborder", 8, false);
  let shadow = prop($$props, "shadow", 8, false);
  let color = prop($$props, "color", 8, "default");
  let customeColor = prop($$props, "customeColor", 8, "");
  let items = prop($$props, "items", 24, () => []);
  let filter = prop($$props, "filter", 8, null);
  let placeholder = prop($$props, "placeholder", 8, "Search");
  let innerDivClass = prop($$props, "innerDivClass", 8, "p-4");
  let searchClass = prop($$props, "searchClass", 8, "relative mt-1");
  let svgDivClass = prop($$props, "svgDivClass", 8, "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none");
  let svgClass = prop($$props, "svgClass", 8, "w-5 h-5 text-gray-500 dark:text-gray-400");
  let inputClass2 = prop($$props, "inputClass", 8, "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 p-2.5 ps-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500");
  let searchTerm = mutable_source("");
  let inputCls = twMerge(inputClass2(), $$sanitized_props.classInput);
  let svgDivCls = twMerge(svgDivClass(), $$sanitized_props.classSvgDiv);
  const colors = {
    default: "text-gray-500 dark:text-gray-400",
    blue: "text-blue-100 dark:text-blue-100",
    green: "text-green-100 dark:text-green-100",
    red: "text-red-100 dark:text-red-100",
    yellow: "text-yellow-100 dark:text-yellow-100",
    purple: "text-purple-100 dark:text-purple-100",
    indigo: "text-indigo-100 dark:text-indigo-100",
    pink: "text-pink-100 dark:text-pink-100",
    custom: customeColor()
  };
  const searchTermStore = writable(get(searchTerm));
  const filterStore = writable(filter());
  setContext("searchTerm", searchTermStore);
  setContext("filter", filterStore);
  setContext("sorter", writable(null));
  legacy_pre_effect(() => (setContext, deep_read_state(striped())), () => {
    setContext("striped", striped());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(hoverable())), () => {
    setContext("hoverable", hoverable());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(noborder())), () => {
    setContext("noborder", noborder());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(color())), () => {
    setContext("color", color());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(items())), () => {
    setContext("items", items());
  });
  legacy_pre_effect(() => get(searchTerm), () => {
    searchTermStore.set(get(searchTerm));
  });
  legacy_pre_effect(() => deep_read_state(filter()), () => {
    if (filter()) filterStore.set(filter());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root79();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, $$props, "search", {}, ($$anchor3) => {
        var div_1 = root_231();
        var div_2 = sibling(child(div_1), 2);
        var div_3 = child(div_2);
        var node_2 = child(div_3);
        slot(node_2, $$props, "svgSearch", {}, ($$anchor4) => {
          var svg = root_331();
          template_effect(() => set_class(svg, 0, clsx(svgClass())));
          append($$anchor4, svg);
        });
        reset(div_3);
        var input = sibling(div_3, 2);
        remove_input_defaults(input);
        reset(div_2);
        var node_3 = sibling(div_2, 2);
        slot(node_3, $$props, "header", {}, null);
        reset(div_1);
        template_effect(() => {
          set_class(div_1, 1, clsx(innerDivClass()));
          set_class(div_2, 1, clsx(searchClass()));
          set_class(div_3, 1, clsx(svgDivCls));
          set_class(input, 1, clsx(inputCls));
          set_attribute(input, "placeholder", placeholder());
        });
        bind_value(input, () => get(searchTerm), ($$value) => set(searchTerm, $$value));
        append($$anchor3, div_1);
      });
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (filter()) $$render(consequent);
      }),
      "if",
      Table,
      50,
      2
    );
  }
  var table = sibling(node, 2);
  attribute_effect(table, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge("w-full text-left text-sm", colors[color()], $$sanitized_props.class)))
  ]);
  var node_4 = child(table);
  slot(node_4, $$props, "default", {}, null);
  reset(table);
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twJoin), deep_read_state(divClass()), deep_read_state(shadow()), untrack(() => twJoin(divClass(), shadow() && "shadow-md sm:rounded-lg"))))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;

// node_modules/flowbite-svelte/dist/table/TableBody.svelte
TableBody[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBody.svelte";
var root80 = add_locations(from_html(`<tbody><!><!></tbody>`), TableBody[FILENAME], [[11, 0]]);
function TableBody($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tableBodyClass"]);
  push($$props, false, TableBody);
  const $filter = () => (validate_store(filter, "filter"), store_get(filter, "$filter", $$stores));
  const $searchTerm = () => (validate_store(searchTerm, "searchTerm"), store_get(searchTerm, "$searchTerm", $$stores));
  const $sorter = () => (validate_store(sorter, "sorter"), store_get(sorter, "$sorter", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  const items = mutable_source();
  const filtered = mutable_source();
  const sorted = mutable_source();
  let tableBodyClass = prop($$props, "tableBodyClass", 24, () => void 0);
  let filter = getContext("filter");
  let searchTerm = getContext("searchTerm");
  let sorter = getContext("sorter");
  legacy_pre_effect(() => getContext, () => {
    set(items, getContext("items") || []);
  });
  legacy_pre_effect(() => ($filter(), get(items), $searchTerm()), () => {
    set(filtered, $filter() ? get(items).filter((item) => $filter()(item, $searchTerm())) : get(items));
  });
  legacy_pre_effect(() => ($sorter(), get(filtered)), () => {
    set(sorted, $sorter() ? get(filtered).toSorted((a, b) => $sorter().sortDirection * $sorter().sort(a, b)) : get(filtered));
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var tbody = root80();
  attribute_effect(tbody, () => ({ ...$$restProps, class: tableBodyClass() }));
  var node = child(tbody);
  slot(node, $$props, "default", {}, null);
  var node_1 = sibling(node);
  add_svelte_meta(
    () => each(node_1, 1, () => get(sorted), index, ($$anchor2, item) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(
        node_2,
        $$props,
        "row",
        {
          get item() {
            return get(item);
          }
        },
        null
      );
      append($$anchor2, fragment);
    }),
    "each",
    TableBody,
    13,
    2
  );
  reset(tbody);
  append($$anchor, tbody);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  TableBody = hmr(TableBody, () => TableBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBody[HMR].source;
    set(TableBody[HMR].source, module.default[HMR].original);
  });
}
var TableBody_default = TableBody;

// node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte
TableBodyCell[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte";
var root_151 = add_locations(from_html(`<button><!></button>`), TableBodyCell[FILENAME], [[12, 2]]);
var root81 = add_locations(from_html(`<td><!></td>`), TableBodyCell[FILENAME], [[10, 0]]);
function TableBodyCell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tdClass"]);
  push($$props, false, TableBodyCell);
  let tdClass = prop($$props, "tdClass", 8, "px-6 py-4 whitespace-nowrap font-medium ");
  let color = mutable_source("default");
  set(color, getContext("color"));
  let tdClassfinal = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(tdClass()), get(color), deep_read_state($$sanitized_props)),
    () => {
      set(tdClassfinal, twMerge(
        tdClass(),
        strict_equals(get(color), "default") ? "text-gray-900 dark:text-white" : "text-blue-50 whitespace-nowrap dark:text-blue-100",
        $$sanitized_props.class
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var td = root81();
  attribute_effect(td, () => ({ ...$$restProps, class: get(tdClassfinal) }));
  var node = child(td);
  {
    var consequent = ($$anchor2) => {
      var button = root_151();
      var node_1 = child(button);
      slot(node_1, $$props, "default", {}, null);
      reset(button);
      event("click", button, function(...$$args) {
        apply(() => $$sanitized_props.onclick, this, $$args, TableBodyCell, [12, 20]);
      });
      append($$anchor2, button);
    };
    var alternate = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(node_2, $$props, "default", {}, null);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.onclick)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TableBodyCell,
      11,
      2
    );
  }
  reset(td);
  append($$anchor, td);
  return pop($$exports);
}
if (import.meta.hot) {
  TableBodyCell = hmr(TableBodyCell, () => TableBodyCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyCell[HMR].source;
    set(TableBodyCell[HMR].source, module.default[HMR].original);
  });
}
var TableBodyCell_default = TableBodyCell;

// node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte
TableBodyRow[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte";
var root82 = add_locations(from_html(`<tr><!></tr>`), TableBodyRow[FILENAME], [[35, 0]]);
function TableBodyRow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color"]);
  push($$props, false, TableBodyRow);
  let color = prop($$props, "color", 24, () => getContext("color"));
  const colors = {
    default: "bg-white dark:bg-gray-800 dark:border-gray-700",
    blue: "bg-blue-500 border-blue-400",
    green: "bg-green-500 border-green-400",
    red: "bg-red-500 border-red-400",
    yellow: "bg-yellow-500 border-yellow-400",
    purple: "bg-purple-500 border-purple-400",
    custom: ""
  };
  const hoverColors = {
    default: "hover:bg-gray-50 dark:hover:bg-gray-600",
    blue: "hover:bg-blue-400",
    green: "hover:bg-green-400",
    red: "hover:bg-red-400",
    yellow: "hover:bg-yellow-400",
    purple: "hover:bg-purple-400",
    custom: ""
  };
  const stripColors = {
    default: "odd:bg-white even:bg-gray-50 odd:dark:bg-gray-800 even:dark:bg-gray-700",
    blue: "odd:bg-blue-800 even:bg-blue-700 odd:dark:bg-blue-800 even:dark:bg-blue-700",
    green: "odd:bg-green-800 even:bg-green-700 odd:dark:bg-green-800 even:dark:bg-green-700",
    red: "odd:bg-red-800 even:bg-red-700 odd:dark:bg-red-800 even:dark:bg-red-700",
    yellow: "odd:bg-yellow-800 even:bg-yellow-700 odd:dark:bg-yellow-800 even:dark:bg-yellow-700",
    purple: "odd:bg-purple-800 even:bg-purple-700 odd:dark:bg-purple-800 even:dark:bg-purple-700",
    custom: ""
  };
  let trClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, getContext, deep_read_state(color()), deep_read_state($$sanitized_props)),
    () => {
      set(trClass, twMerge([
        !getContext("noborder") && "border-b last:border-b-0",
        colors[color()],
        getContext("hoverable") && hoverColors[color()],
        getContext("striped") && stripColors[color()],
        $$sanitized_props.class
      ]));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var tr = root82();
  attribute_effect(tr, () => ({ ...$$restProps, class: get(trClass) }));
  var node = child(tr);
  slot(node, $$props, "default", {}, null);
  reset(tr);
  event("click", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("dblclick", tr, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, tr);
  return pop($$exports);
}
if (import.meta.hot) {
  TableBodyRow = hmr(TableBodyRow, () => TableBodyRow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyRow[HMR].source;
    set(TableBodyRow[HMR].source, module.default[HMR].original);
  });
}
var TableBodyRow_default = TableBodyRow;

// node_modules/flowbite-svelte/dist/table/TableHead.svelte
TableHead[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableHead.svelte";
var root_152 = add_locations(from_html(`<tr><!></tr>`), TableHead[FILENAME], [[26, 4]]);
var root83 = add_locations(from_html(`<thead><!></thead>`), TableHead[FILENAME], [[24, 0]]);
function TableHead($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["theadClass", "defaultRow"]);
  push($$props, false, TableHead);
  const theadClassfinal = mutable_source();
  let theadClass = prop($$props, "theadClass", 8, "text-xs uppercase");
  let defaultRow = prop($$props, "defaultRow", 8, true);
  let color = mutable_source();
  set(color, getContext("color"));
  let noborder = getContext("noborder");
  let striped = getContext("striped");
  let defaultBgColor = noborder || striped ? "" : "bg-gray-50 dark:bg-gray-700";
  const bgColors2 = {
    default: defaultBgColor,
    blue: "bg-blue-600",
    green: "bg-green-600",
    red: "bg-red-600",
    yellow: "bg-yellow-600",
    purple: "bg-purple-600",
    custom: ""
  };
  let textColor = strict_equals(get(color), "default") ? "text-gray-700 dark:text-gray-400" : strict_equals(get(color), "custom") ? "" : "text-white  dark:text-white";
  let borderColors = striped ? "" : strict_equals(get(color), "default") ? "border-gray-700" : strict_equals(get(color), "custom") ? "" : `border-${get(color)}-400`;
  legacy_pre_effect(
    () => (twMerge, deep_read_state(theadClass()), get(color), deep_read_state($$sanitized_props)),
    () => {
      set(theadClassfinal, twMerge(theadClass(), textColor, striped && borderColors, bgColors2[get(color)], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var thead = root83();
  attribute_effect(thead, () => ({ ...$$restProps, class: get(theadClassfinal) }));
  var node = child(thead);
  {
    var consequent = ($$anchor2) => {
      var tr = root_152();
      var node_1 = child(tr);
      slot(node_1, $$props, "default", {}, null);
      reset(tr);
      append($$anchor2, tr);
    };
    var alternate = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      slot(node_2, $$props, "default", {}, null);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (defaultRow()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TableHead,
      25,
      2
    );
  }
  reset(thead);
  append($$anchor, thead);
  return pop($$exports);
}
if (import.meta.hot) {
  TableHead = hmr(TableHead, () => TableHead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHead[HMR].source;
    set(TableHead[HMR].source, module.default[HMR].original);
  });
}
var TableHead_default = TableHead;

// node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte
TableHeadCell[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte";
var root_153 = add_locations(from_html(`<th><button><!></button></th>`), TableHeadCell[FILENAME], [[27, 0, [[28, 2]]]]);
var root_232 = add_locations(from_html(`<th><!></th>`), TableHeadCell[FILENAME], [[33, 0]]);
function TableHeadCell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "padding",
    "sort",
    "defaultDirection",
    "defaultSort",
    "direction"
  ]);
  push($$props, false, TableHeadCell);
  const $sorter = () => (validate_store(sorter, "sorter"), store_get(sorter, "$sorter", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let padding = prop($$props, "padding", 8, "px-6 py-3");
  let sort = prop($$props, "sort", 8, null);
  let defaultDirection = prop($$props, "defaultDirection", 8, "asc");
  let defaultSort = prop($$props, "defaultSort", 8, false);
  let direction = prop($$props, "direction", 28, () => defaultSort() ? defaultDirection() : null);
  let sorter = getContext("sorter");
  let sortId = Math.random().toString(36).substring(2);
  if (defaultSort()) {
    sortItems();
  }
  function sortItems() {
    if (!sort() || !sorter) return;
    sorter.update((sorter2) => {
      return {
        id: sortId,
        sort: sort(),
        sortDirection: strict_equals(sorter2 == null ? void 0 : sorter2.id, sortId) ? -sorter2.sortDirection : strict_equals(defaultDirection(), "asc") ? 1 : -1
      };
    });
  }
  legacy_pre_effect(() => $sorter(), () => {
    var _a;
    direction(strict_equals((_a = $sorter()) == null ? void 0 : _a.id, sortId) ? strict_equals($sorter().sortDirection, 1) ? "asc" : "desc" : null);
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var th = root_153();
      attribute_effect(th, () => ({
        ...$$restProps,
        class: (deep_read_state($$sanitized_props), untrack(() => $$sanitized_props.class)),
        "aria-sort": direction() ? `${direction()}ending` : void 0
      }));
      var button = child(th);
      var node_1 = child(button);
      slot(node_1, $$props, "default", {}, null);
      reset(button);
      reset(th);
      template_effect(($0) => set_class(button, 1, $0), [
        () => clsx((deep_read_state(twMerge), deep_read_state(direction()), deep_read_state(padding()), untrack(() => twMerge("w-full text-left", "after:absolute after:pl-3", strict_equals(direction(), "asc") && 'after:content-["▲"]', strict_equals(direction(), "desc") && 'after:content-["▼"]', padding()))))
      ]);
      event("click", button, sortItems);
      event("click", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", th, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, th);
    };
    var alternate = ($$anchor2) => {
      var th_1 = root_232();
      attribute_effect(th_1, ($0) => ({ ...$$restProps, class: $0 }), [
        () => (deep_read_state(twMerge), deep_read_state(padding()), deep_read_state($$sanitized_props), untrack(() => twMerge(padding(), $$sanitized_props.class)))
      ]);
      var node_2 = child(th_1);
      slot(node_2, $$props, "default", {}, null);
      reset(th_1);
      event("click", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("focus", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keydown", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keypress", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("keyup", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseenter", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseleave", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      event("mouseover", th_1, function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      });
      append($$anchor2, th_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (sort() && sorter) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TableHeadCell,
      26,
      0
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  TableHeadCell = hmr(TableHeadCell, () => TableHeadCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHeadCell[HMR].source;
    set(TableHeadCell[HMR].source, module.default[HMR].original);
  });
}
var TableHeadCell_default = TableHeadCell;

// node_modules/flowbite-svelte/dist/table/TableSearch.svelte
TableSearch[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableSearch.svelte";
var root_154 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>`), TableSearch[FILENAME], [[37, 10, [[38, 12]]]]);
var root84 = add_locations(from_html(`<div><div><label for="table-search" class="sr-only">Search</label> <div><div><!></div> <input type="text" id="table-search"/></div> <!></div> <table><!></table> <!></div>`), TableSearch[FILENAME], [
  [
    31,
    0,
    [[32, 2, [[33, 4], [34, 4, [[35, 6], [42, 6]]]]], [46, 2]]
  ]
]);
function TableSearch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "divClass",
    "inputValue",
    "striped",
    "hoverable",
    "placeholder",
    "customColor",
    "color",
    "innerDivClass",
    "searchClass",
    "svgDivClass",
    "svgClass",
    "inputClass"
  ]);
  push($$props, false, TableSearch);
  let divClass = prop($$props, "divClass", 8, "relative overflow-x-auto shadow-md sm:rounded-lg");
  let inputValue = prop($$props, "inputValue", 12, "");
  let striped = prop($$props, "striped", 8, false);
  let hoverable = prop($$props, "hoverable", 8, false);
  let placeholder = prop($$props, "placeholder", 8, "Search");
  let customColor = prop($$props, "customColor", 8, "");
  let color = prop($$props, "color", 8, "default");
  let innerDivClass = prop($$props, "innerDivClass", 8, "p-4");
  let searchClass = prop($$props, "searchClass", 8, "relative mt-1");
  let svgDivClass = prop($$props, "svgDivClass", 8, "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none");
  let svgClass = prop($$props, "svgClass", 8, "w-5 h-5 text-gray-500 dark:text-gray-400");
  let inputClass2 = prop($$props, "inputClass", 8, "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 p-2.5 ps-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500");
  let inputCls = twMerge(inputClass2(), $$sanitized_props.classInput);
  let svgDivCls = twMerge(svgDivClass(), $$sanitized_props.classSvgDiv);
  const colors = {
    default: "text-gray-500 dark:text-gray-400",
    blue: "text-blue-100 dark:text-blue-100",
    green: "text-green-100 dark:text-green-100",
    red: "text-red-100 dark:text-red-100",
    yellow: "text-yellow-100 dark:text-yellow-100",
    purple: "text-purple-100 dark:text-purple-100",
    custom: customColor()
  };
  legacy_pre_effect(() => (setContext, deep_read_state(striped())), () => {
    setContext("striped", striped());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(hoverable())), () => {
    setContext("hoverable", hoverable());
  });
  legacy_pre_effect(() => (setContext, deep_read_state(color())), () => {
    setContext("color", color());
  });
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var div = root84();
  var div_1 = child(div);
  var div_2 = sibling(child(div_1), 2);
  var div_3 = child(div_2);
  var node = child(div_3);
  slot(node, $$props, "svgSearch", {}, ($$anchor2) => {
    var svg = root_154();
    template_effect(() => set_class(svg, 0, clsx(svgClass())));
    append($$anchor2, svg);
  });
  reset(div_3);
  var input = sibling(div_3, 2);
  remove_input_defaults(input);
  reset(div_2);
  var node_1 = sibling(div_2, 2);
  slot(node_1, $$props, "header", {}, null);
  reset(div_1);
  var table = sibling(div_1, 2);
  attribute_effect(table, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge("w-full text-left text-sm", colors[color()], $$sanitized_props.class)))
  ]);
  var node_2 = child(table);
  slot(node_2, $$props, "default", {}, null);
  reset(table);
  var node_3 = sibling(table, 2);
  slot(node_3, $$props, "footer", {}, null);
  reset(div);
  template_effect(() => {
    set_class(div, 1, clsx(divClass()));
    set_class(div_1, 1, clsx(innerDivClass()));
    set_class(div_2, 1, clsx(searchClass()));
    set_class(div_3, 1, clsx(svgDivCls));
    set_class(input, 1, clsx(inputCls));
    set_attribute(input, "placeholder", placeholder());
  });
  bind_value(input, inputValue);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TableSearch = hmr(TableSearch, () => TableSearch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableSearch[HMR].source;
    set(TableSearch[HMR].source, module.default[HMR].original);
  });
}
var TableSearch_default = TableSearch;

// node_modules/flowbite-svelte/dist/tabs/TabItem.svelte
TabItem[FILENAME] = "node_modules/flowbite-svelte/dist/tabs/TabItem.svelte";
var root_233 = add_locations(from_html(`<div class="hidden tab_content_placeholder"><div><!></div></div>`), TabItem[FILENAME], [[36, 4, [[37, 6]]]]);
var root85 = add_locations(from_html(`<li role="presentation"><button><!></button> <!></li>`), TabItem[FILENAME], [[30, 0, [[31, 2]]]]);
function TabItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "open",
    "title",
    "activeClasses",
    "inactiveClasses",
    "defaultClass",
    "divClass"
  ]);
  push($$props, false, TabItem);
  let open = prop($$props, "open", 12, false);
  let title = prop($$props, "title", 8, "Tab title");
  let activeClasses = prop($$props, "activeClasses", 24, () => void 0);
  let inactiveClasses = prop($$props, "inactiveClasses", 24, () => void 0);
  let defaultClass = prop($$props, "defaultClass", 8, "inline-block text-sm font-medium text-center disabled:cursor-not-allowed");
  let divClass = prop($$props, "divClass", 8, "");
  const ctx = getContext("ctx") ?? {};
  const selected = ctx.selected ?? writable();
  function init2(node) {
    selected.set(node);
    const destroy = selected.subscribe((x) => {
      if (strict_equals(x, node, false)) {
        open(false);
      }
    });
    return { destroy };
  }
  let buttonClass = mutable_source();
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(open()), deep_read_state(activeClasses()), deep_read_state(inactiveClasses())),
    () => {
      set(buttonClass, twMerge(
        defaultClass(),
        open() ? activeClasses() ?? ctx.activeClasses : inactiveClasses() ?? ctx.inactiveClasses,
        open() && "active"
      ));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var li = root85();
  var button = child(li);
  attribute_effect(button, () => ({
    type: "button",
    role: "tab",
    ...$$restProps,
    class: get(buttonClass)
  }));
  var node_1 = child(button);
  slot(node_1, $$props, "title", {}, ($$anchor2) => {
    var text2 = text();
    template_effect(() => set_text(text2, title()));
    append($$anchor2, text2);
  });
  reset(button);
  var node_2 = sibling(button, 2);
  {
    var consequent = ($$anchor2) => {
      var div = root_233();
      var div_1 = child(div);
      var node_3 = child(div_1);
      slot(node_3, $$props, "default", {}, null);
      reset(div_1);
      action(div_1, ($$node) => init2 == null ? void 0 : init2($$node));
      reset(div);
      template_effect(() => set_class(div_1, 1, clsx(divClass())));
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (open()) $$render(consequent);
      }),
      "if",
      TabItem,
      35,
      2
    );
  }
  reset(li);
  template_effect(($0) => set_class(li, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state($$sanitized_props), untrack(() => twMerge("group", $$sanitized_props.class))))
  ]);
  event("click", button, () => open(true));
  event("blur", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("contextmenu", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("focus", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keydown", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keypress", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("keyup", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseenter", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseleave", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  event("mouseover", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  TabItem = hmr(TabItem, () => TabItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabItem[HMR].source;
    set(TabItem[HMR].source, module.default[HMR].original);
  });
}
var TabItem_default = TabItem;

// node_modules/flowbite-svelte/dist/tabs/Tabs.svelte
Tabs[FILENAME] = "node_modules/flowbite-svelte/dist/tabs/Tabs.svelte";
var root_234 = add_locations(from_html(`<div class="h-px bg-gray-200 dark:bg-gray-700"></div>`), Tabs[FILENAME], [[45, 4]]);
var root86 = add_locations(from_html(`<ul><!></ul> <!> <div role="tabpanel" aria-labelledby="id-tab"></div>`, 1), Tabs[FILENAME], [[40, 0], [48, 0]]);
function Tabs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "tabStyle",
    "defaultClass",
    "contentClass",
    "divider",
    "activeClasses",
    "inactiveClasses"
  ]);
  push($$props, false, Tabs);
  const ulClass = mutable_source();
  let tabStyle = prop($$props, "tabStyle", 8, "none");
  let defaultClass = prop($$props, "defaultClass", 8, "flex flex-wrap space-x-2 rtl:space-x-reverse");
  let contentClass = prop($$props, "contentClass", 8, "p-4 bg-gray-50 rounded-lg dark:bg-gray-800 mt-4");
  let divider = prop($$props, "divider", 12, true);
  let activeClasses = prop($$props, "activeClasses", 8, "p-4 text-primary-600 bg-gray-100 rounded-t-lg dark:bg-gray-800 dark:text-primary-500");
  let inactiveClasses = prop($$props, "inactiveClasses", 8, "p-4 text-gray-500 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300");
  const styledActiveClasses = {
    full: "p-4 w-full group-first:rounded-s-lg group-last:rounded-e-lg text-gray-900 bg-gray-100 focus:ring-4 focus:ring-primary-300 focus:outline-none dark:bg-gray-700 dark:text-white",
    pill: "py-3 px-4 text-white bg-primary-600 rounded-lg",
    underline: "p-4 text-primary-600 border-b-2 border-primary-600 dark:text-primary-500 dark:border-primary-500",
    none: ""
  };
  const styledInactiveClasses = {
    full: "p-4 w-full group-first:rounded-s-lg group-last:rounded-e-lg text-gray-500 dark:text-gray-400 bg-white hover:text-gray-700 hover:bg-gray-50 focus:ring-4 focus:ring-primary-300 focus:outline-none dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700",
    pill: "py-3 px-4 text-gray-500 rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white",
    underline: "p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 text-gray-500 dark:text-gray-400",
    none: ""
  };
  const ctx = {
    activeClasses: styledActiveClasses[tabStyle()] || activeClasses(),
    inactiveClasses: styledInactiveClasses[tabStyle()] || inactiveClasses(),
    selected: writable()
  };
  setContext("ctx", ctx);
  function init2(node) {
    const destroy = ctx.selected.subscribe((x) => {
      if (x) node.replaceChildren(x);
    });
    return { destroy };
  }
  legacy_pre_effect(() => (deep_read_state(divider()), deep_read_state(tabStyle())), () => {
    divider(["full", "pill"].includes(tabStyle()) ? false : divider());
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(defaultClass()), deep_read_state(tabStyle()), deep_read_state($$sanitized_props)),
    () => {
      set(ulClass, twMerge(defaultClass(), strict_equals(tabStyle(), "underline") && "-mb-px", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = root86();
  var ul = first_child(fragment);
  attribute_effect(ul, () => ({ ...$$restProps, class: get(ulClass) }));
  var node_1 = child(ul);
  slot(
    node_1,
    $$props,
    "default",
    {
      get tabStyle() {
        return tabStyle();
      }
    },
    null
  );
  reset(ul);
  var node_2 = sibling(ul, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      slot(node_3, $$props, "divider", {}, ($$anchor3) => {
        var div = root_234();
        append($$anchor3, div);
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (divider()) $$render(consequent);
      }),
      "if",
      Tabs,
      43,
      0
    );
  }
  var div_1 = sibling(node_2, 2);
  action(div_1, ($$node) => init2 == null ? void 0 : init2($$node));
  template_effect(() => set_class(div_1, 1, clsx(contentClass())));
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tabs = hmr(Tabs, () => Tabs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tabs[HMR].source;
    set(Tabs[HMR].source, module.default[HMR].original);
  });
}
var Tabs_default = Tabs;

// node_modules/flowbite-svelte/dist/timeline/Group.svelte
Group[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Group.svelte";
var root87 = add_locations(from_html(`<div><time> </time> <ol><!></ol></div>`), Group[FILENAME], [[11, 0, [[12, 2], [13, 2]]]]);
function Group($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass", "timeClass", "date", "olClass"]);
  push($$props, false, Group);
  let divClass = prop($$props, "divClass", 8, "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700");
  let timeClass = prop($$props, "timeClass", 8, "text-lg font-semibold text-gray-900 dark:text-white");
  let date = prop($$props, "date", 8, "");
  let olClass = prop($$props, "olClass", 8, "mt-3 divide-y divider-gray-200 dark:divide-gray-700");
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let timeCls = twMerge(timeClass(), $$sanitized_props.classTime);
  let olCls = twMerge(olClass(), $$sanitized_props.classOl);
  var $$exports = { ...legacy_api() };
  init();
  var div = root87();
  var time = child(div);
  var text2 = child(time, true);
  reset(time);
  var ol = sibling(time, 2);
  attribute_effect(ol, () => ({ ...$$restProps, class: olCls }));
  var node = child(ol);
  slot(node, $$props, "default", {}, null);
  reset(ol);
  reset(div);
  template_effect(() => {
    set_class(div, 1, clsx(divCls));
    set_class(time, 1, clsx(timeCls));
    set_text(text2, date());
  });
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Group = hmr(Group, () => Group[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Group[HMR].source;
    set(Group[HMR].source, module.default[HMR].original);
  });
}
var Group_default = Group;

// node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte
GroupItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte";
var root_235 = add_locations(from_html(`<div class="text-sm font-normal"> </div>`), GroupItem[FILENAME], [[25, 10]]);
var root_418 = add_locations(from_svg(`<svg class="me-1 w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd"></path><path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"></path></svg> Private`, 1), GroupItem[FILENAME], [[30, 12, [[31, 14], [32, 14]]]]);
var root_59 = add_locations(from_svg(`<svg class="me-1 w-3 h-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"></path></svg> Public`, 1), GroupItem[FILENAME], [[36, 12, [[37, 14]]]]);
var root_332 = add_locations(from_html(`<span><!></span>`), GroupItem[FILENAME], [[28, 8]]);
var root_155 = add_locations(from_html(`<li><a><img/> <div><div><!></div> <!> <!></div></a></li>`), GroupItem[FILENAME], [[17, 2, [[18, 4, [[19, 6], [20, 6, [[21, 8]]]]]]]]);
function GroupItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, GroupItem);
  let timelines = prop($$props, "timelines", 8);
  let aClass = prop($$props, "aClass", 8, "block items-center p-3 sm:flex hover:bg-gray-100 dark:hover:bg-gray-700");
  let imgClass = prop($$props, "imgClass", 8, "me-3 mb-3 w-12 h-12 rounded-full sm:mb-0");
  let divClass = prop($$props, "divClass", 8, "text-gray-600 dark:text-gray-400");
  let titleClass = prop($$props, "titleClass", 8, "text-base font-normal");
  let spanClass = prop($$props, "spanClass", 8, "inline-flex items-center text-xs font-normal text-gray-500 dark:text-gray-400");
  let isPrivacy = prop($$props, "isPrivacy", 8, true);
  let aCls = twMerge(aClass(), $$sanitized_props.classA);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  let divCls = twMerge(divClass(), $$sanitized_props.classDiv);
  let titleCls = twMerge(titleClass(), $$sanitized_props.classTitle);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 1, timelines, index, ($$anchor2, $$item) => {
      let title = () => get($$item).title;
      title();
      let src = () => get($$item).src;
      src();
      let alt = () => get($$item).alt;
      alt();
      let isPrivate = () => get($$item).isPrivate;
      isPrivate();
      let href = () => get($$item).href;
      href();
      let comment2 = () => get($$item).comment;
      comment2();
      var li = root_155();
      var a = child(li);
      var img = child(a);
      var div = sibling(img, 2);
      var div_1 = child(div);
      var node_1 = child(div_1);
      html(node_1, title);
      reset(div_1);
      var node_2 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_2 = root_235();
          var text2 = child(div_2, true);
          reset(div_2);
          template_effect(() => set_text(text2, comment2()));
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (comment2()) $$render(consequent);
          }),
          "if",
          GroupItem,
          24,
          8
        );
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var span = root_332();
          var node_4 = child(span);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_1 = root_418();
              next();
              append($$anchor4, fragment_1);
            };
            var alternate = ($$anchor4) => {
              var fragment_2 = root_59();
              next();
              append($$anchor4, fragment_2);
            };
            add_svelte_meta(
              () => if_block(node_4, ($$render) => {
                if (isPrivate()) $$render(consequent_1);
                else $$render(alternate, false);
              }),
              "if",
              GroupItem,
              29,
              10
            );
          }
          reset(span);
          template_effect(() => set_class(span, 1, clsx(spanCls)));
          append($$anchor3, span);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (isPrivacy()) $$render(consequent_2);
          }),
          "if",
          GroupItem,
          27,
          8
        );
      }
      reset(div);
      reset(a);
      reset(li);
      template_effect(() => {
        set_attribute(a, "href", href());
        set_class(a, 1, clsx(aCls));
        set_class(img, 1, clsx(imgCls));
        set_attribute(img, "src", src());
        set_attribute(img, "alt", alt());
        set_class(div, 1, clsx(divCls));
        set_class(div_1, 1, clsx(titleCls));
      });
      append($$anchor2, li);
    }),
    "each",
    GroupItem,
    16,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  GroupItem = hmr(GroupItem, () => GroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GroupItem[HMR].source;
    set(GroupItem[HMR].source, module.default[HMR].original);
  });
}
var GroupItem_default = GroupItem;

// node_modules/flowbite-svelte/dist/timeline/Activity.svelte
Activity[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Activity.svelte";
var root88 = add_locations(from_html(`<ol><!></ol>`), Activity[FILENAME], [[6, 0]]);
function Activity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Activity);
  let olClass = prop($$props, "olClass", 8, "relative border-s border-gray-200 dark:border-gray-700");
  let olCls = twMerge(olClass(), $$sanitized_props.class);
  var $$exports = { ...legacy_api() };
  init();
  var ol = root88();
  var node = child(ol);
  slot(node, $$props, "default", {}, null);
  reset(ol);
  template_effect(() => set_class(ol, 1, clsx(olCls)));
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  Activity = hmr(Activity, () => Activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Activity[HMR].source;
    set(Activity[HMR].source, module.default[HMR].original);
  });
}
var Activity_default = Activity;

// node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte
ActivityItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte";
var root_236 = add_locations(from_html(`<div><!></div>`), ActivityItem[FILENAME], [[34, 8]]);
var root_156 = add_locations(from_html(`<li><span><img/></span> <div><div><time> </time> <div><!></div></div> <!></div></li>`), ActivityItem[FILENAME], [
  [
    22,
    2,
    [[23, 4, [[24, 6]]], [26, 4, [[27, 6, [[28, 8], [29, 8]]]]]]
  ]
]);
function ActivityItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ActivityItem);
  let activities = prop($$props, "activities", 24, () => []);
  let liClass = prop($$props, "liClass", 8, "mb-10 ms-6");
  let spanClass = prop($$props, "spanClass", 8, "flex absolute -start-3 justify-center items-center w-6 h-6 bg-blue-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-blue-900");
  let imgClass = prop($$props, "imgClass", 8, "rounded-full shadow-lg");
  let outerDivClass = prop($$props, "outerDivClass", 8, "p-4 bg-white rounded-lg border border-gray-200 shadow-sm dark:bg-gray-700 dark:border-gray-600");
  let innerDivClass = prop($$props, "innerDivClass", 8, "justify-between items-center mb-3 sm:flex");
  let timeClass = prop($$props, "timeClass", 8, "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0");
  let titleClass = prop($$props, "titleClass", 8, "text-sm font-normal text-gray-500 lex dark:text-gray-300");
  let textClass = prop($$props, "textClass", 8, "p-3 text-xs italic font-normal text-gray-500 bg-gray-50 rounded-lg border border-gray-200 dark:bg-gray-600 dark:border-gray-500 dark:text-gray-300");
  let liCls = twMerge(liClass(), $$sanitized_props.classLi);
  let spanCls = twMerge(spanClass(), $$sanitized_props.classSpan);
  let imgCls = twMerge(imgClass(), $$sanitized_props.classImg);
  let outerDivCls = twMerge(outerDivClass(), $$sanitized_props.classOuterDiv);
  let innerDivCls = twMerge(innerDivClass(), $$sanitized_props.classInnerDiv);
  let timeCls = twMerge(timeClass(), $$sanitized_props.classTime);
  let titleCls = twMerge(titleClass(), $$sanitized_props.classTitle);
  let textCls = twMerge(textClass(), $$sanitized_props.classText);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 1, activities, index, ($$anchor2, $$item) => {
      let title = () => get($$item).title;
      title();
      let date = () => get($$item).date;
      date();
      let src = () => get($$item).src;
      src();
      let alt = () => get($$item).alt;
      alt();
      let text2 = () => get($$item).text;
      text2();
      var li = root_156();
      var span = child(li);
      var img = child(span);
      reset(span);
      var div = sibling(span, 2);
      var div_1 = child(div);
      var time = child(div_1);
      var text_1 = child(time, true);
      reset(time);
      var div_2 = sibling(time, 2);
      var node_1 = child(div_2);
      html(node_1, title);
      reset(div_2);
      reset(div_1);
      var node_2 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_3 = root_236();
          var node_3 = child(div_3);
          html(node_3, text2);
          reset(div_3);
          template_effect(() => set_class(div_3, 1, clsx(textCls)));
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (text2()) $$render(consequent);
          }),
          "if",
          ActivityItem,
          33,
          6
        );
      }
      reset(div);
      reset(li);
      template_effect(() => {
        set_class(li, 1, clsx(liCls));
        set_class(span, 1, clsx(spanCls));
        set_class(img, 1, clsx(imgCls));
        set_attribute(img, "src", src());
        set_attribute(img, "alt", alt());
        set_class(div, 1, clsx(outerDivCls));
        set_class(div_1, 1, clsx(innerDivCls));
        set_class(time, 1, clsx(timeCls));
        set_text(text_1, date());
        set_class(div_2, 1, clsx(titleCls));
      });
      append($$anchor2, li);
    }),
    "each",
    ActivityItem,
    21,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ActivityItem = hmr(ActivityItem, () => ActivityItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ActivityItem[HMR].source;
    set(ActivityItem[HMR].source, module.default[HMR].original);
  });
}
var ActivityItem_default = ActivityItem;

// node_modules/flowbite-svelte/dist/timeline/Timeline.svelte
Timeline[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Timeline.svelte";
var root89 = add_locations(from_html(`<ol><!></ol>`), Timeline[FILENAME], [[14, 0]]);
function Timeline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["order"]);
  push($$props, false, Timeline);
  let order = prop($$props, "order", 8, "default");
  setContext("order", order());
  let olClasses = {
    group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
    horizontal: "sm:flex",
    activity: "relative border-s border-gray-200 dark:border-gray-700",
    vertical: "relative border-s border-gray-200 dark:border-gray-700",
    default: "relative border-s border-gray-200 dark:border-gray-700"
  };
  var $$exports = { ...legacy_api() };
  init();
  var ol = root89();
  attribute_effect(ol, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(order()), deep_read_state($$sanitized_props), untrack(() => twMerge(olClasses[order()], $$sanitized_props.class)))
  ]);
  var node = child(ol);
  slot(node, $$props, "default", {}, null);
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  Timeline = hmr(Timeline, () => Timeline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timeline[HMR].source;
    set(Timeline[HMR].source, module.default[HMR].original);
  });
}
var Timeline_default = Timeline;

// node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte
TimelineItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte";
var root_237 = add_locations(from_svg(`<svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>`), TimelineItem[FILENAME], [[39, 6, [[40, 8]]]]);
var root_419 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[44, 4]]);
var root_510 = add_locations(from_html(`<h3> </h3>`), TimelineItem[FILENAME], [[48, 4]]);
var root_77 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[55, 6]]);
var root90 = add_locations(from_html(`<li><div></div> <!> <!> <!> <!></li>`), TimelineItem[FILENAME], [[35, 0, [[36, 2]]]]);
function TimelineItem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, TimelineItem);
  let title = prop($$props, "title", 8, "");
  let date = prop($$props, "date", 8, "");
  let svgClass = prop($$props, "svgClass", 8, "w-3 h-3 text-primary-600 dark:text-primary-400");
  let order = mutable_source("default");
  set(order, getContext("order"));
  const liClasses = {
    default: "mb-10 ms-4",
    vertical: "mb-10 ms-6",
    horizontal: "relative mb-6 sm:mb-0",
    activity: "mb-10 ms-6",
    group: ""
  };
  const divClasses = {
    default: "absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700",
    vertical: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
    horizontal: "flex items-center",
    activity: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
    group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700"
  };
  const timeClasses = {
    default: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    vertical: "block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    horizontal: "block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
    activity: "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0",
    group: "text-lg font-semibold text-gray-900 dark:text-white"
  };
  let liCls = twMerge(liClasses[get(order)], $$sanitized_props.classLi);
  let divCls = twMerge(divClasses[get(order)], $$sanitized_props.classDiv);
  let timeCls = twMerge(timeClasses[get(order)], $$sanitized_props.classTime);
  const h3Cls = twMerge(
    strict_equals(get(order), "vertical") ? "flex items-center mb-1 text-lg font-semibold text-gray-900 dark:text-white" : "text-lg font-semibold text-gray-900 dark:text-white",
    $$sanitized_props.classH3
  );
  var $$exports = { ...legacy_api() };
  init();
  var li = root90();
  var div = child(li);
  var node = sibling(div, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      slot(node_1, $$props, "icon", {}, ($$anchor3) => {
        var svg = root_237();
        template_effect(() => set_class(svg, 0, clsx(svgClass())));
        append($$anchor3, svg);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var time = root_419();
          var text2 = child(time, true);
          reset(time);
          template_effect(() => {
            set_class(time, 1, clsx(timeCls));
            set_text(text2, date());
          });
          append($$anchor3, time);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (date()) $$render(consequent_1);
            },
            true
          ),
          "if",
          TimelineItem,
          43,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(get(order), "default", false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TimelineItem,
      37,
      2
    );
  }
  var node_3 = sibling(node, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var h3 = root_510();
      var text_1 = child(h3, true);
      reset(h3);
      template_effect(() => {
        set_class(h3, 1, clsx(h3Cls));
        set_text(text_1, title());
      });
      append($$anchor2, h3);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (title()) $$render(consequent_2);
      }),
      "if",
      TimelineItem,
      47,
      2
    );
  }
  var node_4 = sibling(node_3, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      {
        var consequent_3 = ($$anchor3) => {
          var time_1 = root_77();
          var text_2 = child(time_1, true);
          reset(time_1);
          template_effect(() => {
            set_class(time_1, 1, clsx(timeCls));
            set_text(text_2, date());
          });
          append($$anchor3, time_1);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (date()) $$render(consequent_3);
          }),
          "if",
          TimelineItem,
          54,
          4
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (strict_equals(get(order), "default", false)) $$render(consequent_4);
      }),
      "if",
      TimelineItem,
      53,
      2
    );
  }
  var node_6 = sibling(node_4, 2);
  slot(node_6, $$props, "default", {}, null);
  reset(li);
  template_effect(() => {
    set_class(li, 1, clsx(liCls));
    set_class(div, 1, clsx(divCls));
  });
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  TimelineItem = hmr(TimelineItem, () => TimelineItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TimelineItem[HMR].source;
    set(TimelineItem[HMR].source, module.default[HMR].original);
  });
}
var TimelineItem_default = TimelineItem;

// node_modules/flowbite-svelte/dist/toast/Toast.svelte
Toast[FILENAME] = "node_modules/flowbite-svelte/dist/toast/Toast.svelte";
var root_238 = add_locations(from_html(`<div><!></div>`), Toast[FILENAME], [[59, 6]]);
var root_157 = add_locations(from_html(`<div><!> <div><!></div> <!></div>`), Toast[FILENAME], [[52, 2, [[64, 4]]]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "dismissable",
    "color",
    "position",
    "divClass",
    "defaultIconClass",
    "contentClass",
    "align",
    "transition",
    "params",
    "toastStatus"
  ]);
  push($$props, false, Toast);
  let dismissable = prop($$props, "dismissable", 8, true);
  let color = prop($$props, "color", 8, "primary");
  let position = prop($$props, "position", 8, "none");
  let divClass = prop($$props, "divClass", 8, "w-full max-w-xs p-4 text-gray-500 bg-white shadow dark:text-gray-400 dark:bg-gray-800 gap-3");
  let defaultIconClass = prop($$props, "defaultIconClass", 8, "w-8 h-8");
  let contentClass = prop($$props, "contentClass", 8, "w-full text-sm font-normal");
  let align = prop($$props, "align", 8, true);
  let transition2 = prop($$props, "transition", 8, fade);
  let params = prop($$props, "params", 24, () => ({}));
  let toastStatus = prop($$props, "toastStatus", 12, true);
  const dispatch = createEventDispatcher();
  const positions = {
    "top-left": "absolute top-5 start-5",
    "top-right": "absolute top-5 end-5",
    "bottom-left": "absolute bottom-5 start-5",
    "bottom-right": "absolute bottom-5 end-5",
    none: ""
  };
  let finalDivClass = twMerge("flex", align() ? "items-center" : "items-start", divClass(), positions[position()], $$sanitized_props.class);
  const colors = {
    primary: "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200",
    dark: "text-gray-500 bg-gray-100 dark:bg-gray-700 dark:text-gray-200",
    red: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
    yellow: "text-yellow-500 bg-yellow-100 dark:bg-yellow-800 dark:text-yellow-200",
    green: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
    blue: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
    indigo: "text-indigo-500 bg-indigo-100 dark:bg-indigo-800 dark:text-indigo-200",
    purple: "text-purple-500 bg-purple-100 dark:bg-purple-800 dark:text-purple-200",
    pink: "text-pink-500 bg-pink-100 dark:bg-pink-700 dark:text-pink-200",
    none: ""
  };
  let iconClass = mutable_source();
  const clsBtnExtraClass = "ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700";
  legacy_pre_effect(
    () => (twMerge, deep_read_state(color()), deep_read_state(defaultIconClass())),
    () => {
      set(iconClass, twMerge("inline-flex items-center justify-center shrink-0 rounded-lg", colors[color()], defaultIconClass()));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_157();
      attribute_effect(div, () => ({ role: "alert", ...$$restProps, class: finalDivClass }));
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var div_1 = root_238();
          var node_2 = child(div_1);
          slot(node_2, $$props, "icon", {}, null);
          reset(div_1);
          template_effect(() => set_class(div_1, 1, clsx(get(iconClass))));
          append($$anchor3, div_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (untrack(() => $$slots.icon)) $$render(consequent);
          }),
          "if",
          Toast,
          58,
          4
        );
      }
      var div_2 = sibling(node_1, 2);
      var node_3 = child(div_2);
      slot(node_3, $$props, "default", {}, null);
      reset(div_2);
      var node_4 = sibling(div_2, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_5 = first_child(fragment_1);
          add_svelte_meta(
            () => CloseButton_default(node_5, {
              divclass: clsBtnExtraClass,
              ariaLabel: "Remove toast",
              get color() {
                return color();
              },
              $$events: {
                click: () => {
                  toastStatus(false);
                  dispatch("close");
                }
              }
            }),
            "component",
            Toast,
            69,
            6,
            { componentTag: "CloseButton" }
          );
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (dismissable()) $$render(consequent_1);
          }),
          "if",
          Toast,
          68,
          4
        );
      }
      reset(div);
      template_effect(() => set_class(div_2, 1, clsx(contentClass())));
      transition(3, div, transition2, params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (toastStatus()) $$render(consequent_2);
      }),
      "if",
      Toast,
      51,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;

// node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte
Toolbar[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte";
var root_158 = add_locations(from_html(`<!> <!>`, 1), Toolbar[FILENAME], []);
function Toolbar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["embedded"]);
  push($$props, false, Toolbar);
  const $separators = () => (validate_store(separators, "separators"), store_get(separators, "$separators", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let embedded = prop($$props, "embedded", 8, false);
  const separators = writable(false);
  setContext("toolbar", separators);
  let color = mutable_source();
  let separatorsClass = mutable_source();
  let divClass = mutable_source();
  legacy_pre_effect(
    () => (deep_read_state(embedded()), deep_read_state($$sanitized_props)),
    () => {
      set(color, embedded() ? "none" : $$sanitized_props.color);
    }
  );
  legacy_pre_effect(() => (twJoin, $separators()), () => {
    set(separatorsClass, twJoin($separators() && "sm:divide-x rtl:divide-x-reverse"));
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(embedded()), deep_read_state($$sanitized_props)),
    () => {
      set(divClass, twMerge("flex justify-between items-center", !embedded() && "py-2 px-3", $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = derived_safe_equal(() => !embedded());
    add_svelte_meta(
      () => Frame_default(node, spread_props(() => $$restProps, {
        get class() {
          return get(divClass);
        },
        get color() {
          return get(color);
        },
        get rounded() {
          return get($0);
        },
        children: wrap_snippet(Toolbar, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_158();
          var node_1 = first_child(fragment_1);
          {
            let $02 = derived_safe_equal(() => !embedded());
            add_svelte_meta(
              () => Frame_default(node_1, {
                get class() {
                  return `flex flex-wrap items-center ${get(separatorsClass) ?? ""}`;
                },
                get color() {
                  return get(color);
                },
                get rounded() {
                  return get($02);
                },
                children: wrap_snippet(Toolbar, ($$anchor3, $$slotProps2) => {
                  var fragment_2 = comment();
                  var node_2 = first_child(fragment_2);
                  slot(node_2, $$props, "default", {}, null);
                  append($$anchor3, fragment_2);
                }),
                $$slots: { default: true }
              }),
              "component",
              Toolbar,
              17,
              2,
              { componentTag: "Frame" }
            );
          }
          var node_3 = sibling(node_1, 2);
          slot(node_3, $$props, "end", {}, null);
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      Toolbar,
      16,
      0,
      { componentTag: "Frame" }
    );
  }
  append($$anchor, fragment);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Toolbar = hmr(Toolbar, () => Toolbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toolbar[HMR].source;
    set(Toolbar[HMR].source, module.default[HMR].original);
  });
}
var Toolbar_default = Toolbar;

// node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte
ToolbarGroup[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte";
var root91 = add_locations(from_html(`<div><!></div>`), ToolbarGroup[FILENAME], [[8, 0]]);
function ToolbarGroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, ToolbarGroup);
  const $options = () => (validate_store(options, "options"), store_get(options, "$options", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let divClass = prop($$props, "divClass", 8, "flex items-center space-x-1 rtl:space-x-reverse sm:pe-4 sm:ps-4 first:sm:ps-0 last:sm:pe-0");
  const options = getContext("toolbar");
  if (options) store_set(options, true);
  var $$exports = { ...legacy_api() };
  init();
  var div = root91();
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx((deep_read_state(twMerge), deep_read_state(divClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(divClass(), $$sanitized_props.class))))
  ]);
  append($$anchor, div);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  ToolbarGroup = hmr(ToolbarGroup, () => ToolbarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarGroup[HMR].source;
    set(ToolbarGroup[HMR].source, module.default[HMR].original);
  });
}
var ToolbarGroup_default = ToolbarGroup;

// node_modules/flowbite-svelte/dist/typography/A.svelte
A[FILENAME] = "node_modules/flowbite-svelte/dist/typography/A.svelte";
var root92 = add_locations(from_html(`<a><!></a>`), A[FILENAME], [[10, 0]]);
function A($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["action", "params", "href", "color", "aClass"]);
  push($$props, false, A);
  let action2 = prop($$props, "action", 8, () => {
  });
  let params = prop($$props, "params", 24, () => ({}));
  let href = prop($$props, "href", 8, "#");
  let color = prop($$props, "color", 8, "text-primary-600 dark:text-primary-500");
  let aClass = prop($$props, "aClass", 8, "inline-flex items-center hover:underline");
  var $$exports = { ...legacy_api() };
  init();
  var a = root92();
  attribute_effect(a, ($0) => ({ ...$$restProps, href: href(), class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(aClass()), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge(aClass(), color(), $$sanitized_props.class)))
  ]);
  var node = child(a);
  slot(node, $$props, "default", {}, null);
  reset(a);
  action(a, ($$node, $$action_arg) => {
    var _a;
    return (_a = action2()) == null ? void 0 : _a($$node, $$action_arg);
  }, params);
  effect(() => event("click", a, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  }));
  append($$anchor, a);
  return pop($$exports);
}
if (import.meta.hot) {
  A = hmr(A, () => A[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A[HMR].source;
    set(A[HMR].source, module.default[HMR].original);
  });
}
var A_default = A;

// node_modules/flowbite-svelte/dist/typography/Blockquote.svelte
Blockquote[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Blockquote.svelte";
var root93 = add_locations(from_html(`<blockquote><!></blockquote>`), Blockquote[FILENAME], [[32, 0]]);
function Blockquote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "border",
    "italic",
    "borderClass",
    "bgClass",
    "bg",
    "baseClass",
    "alignment",
    "size"
  ]);
  push($$props, false, Blockquote);
  let border = prop($$props, "border", 8, false);
  let italic = prop($$props, "italic", 8, true);
  let borderClass = prop($$props, "borderClass", 8, "border-s-4 border-gray-300 dark:border-gray-500");
  let bgClass = prop($$props, "bgClass", 8, "bg-gray-50 dark:bg-gray-800");
  let bg = prop($$props, "bg", 8, false);
  let baseClass = prop($$props, "baseClass", 8, "font-semibold text-gray-900 dark:text-white");
  let alignment = prop($$props, "alignment", 8, "left");
  let size = prop($$props, "size", 8, "lg");
  let alignmentClasses = {
    left: "text-left",
    center: "text-center",
    right: "text-right"
  };
  const sizes = {
    xs: "text-xs",
    sm: "text-sm",
    base: "text-base",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl",
    "3xl": "text-3xl",
    "4xl": "text-4xl",
    "5xl": "text-5xl",
    "6xl": "text-6xl",
    "7xl": "text-7xl",
    "8xl": "text-8xl",
    "9xl": "text-9xl"
  };
  var $$exports = { ...legacy_api() };
  init();
  var blockquote = root93();
  attribute_effect(blockquote, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(baseClass()), deep_read_state(alignment()), deep_read_state(size()), deep_read_state(bg()), deep_read_state(bgClass()), deep_read_state(border()), deep_read_state(borderClass()), deep_read_state(italic()), deep_read_state($$sanitized_props), untrack(() => twMerge(baseClass(), alignmentClasses[alignment()], sizes[size()], bg() && bgClass(), border() && borderClass(), italic() && "italic", $$sanitized_props.class)))
  ]);
  var node = child(blockquote);
  slot(node, $$props, "default", {}, null);
  reset(blockquote);
  append($$anchor, blockquote);
  return pop($$exports);
}
if (import.meta.hot) {
  Blockquote = hmr(Blockquote, () => Blockquote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blockquote[HMR].source;
    set(Blockquote[HMR].source, module.default[HMR].original);
  });
}
var Blockquote_default = Blockquote;

// node_modules/flowbite-svelte/dist/typography/DescriptionList.svelte
DescriptionList[FILENAME] = "node_modules/flowbite-svelte/dist/typography/DescriptionList.svelte";
function DescriptionList($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "dtClass", "ddClass"]);
  push($$props, false, DescriptionList);
  let tag2 = prop($$props, "tag", 8, "dt");
  let dtClass = prop($$props, "dtClass", 8, "text-gray-500 md:text-lg dark:text-gray-400");
  let ddClass = prop($$props, "ddClass", 8, "text-lg font-semibold");
  let classDesc = twMerge(strict_equals(tag2(), "dt") ? dtClass() : ddClass(), $$sanitized_props.class);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node,
      tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({ ...$$restProps, class: classDesc }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      },
      void 0,
      [8, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DescriptionList = hmr(DescriptionList, () => DescriptionList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DescriptionList[HMR].source;
    set(DescriptionList[HMR].source, module.default[HMR].original);
  });
}
var DescriptionList_default = DescriptionList;

// node_modules/flowbite-svelte/dist/typography/Heading.svelte
Heading[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Heading.svelte";
function Heading($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "color", "customSize"]);
  push($$props, false, Heading);
  let tag2 = prop($$props, "tag", 8, "h1");
  let color = prop($$props, "color", 8, "text-gray-900 dark:text-white");
  let customSize = prop($$props, "customSize", 8, "");
  const textSizes = {
    h1: "text-5xl font-extrabold",
    h2: "text-4xl font-bold",
    h3: "text-3xl font-bold",
    h4: "text-2xl font-bold",
    h5: "text-xl font-bold",
    h6: "text-lg font-bold"
  };
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node,
      tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, ($0) => ({ ...$$restProps, class: $0 }), [
          () => (deep_read_state(twMerge), deep_read_state(customSize()), deep_read_state(tag2()), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge(customSize() ? customSize() : textSizes[tag2()], color(), "w-full", $$sanitized_props.class)))
        ]);
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      },
      void 0,
      [15, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Heading = hmr(Heading, () => Heading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading[HMR].source;
    set(Heading[HMR].source, module.default[HMR].original);
  });
}
var Heading_default = Heading;

// node_modules/flowbite-svelte/dist/typography/Hr.svelte
Hr[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Hr.svelte";
var root_159 = add_locations(from_html(`<div><hr/> <div><!></div></div>`), Hr[FILENAME], [[14, 2, [[15, 4], [16, 4]]]]);
var root_239 = add_locations(from_html(`<hr/>`), Hr[FILENAME], [[21, 2]]);
function Hr($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "icon",
    "divClass",
    "hrClass",
    "iconDivClass",
    "textSpanClass",
    "innerDivClass"
  ]);
  push($$props, false, Hr);
  let icon = prop($$props, "icon", 8, false);
  let divClass = prop($$props, "divClass", 8, "inline-flex items-center justify-center w-full");
  let hrClass = prop($$props, "hrClass", 8, "h-px my-8 bg-gray-200 border-0 dark:bg-gray-700");
  let iconDivClass = prop($$props, "iconDivClass", 8, "absolute start-1/2 px-4 bg-white -translate-x-1/2 rtl:translate-x-1/2 ");
  let textSpanClass = prop($$props, "textSpanClass", 8, "absolute px-3 font-medium text-gray-900 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:text-white dark:bg-gray-900 ");
  let innerDivClass = prop($$props, "innerDivClass", 8, "absolute px-4 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:bg-gray-900");
  let horizontalCls = twMerge(hrClass(), $$sanitized_props.classHr);
  let divCls = twMerge(divClass(), $$slots && "relative", $$sanitized_props.classDiv);
  let innerDivCls = twMerge(innerDivClass(), icon() ? iconDivClass() : textSpanClass(), $$sanitized_props.classInnerDiv);
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_159();
      attribute_effect(div, () => ({ ...$$restProps, class: divCls }));
      var hr = child(div);
      var div_1 = sibling(hr, 2);
      var node_1 = child(div_1);
      slot(node_1, $$props, "default", {}, null);
      reset(div_1);
      reset(div);
      template_effect(() => {
        set_class(hr, 1, clsx(horizontalCls));
        set_class(div_1, 1, clsx(innerDivCls));
      });
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var hr_1 = root_239();
      template_effect(() => set_class(hr_1, 1, clsx(horizontalCls)));
      append($$anchor2, hr_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (untrack(() => $$slots.default)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Hr,
      13,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Hr = hmr(Hr, () => Hr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hr[HMR].source;
    set(Hr[HMR].source, module.default[HMR].original);
  });
}
var Hr_default = Hr;

// node_modules/flowbite-svelte/dist/typography/Img.svelte
Img[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Img.svelte";
var root_160 = add_locations(from_html(`<figure><img/> <figcaption><!></figcaption></figure>`), Img[FILENAME], [[15, 2, [[16, 4], [17, 4]]]]);
var root_240 = add_locations(from_html(`<img/>`), Img[FILENAME], [[20, 2]]);
function Img($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "caption",
    "src",
    "srcset",
    "size",
    "alignment",
    "imgClass",
    "figClass",
    "alt",
    "effect",
    "captionClass"
  ]);
  push($$props, false, Img);
  let caption = prop($$props, "caption", 24, () => void 0);
  let src = prop($$props, "src", 24, () => void 0);
  let srcset = prop($$props, "srcset", 24, () => void 0);
  let size = prop($$props, "size", 8, "max-w-full");
  let alignment = prop($$props, "alignment", 8, "");
  let imgClass = prop($$props, "imgClass", 8, "h-auto");
  let figClass = prop($$props, "figClass", 8, "max-w-lg");
  let alt = prop($$props, "alt", 8, "");
  let effect2 = prop($$props, "effect", 8, "");
  let captionClass = prop($$props, "captionClass", 8, "mt-2 text-sm text-center text-gray-500 dark:text-gray-400");
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var figure = root_160();
      var img = child(figure);
      attribute_effect(
        img,
        ($0) => ({
          class: $0,
          src: src(),
          srcset: srcset(),
          alt: alt(),
          ...$$restProps
        }),
        [
          () => (deep_read_state(twMerge), deep_read_state(imgClass()), deep_read_state(size()), deep_read_state(alignment()), deep_read_state(effect2()), deep_read_state($$sanitized_props), untrack(() => twMerge(imgClass(), size(), alignment(), effect2(), $$sanitized_props.class)))
        ]
      );
      var figcaption = sibling(img, 2);
      var node_1 = child(figcaption);
      html(node_1, caption);
      reset(figcaption);
      reset(figure);
      template_effect(() => {
        set_class(figure, 1, clsx(figClass()));
        set_class(figcaption, 1, clsx(captionClass()));
      });
      replay_events(img);
      append($$anchor2, figure);
    };
    var alternate = ($$anchor2) => {
      var img_1 = root_240();
      attribute_effect(
        img_1,
        ($0) => ({
          ...$$restProps,
          class: $0,
          src: src(),
          srcset: srcset(),
          alt: alt()
        }),
        [
          () => (deep_read_state(twMerge), deep_read_state(imgClass()), deep_read_state(size()), deep_read_state(alignment()), deep_read_state(effect2()), deep_read_state($$sanitized_props), untrack(() => twMerge(imgClass(), size(), alignment(), effect2(), $$sanitized_props.class)))
        ]
      );
      replay_events(img_1);
      append($$anchor2, img_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (caption()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Img,
      14,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Img = hmr(Img, () => Img[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Img[HMR].source;
    set(Img[HMR].source, module.default[HMR].original);
  });
}
var Img_default = Img;

// node_modules/flowbite-svelte/dist/typography/Layout.svelte
Layout[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Layout.svelte";
var root94 = add_locations(from_html(`<div><!></div>`), Layout[FILENAME], [[8, 0]]);
function Layout($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["divClass", "cols", "gap"]);
  push($$props, false, Layout);
  let divClass = prop($$props, "divClass", 8, "grid");
  let cols = prop($$props, "cols", 8, "grid-cols-1 sm:grid-cols-2");
  let gap = prop($$props, "gap", 8, 6);
  let classDiv = twMerge(divClass(), "gap-" + String(gap()), cols());
  var $$exports = { ...legacy_api() };
  init();
  var div = root94();
  attribute_effect(div, () => ({ ...$$restProps, class: classDiv }));
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Layout = hmr(Layout, () => Layout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout[HMR].source;
    set(Layout[HMR].source, module.default[HMR].original);
  });
}
var Layout_default = Layout;

// node_modules/flowbite-svelte/dist/typography/Li.svelte
Li[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Li.svelte";
var root95 = add_locations(from_html(`<li><!></li>`), Li[FILENAME], [[7, 0]]);
function Li($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["icon", "liClass"]);
  push($$props, false, Li);
  let icon = prop($$props, "icon", 8, false);
  let liClass = prop($$props, "liClass", 8, "");
  let classLi = twMerge(liClass(), icon() && "flex items-center", $$sanitized_props.class);
  var $$exports = { ...legacy_api() };
  init();
  var li = root95();
  attribute_effect(li, () => ({ ...$$restProps, class: classLi }));
  var node = child(li);
  slot(node, $$props, "default", {}, null);
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  Li = hmr(Li, () => Li[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Li[HMR].source;
    set(Li[HMR].source, module.default[HMR].original);
  });
}
var Li_default = Li;

// node_modules/flowbite-svelte/dist/typography/Mark.svelte
Mark[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Mark.svelte";
var root96 = add_locations(from_html(`<mark><!></mark>`), Mark[FILENAME], [[7, 0]]);
function Mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "bgColor", "markClass"]);
  push($$props, false, Mark);
  let color = prop($$props, "color", 8, "text-white dark:bg-blue-500");
  let bgColor = prop($$props, "bgColor", 8, "bg-blue-600");
  let markClass = prop($$props, "markClass", 8, "px-2 rounded");
  var $$exports = { ...legacy_api() };
  init();
  var mark = root96();
  attribute_effect(mark, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(markClass()), deep_read_state(bgColor()), deep_read_state(color()), deep_read_state($$sanitized_props), untrack(() => twMerge(markClass(), bgColor(), color(), $$sanitized_props.class)))
  ]);
  var node = child(mark);
  slot(node, $$props, "default", {}, null);
  reset(mark);
  append($$anchor, mark);
  return pop($$exports);
}
if (import.meta.hot) {
  Mark = hmr(Mark, () => Mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mark[HMR].source;
    set(Mark[HMR].source, module.default[HMR].original);
  });
}
var Mark_default = Mark;

// node_modules/flowbite-svelte/dist/typography/List.svelte
List[FILENAME] = "node_modules/flowbite-svelte/dist/typography/List.svelte";
function List($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["tag", "list", "position"]);
  push($$props, false, List);
  let tag2 = prop($$props, "tag", 8, "ul");
  let list = prop($$props, "list", 24, () => void 0);
  let position = prop($$props, "position", 8, "inside");
  let lists = {
    disc: "list-disc",
    none: "list-none",
    decimal: "list-decimal"
  };
  let positions = { inside: "list-inside", outside: "list-outside" };
  let classList = twMerge(
    lists[list() ?? (strict_equals(tag2(), "ul") ? "disc" : strict_equals(tag2(), "ol") ? "decimal" : "none")],
    positions[position()],
    $$sanitized_props.class
  );
  var $$exports = { ...legacy_api() };
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node,
      tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({ ...$$restProps, class: classList }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      },
      void 0,
      [17, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var List_default = List;

// node_modules/flowbite-svelte/dist/typography/P.svelte
P[FILENAME] = "node_modules/flowbite-svelte/dist/typography/P.svelte";
var root97 = add_locations(from_html(`<p><!></p>`), P[FILENAME], [[69, 0]]);
function P($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "color",
    "height",
    "align",
    "justify",
    "italic",
    "firstupper",
    "upperClass",
    "opacity",
    "whitespace",
    "size",
    "space",
    "weight"
  ]);
  push($$props, false, P);
  const colorAndopacity = mutable_source();
  const classP = mutable_source();
  let color = prop($$props, "color", 8, "text-gray-900 dark:text-white");
  let height = prop($$props, "height", 8, "normal");
  let align = prop($$props, "align", 8, "left");
  let justify = prop($$props, "justify", 8, false);
  let italic = prop($$props, "italic", 8, false);
  let firstupper = prop($$props, "firstupper", 8, false);
  let upperClass = prop($$props, "upperClass", 8, "first-line:uppercase first-line:tracking-widest first-letter:text-7xl first-letter:font-bold first-letter:text-gray-900 dark:first-letter:text-gray-100 first-letter:me-3 first-letter:float-left");
  let opacity = prop($$props, "opacity", 24, () => void 0);
  let whitespace = prop($$props, "whitespace", 8, "normal");
  let size = prop($$props, "size", 8, "base");
  let space = prop($$props, "space", 24, () => void 0);
  let weight = prop($$props, "weight", 8, "normal");
  const sizes = {
    xs: "text-xs",
    sm: "text-sm",
    base: "text-base",
    lg: "text-lg",
    xl: "text-xl",
    "2xl": "text-2xl",
    "3xl": "text-3xl",
    "4xl": "text-4xl",
    "5xl": "text-5xl",
    "6xl": "text-6xl",
    "7xl": "text-7xl",
    "8xl": "text-8xl",
    "9xl": "text-9xl"
  };
  const weights = {
    thin: "font-thin",
    extralight: "font-extralight",
    light: "font-light",
    normal: "font-normal",
    medium: "font-medium",
    semibold: "font-semibold",
    bold: "font-bold",
    extrabold: "font-extrabold",
    black: "font-black"
  };
  const spaces = {
    tighter: "tracking-tighter",
    tight: "tracking-tight",
    normal: "tracking-normal",
    wide: "tracking-wide",
    wider: "tracking-wider",
    widest: "tracking-widest"
  };
  const heights = {
    normal: "leading-normal",
    relaxed: "leading-relaxed",
    loose: "leading-loose"
  };
  const aligns = {
    left: "text-left",
    center: "text-center",
    right: "text-right"
  };
  const whitespaces = {
    normal: "whitespace-normal",
    nowrap: "whitespace-nowrap",
    pre: "whitespace-pre",
    preline: "whitespace-pre-line",
    prewrap: "whitespace-pre-wrap"
  };
  legacy_pre_effect(() => (deep_read_state(color()), deep_read_state(opacity())), () => {
    set(colorAndopacity, color().split(" ").map((element2) => element2.trim()).map((element2) => element2 + "/" + String(opacity())).join(" "));
  });
  legacy_pre_effect(
    () => (twMerge, deep_read_state(size()), deep_read_state(opacity()), get(colorAndopacity), deep_read_state(color()), deep_read_state(height()), deep_read_state(weight()), deep_read_state(space()), deep_read_state(align()), deep_read_state(justify()), deep_read_state(italic()), deep_read_state(firstupper()), deep_read_state(upperClass()), deep_read_state(whitespace()), deep_read_state($$sanitized_props)),
    () => {
      set(classP, twMerge(size() && sizes[size()], opacity() && get(colorAndopacity) || color() && color(), height() && heights[height()], weight() && weights[weight()], space() && spaces[space()], align() && aligns[align()], justify() && "text-justify", italic() && "italic", firstupper() && upperClass(), whitespace() && whitespaces[whitespace()], $$sanitized_props.class));
    }
  );
  legacy_pre_effect_reset();
  var $$exports = { ...legacy_api() };
  init();
  var p = root97();
  attribute_effect(p, () => ({ ...$$restProps, class: get(classP) }));
  var node = child(p);
  slot(node, $$props, "default", {}, null);
  reset(p);
  append($$anchor, p);
  return pop($$exports);
}
if (import.meta.hot) {
  P = hmr(P, () => P[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = P[HMR].source;
    set(P[HMR].source, module.default[HMR].original);
  });
}
var P_default = P;

// node_modules/flowbite-svelte/dist/typography/Secondary.svelte
Secondary[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Secondary.svelte";
var root98 = add_locations(from_html(`<small><!></small>`), Secondary[FILENAME], [[6, 0]]);
function Secondary($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["color", "secondaryClass"]);
  push($$props, false, Secondary);
  let color = prop($$props, "color", 8, "text-gray-500 dark:text-gray-400");
  let secondaryClass = prop($$props, "secondaryClass", 8, "font-semibold");
  var $$exports = { ...legacy_api() };
  init();
  var small = root98();
  attribute_effect(small, ($0) => ({ ...$$restProps, class: $0 }), [
    () => (deep_read_state(twMerge), deep_read_state(color()), deep_read_state(secondaryClass()), deep_read_state($$sanitized_props), untrack(() => twMerge(color(), secondaryClass(), $$sanitized_props.class)))
  ]);
  var node = child(small);
  slot(node, $$props, "default", {}, null);
  reset(small);
  append($$anchor, small);
  return pop($$exports);
}
if (import.meta.hot) {
  Secondary = hmr(Secondary, () => Secondary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Secondary[HMR].source;
    set(Secondary[HMR].source, module.default[HMR].original);
  });
}
var Secondary_default = Secondary;

// node_modules/flowbite-svelte/dist/typography/Span.svelte
Span[FILENAME] = "node_modules/flowbite-svelte/dist/typography/Span.svelte";
var root99 = add_locations(from_html(`<span><!></span>`), Span[FILENAME], [[15, 0]]);
function Span($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "italic",
    "underline",
    "linethrough",
    "uppercase",
    "gradient",
    "highlight",
    "highlightClass",
    "decorationClass",
    "gradientClass"
  ]);
  push($$props, false, Span);
  let italic = prop($$props, "italic", 8, false);
  let underline = prop($$props, "underline", 8, false);
  let linethrough = prop($$props, "linethrough", 8, false);
  let uppercase = prop($$props, "uppercase", 8, false);
  let gradient = prop($$props, "gradient", 8, false);
  let highlight = prop($$props, "highlight", 8, false);
  let highlightClass = prop($$props, "highlightClass", 8, "text-blue-600 dark:text-blue-500");
  let decorationClass = prop($$props, "decorationClass", 8, "decoration-2 decoration-blue-400 dark:decoration-blue-600");
  let gradientClass = prop($$props, "gradientClass", 8, "text-transparent bg-clip-text bg-gradient-to-r to-emerald-600 from-sky-400");
  let underlineClass = twMerge("underline", decorationClass());
  let classSpan = twMerge(
    italic() && "italic",
    underline() && underlineClass,
    linethrough() && "line-through",
    uppercase() && "uppercase",
    gradient() ? gradientClass() : "font-semibold text-gray-900 dark:text-white",
    highlight() && highlightClass(),
    $$sanitized_props.class
  );
  var $$exports = { ...legacy_api() };
  init();
  var span = root99();
  attribute_effect(span, () => ({ ...$$restProps, class: classSpan }));
  var node = child(span);
  slot(node, $$props, "default", {}, null);
  reset(span);
  append($$anchor, span);
  return pop($$exports);
}
if (import.meta.hot) {
  Span = hmr(Span, () => Span[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Span[HMR].source;
    set(Span[HMR].source, module.default[HMR].original);
  });
}
var Span_default = Span;

// node_modules/flowbite-svelte/dist/video/Video.svelte
Video[FILENAME] = "node_modules/flowbite-svelte/dist/video/Video.svelte";
var root100 = add_locations(from_html(`<video><source/> <!> <track kind="captions"/> Your browser does not support the video tag.</video>`, 2), Video[FILENAME], [[10, 0, [[11, 2], [13, 2]]]]);
function Video($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["src", "type", "trackSrc", "srclang", "label"]);
  push($$props, false, Video);
  let src = prop($$props, "src", 8);
  let type = prop($$props, "type", 8, "video/mp4");
  let trackSrc = prop($$props, "trackSrc", 8, "");
  let srclang = prop($$props, "srclang", 8, "en");
  let label = prop($$props, "label", 8, "english_captions");
  let videoClass = twMerge($$sanitized_props.class);
  var $$exports = { ...legacy_api() };
  init();
  var video = root100();
  attribute_effect(video, () => ({ ...$$restProps, class: videoClass }));
  var source = child(video);
  var node = sibling(source, 2);
  slot(node, $$props, "default", {}, null);
  var track = sibling(node, 2);
  next();
  reset(video);
  template_effect(() => {
    set_attribute(source, "src", src());
    set_attribute(source, "type", type());
    set_attribute(track, "src", trackSrc());
    set_attribute(track, "srclang", srclang());
    set_attribute(track, "label", label());
  });
  append($$anchor, video);
  return pop($$exports);
}
if (import.meta.hot) {
  Video = hmr(Video, () => Video[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Video[HMR].source;
    set(Video[HMR].source, module.default[HMR].original);
  });
}
var Video_default = Video;
export {
  A_default as A,
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  Activity_default as Activity,
  ActivityItem_default as ActivityItem,
  AdvancedRating_default as AdvancedRating,
  Alert_default as Alert,
  ArrowKeyDown_default as ArrowKeyDown,
  ArrowKeyLeft_default as ArrowKeyLeft,
  ArrowKeyRight_default as ArrowKeyRight,
  ArrowKeyUp_default as ArrowKeyUp,
  Avatar_default as Avatar,
  Badge_default as Badge,
  Banner_default as Banner,
  Blockquote_default as Blockquote,
  BottomNav_default as BottomNav,
  BottomNavHeader_default as BottomNavHeader,
  BottomNavHeaderItem_default as BottomNavHeaderItem,
  BottomNavItem_default as BottomNavItem,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  Card_default as Card,
  CardPlaceholder_default as CardPlaceholder,
  Carousel_default as Carousel,
  Chart_default as Chart,
  Checkbox_default as Checkbox,
  CheckboxButton_default as CheckboxButton,
  CloseButton_default as CloseButton,
  DarkMode_default as DarkMode,
  Datepicker_default as Datepicker,
  DescriptionList_default as DescriptionList,
  DeviceMockup_default as DeviceMockup,
  Drawer_default as Drawer,
  Dropdown_default as Dropdown,
  DropdownDivider_default as DropdownDivider,
  DropdownHeader_default as DropdownHeader,
  DropdownItem_default as DropdownItem,
  Dropzone_default as Dropzone,
  Fileupload_default as Fileupload,
  FloatingLabelInput_default as FloatingLabelInput,
  Footer_default as Footer,
  FooterBrand_default as FooterBrand,
  FooterCopyright_default as FooterCopyright,
  FooterIcon_default as FooterIcon,
  FooterLink_default as FooterLink,
  FooterLinkGroup_default as FooterLinkGroup,
  Frame_default as Frame,
  Gallery_default as Gallery,
  GradientButton_default as GradientButton,
  Group_default as Group,
  GroupItem_default as GroupItem,
  Heading_default as Heading,
  Heart_default as Heart,
  Helper_default as Helper,
  Hr_default as Hr,
  ImagePlaceholder_default as ImagePlaceholder,
  Img_default as Img,
  Indicator_default as Indicator,
  Input_default as Input,
  InputAddon_default as InputAddon,
  Kbd_default as Kbd,
  Label_default as Label,
  Layout_default as Layout,
  Li_default as Li,
  List_default as List,
  ListPlaceholder_default as ListPlaceholder,
  Listgroup_default as Listgroup,
  ListgroupItem_default as ListgroupItem,
  Mark_default as Mark,
  Marquee_default as Marquee,
  MegaMenu_default as MegaMenu,
  Modal_default as Modal,
  MultiSelect_default as MultiSelect,
  NavBrand_default as NavBrand,
  NavHamburger_default as NavHamburger,
  NavLi_default as NavLi,
  NavUl_default as NavUl,
  Navbar_default as Navbar,
  NumberInput_default as NumberInput,
  P_default as P,
  Pagination_default as Pagination,
  PaginationItem_default as PaginationItem,
  Popover_default as Popover,
  Progressbar_default as Progressbar,
  Radio_default as Radio,
  RadioButton_default as RadioButton,
  Range_default as Range,
  Rating_default as Rating,
  RatingComment_default as RatingComment,
  Review_default as Review,
  ScoreRating_default as ScoreRating,
  Search_default as Search,
  Secondary_default as Secondary,
  Select_default as Select,
  Sidebar_default as Sidebar,
  SidebarBrand_default as SidebarBrand,
  SidebarCta_default as SidebarCta,
  SidebarDropdownItem_default as SidebarDropdownItem,
  SidebarDropdownWrapper_default as SidebarDropdownWrapper,
  SidebarGroup_default as SidebarGroup,
  SidebarItem_default as SidebarItem,
  SidebarWrapper_default as SidebarWrapper,
  Skeleton_default as Skeleton,
  Span_default as Span,
  SpeedDial_default as SpeedDial,
  SpeedDialButton_default as SpeedDialButton,
  Spinner_default as Spinner,
  Star_default as Star,
  StepIndicator_default as StepIndicator,
  TabItem_default as TabItem,
  Table_default as Table,
  TableBody_default as TableBody,
  TableBodyCell_default as TableBodyCell,
  TableBodyRow_default as TableBodyRow,
  TableHead_default as TableHead,
  TableHeadCell_default as TableHeadCell,
  TableSearch_default as TableSearch,
  Tabs_default as Tabs,
  TestimonialPlaceholder_default as TestimonialPlaceholder,
  TextPlaceholder_default as TextPlaceholder,
  Textarea_default as Textarea,
  Thumbnails_default as Thumbnails,
  Thumbup_default as Thumbup,
  Timeline_default as Timeline,
  TimelineItem_default as TimelineItem,
  Toast_default as Toast,
  Toggle_default as Toggle,
  Toolbar_default as Toolbar,
  ToolbarButton_default as ToolbarButton,
  ToolbarGroup_default as ToolbarGroup,
  Tooltip_default as Tooltip,
  TransitionFrame_default as TransitionFrame,
  Video_default as Video,
  VideoPlaceholder_default as VideoPlaceholder,
  WidgetPlaceholder_default as WidgetPlaceholder
};
//# sourceMappingURL=flowbite-svelte.js.map
